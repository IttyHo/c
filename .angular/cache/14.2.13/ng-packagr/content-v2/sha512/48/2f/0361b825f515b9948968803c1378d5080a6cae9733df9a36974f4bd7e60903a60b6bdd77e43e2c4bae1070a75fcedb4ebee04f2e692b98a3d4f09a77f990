{"hash":"6a5f55c5a89e37a7db0c2722bfaa9b65479c19eb","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { map, tap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/common/http';\nimport { HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { combineLatest } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nclass StoreService {\r\n    constructor() { }\r\n}\r\nStoreService.ɵfac = function StoreService_Factory(t) { return new (t || StoreService)(); };\r\nStoreService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: StoreService, factory: StoreService.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return []; }, null); })();\n\nclass StoreComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nStoreComponent.ɵfac = function StoreComponent_Factory(t) { return new (t || StoreComponent)(); };\r\nStoreComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: StoreComponent, selectors: [[\"lib-store\"]], decls: 2, vars: 0, template: function StoreComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"p\");\r\n        i0.ɵɵtext(1, \" store works! \");\r\n        i0.ɵɵelementEnd();\r\n    } }, encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'lib-store', template: `\n    <p>\n      store works!\n    </p>\n  ` }]\r\n    }], function () { return []; }, null); })();\n\nclass StoreLibModule {\r\n}\r\nStoreLibModule.ɵfac = function StoreLibModule_Factory(t) { return new (t || StoreLibModule)(); };\r\nStoreLibModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: StoreLibModule });\r\nStoreLibModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreLibModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [StoreComponent],\r\n                imports: [],\r\n                exports: [StoreComponent]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(StoreLibModule, { declarations: [StoreComponent], exports: [StoreComponent] }); })();\n\nconst taskActions = {\r\n    addTask: createAction('[Todo] Add Task', props()),\r\n    removeTask: createAction('[Todo] Remove Task', props()),\r\n    loadTasks: createAction('[Todo] Load Tasks'),\r\n    loadTasksSuccess: createAction('[Todo] Load Tasks success'),\r\n    loadTasksFailure: createAction('[Todo] Load Tasks failure', props()),\r\n    updateTask: createAction('[Todo] Update Task', props())\r\n};\n\nclass TodoEffects {\r\n    constructor(actions$) {\r\n        // alert('TodoEffects constructor called!!!');\r\n        this.actions$ = actions$;\r\n        this.loadTodos$ = createEffect(() => {\r\n            // console.log('Setting up loadTodos$ effect');\r\n            return this.actions$.pipe(\r\n            // tap(action => console.log('Action in pipe:', action)),\r\n            ofType(taskActions.loadTasks), \r\n            // tap(() => alert('loadTodos action caught')),\r\n            map(() => taskActions.loadTasksSuccess()));\r\n        });\r\n        this.addTask$ = createEffect(() => {\r\n            // console.log('Setting up addTask$ effect');\r\n            return this.actions$.pipe(\r\n            // tap(action => console.log('Action in pipe:', action)),\r\n            ofType(taskActions.addTask), \r\n            // tap(() => alert('addTask action caught')),\r\n            map(_ => taskActions.loadTasksSuccess()));\r\n        });\r\n        this.removeTask$ = createEffect(() => {\r\n            // console.log('Setting up addTask$ effect');\r\n            return this.actions$.pipe(\r\n            // tap(action => console.log('Action in pipe:', action)),\r\n            ofType(taskActions.removeTask), \r\n            // tap(() => alert('addTask action caught')),\r\n            map(_ => taskActions.loadTasksSuccess()));\r\n        });\r\n        this.updateTask$ = createEffect(() => {\r\n            return this.actions$.pipe(ofType(taskActions.updateTask), map(_ => taskActions.loadTasksSuccess()));\r\n        });\r\n        // נוסיף subscription לדיבאג\r\n        this.actions$.subscribe(action => {\r\n            console.log('Action received in effects:', action);\r\n        });\r\n    }\r\n}\r\nTodoEffects.ɵfac = function TodoEffects_Factory(t) { return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions)); };\r\nTodoEffects.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TodoEffects, factory: TodoEffects.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TodoEffects, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return [{ type: i1.Actions }]; }, null); })();\n\nconst initialState = {\r\n    tasks: [] = [],\r\n};\n\nconst todoReducer = createReducer(initialState, on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n})), on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n})), on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n})), on(taskActions.addTask, (state, { task }) => ({\r\n    ...state,\r\n    tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\r\n})), on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n})), on(taskActions.updateTask, (state, { id, newText }) => {\r\n    const taskExists = state.tasks.some(task => task.id === id);\r\n    if (!taskExists) {\r\n        alert(\"not exists\");\r\n        return state; // No changes if the task doesn't exist\r\n    }\r\n    return {\r\n        ...state,\r\n        tasks: state.tasks.map(task => task.id === id\r\n            ? { ...task, text: newText } // Update the task\r\n            : task // Keep other tasks unchanged\r\n        )\r\n    };\r\n}));\n\nconst taskFeatureSelector = createFeatureSelector('todos');\r\nconst selectAllTodos$ = createSelector(taskFeatureSelector, ({ tasks }) => tasks);\r\n// export const selectTodoLoading = createSelector(\r\n//   selectTodoState,\r\n//   (state: TodoState) => state\r\n// );\n\nclass ConfigurationService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    getTokenAndHeaders() {\r\n        this.headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${this.ips.token}`\r\n        });\r\n    }\r\n    initConfiguration(path) {\r\n        return combineLatest(this.http.get(`${path}/ipConfig.json`)).pipe(tap(res => console.log), \r\n        // map(response=>this.ips]),\r\n        tap(response => [this.ips] = response), tap(_ => this.getTokenAndHeaders())).toPromise();\r\n    }\r\n}\r\nConfigurationService.ɵfac = function ConfigurationService_Factory(t) { return new (t || ConfigurationService)(i0.ɵɵinject(i1$1.HttpClient)); };\r\nConfigurationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigurationService, factory: ConfigurationService.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConfigurationService, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: i1$1.HttpClient }]; }, null); })();\n\nclass HttpServiceBase {\r\n    constructor(http, config) {\r\n        this.http = http;\r\n        this.config = config;\r\n        this.index = 0;\r\n    }\r\n    get$(httpRequest) {\r\n        if (httpRequest.isText) {\r\n            return this._get$(httpRequest);\r\n        }\r\n        return this.http.get(httpRequest.fullUrl, { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n    }\r\n    delete$(httpRequest) {\r\n        return this.http.delete(httpRequest.fullUrl, { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n    }\r\n    post$(httpRequest) {\r\n        if (httpRequest.isText) {\r\n            return this._post$(httpRequest);\r\n        }\r\n        return this.http.post(httpRequest.fullUrl, httpRequest.body, { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n    }\r\n    put$(httpRequest) {\r\n        // return this.http.put<boolean>(this._serverUrl+'/select/'+ addressId, null,\r\n        //   { headers: this.configService.headers});\r\n        return this.http.put(httpRequest.fullUrlWithQS, null, { headers: httpRequest.headers });\r\n    }\r\n    request$(httpRequest) {\r\n        return this.http.request('GET', httpRequest.fullUrl, {\r\n            params: { ...httpRequest.fullParams },\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n    requestPost$(httpRequest) {\r\n        return this.http.request('POST', httpRequest.fullUrl, {\r\n            body: { ...httpRequest.body },\r\n            params: { ...httpRequest.fullParams },\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n    _get$(httpRequest) {\r\n        return this.http.get(httpRequest.fullUrl, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n    }\r\n    _post$(httpRequest) {\r\n        return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n    }\r\n}\r\nHttpServiceBase.ɵfac = function HttpServiceBase_Factory(t) { return new (t || HttpServiceBase)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(ConfigurationService)); };\r\nHttpServiceBase.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HttpServiceBase, factory: HttpServiceBase.ɵfac });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpServiceBase, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: i1$1.HttpClient }, { type: ConfigurationService }]; }, null); })();\n\nclass HttpRequestModel {\r\n    constructor(copy) {\r\n        this.params = {};\r\n        this.body = {};\r\n        Object.assign(this, copy);\r\n        this.params = Object.entries(this.params)\r\n            .filter(([, val]) => val !== null)\r\n            .filter(([, val]) => val !== undefined)\r\n            .reduce((state, [key, val]) => ({ ...state, [key]: val }), {});\r\n        if (Array.isArray(this.body)) {\r\n            return;\r\n        }\r\n        this.body = Object.entries(this.body)\r\n            .filter(([, val]) => val !== null)\r\n            .filter(([, val]) => val !== undefined)\r\n            .reduce((state, [key, val]) => ({\r\n            ...state, [key]: val\r\n        }), {});\r\n        this.body = Object.keys(this.body).length ? this.body : null;\r\n    }\r\n    get queryParams() {\r\n        const result = this._queryParams(this.params);\r\n        return /&/.test(result) ? `?${result}` : '';\r\n    }\r\n    _queryParams(params, prefix = '') {\r\n        const result = Object.entries(params)\r\n            .filter(([, value]) => typeof (value) !== 'object')\r\n            .map(([key, value]) => `${prefix}${key}=${decodeURIComponent(value)}`)\r\n            .join('&');\r\n        return Object.entries(params)\r\n            .filter(([, value]) => typeof (value) === 'object')\r\n            .map(([key, value]) => this._queryParams(value, `${key}.`))\r\n            .concat(result)\r\n            .join('&');\r\n    }\r\n    get fullUrl() {\r\n        return this.action ? `${this.url}${this.action}` : this.url;\r\n    }\r\n    get fullParams() {\r\n        return this.params;\r\n    }\r\n    get fullUrlWithQS() {\r\n        return `${this.url}/${this.qsData}`;\r\n    }\r\n}\n\nclass AddressService extends HttpServiceBase {\r\n    constructor(http, configService) {\r\n        super(http, configService);\r\n        this.http = http;\r\n        this.configService = configService;\r\n        this.headers = '';\r\n    }\r\n    get _serverUrl() {\r\n        return `${this.configService.ips.swaggerPath}/api/Address`;\r\n    }\r\n    addAddress(address) {\r\n        return this.post$(new HttpRequestModel({\r\n            url: this._serverUrl,\r\n            body: address,\r\n            headers: this.configService.headers\r\n        }));\r\n    }\r\n    // addAddress(address:Address): Observable<boolean> {\r\n    //   return this.http.post<boolean>(this.configService.ips.swaggerPath + '/api/Address', address,{\r\n    //     headers: this.configService.headers,\r\n    //   });\r\n    // }\r\n    updateAddressToCheckout(addressId) {\r\n        return this.put$(new HttpRequestModel({\r\n            url: this._serverUrl + '/select',\r\n            headers: this.configService.headers,\r\n            qsData: addressId\r\n        }));\r\n    }\r\n    getAddress() {\r\n        // return this.http.get<Address[]>(this._serverUrl, {\r\n        //   headers: this.configService.headers\r\n        // });\r\n        return this.get$(new HttpRequestModel({\r\n            url: this._serverUrl,\r\n            headers: this.configService.headers\r\n        }));\r\n    }\r\n}\r\nAddressService.ɵfac = function AddressService_Factory(t) { return new (t || AddressService)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(ConfigurationService)); };\r\nAddressService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AddressService, factory: AddressService.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AddressService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return [{ type: i1$1.HttpClient }, { type: ConfigurationService }]; }, null); })();\n\nclass PaymentService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.apiUrl = 'https://du-mock-checkout-7d42d0a76fbf.herokuapp.com';\r\n    }\r\n    //https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/#addresses\r\n    getPaymentOptions(token) {\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n        // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\r\n        return this.http.get(this.apiUrl + '/api/Payment/Options', { headers });\r\n    }\r\n    getPaymentCreditCardOptions(token) {\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n        // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\r\n        return this.http.get(this.apiUrl + '/api/Payment/creditcards', { headers });\r\n    }\r\n}\r\nPaymentService.ɵfac = function PaymentService_Factory(t) { return new (t || PaymentService)(i0.ɵɵinject(i1$1.HttpClient)); };\r\nPaymentService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentService, factory: PaymentService.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return [{ type: i1$1.HttpClient }]; }, null); })();\n\nclass ServicesModule {\r\n}\r\nServicesModule.ɵfac = function ServicesModule_Factory(t) { return new (t || ServicesModule)(); };\r\nServicesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ServicesModule });\r\nServicesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [AddressService, PaymentService, ConfigurationService], imports: [CommonModule,\r\n        HttpClientModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServicesModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [],\r\n                imports: [\r\n                    CommonModule,\r\n                    HttpClientModule\r\n                ],\r\n                providers: [AddressService, PaymentService, ConfigurationService]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ServicesModule, { imports: [CommonModule,\r\n        HttpClientModule] }); })();\n\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AddressService, ConfigurationService, PaymentService, ServicesModule, StoreComponent, StoreLibModule, StoreService, TodoEffects, initialState, selectAllTodos$, taskActions, taskFeatureSelector, todoReducer };\n//# sourceMappingURL=store.mjs.map\n","map":{"version":3,"file":"store.mjs","sources":["../../../projects/store/src/lib/store.service.ts","../../../projects/store/src/lib/store.component.ts","../../../projects/store/src/lib/store.module.ts","../../../projects/store/src/lib/store/todo/todo.actions.ts","../../../projects/store/src/lib/store/todo/todo.effects.ts","../../../projects/store/src/lib/store/todo/todo.state.ts","../../../projects/store/src/lib/store/todo/todo.reducer.ts","../../../projects/store/src/lib/store/todo/todo.selectors.ts","../../../projects/store/src/lib/services/configuration.service.ts","../../../projects/store/src/lib/services/http-service.base.ts","../../../projects/store/src/lib/types/http-request.model.ts","../../../projects/store/src/lib/services/address.service.ts","../../../projects/store/src/lib/services/payment.service.ts","../../../projects/store/src/lib/services/services.module.ts","../../../projects/store/src/public-api.ts","../../../projects/store/src/store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from './store/todo/todo.effects';\nimport { StoreComponent } from './store.component';\n\n@NgModule({\n  declarations: [StoreComponent],\n  imports: [\n  ],\n  exports: [StoreComponent]\n})\nexport class StoreLibModule { }\n","import { createAction, props } from '@ngrx/store';\r\nimport { Task } from './todo.state';\r\n\r\n\r\n\r\nexport const taskActions = {\r\n  addTask: createAction('[Todo] Add Task', props<{ task: Task }>()),\r\n  removeTask: createAction('[Todo] Remove Task', props<{ id: number }>()),\r\n  loadTasks: createAction('[Todo] Load Tasks'),\r\n  loadTasksSuccess: createAction('[Todo] Load Tasks success'),\r\n  loadTasksFailure: createAction('[Todo] Load Tasks failure', props<{ error: any }>()),\r\n  updateTask:createAction( '[Todo] Update Task',props<{ id: number, newText : string }>())\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { exhaustMap, map, tap } from 'rxjs/operators';\r\nimport { taskActions} from './todo.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    // alert('TodoEffects constructor called!!!');\r\n    \r\n    // נוסיף subscription לדיבאג\r\n    this.actions$.subscribe(action => {\r\n      console.log('Action received in effects:', action);\r\n    });\r\n  }\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    // console.log('Setting up loadTodos$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.loadTasks),\r\n      // tap(() => alert('loadTodos action caught')),\r\n      map(() => taskActions.loadTasksSuccess())\r\n    );\r\n  });\r\n\r\n  addTask$ = createEffect(() => {\r\n    // console.log('Setting up addTask$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.addTask),\r\n      // tap(() => alert('addTask action caught')),\r\n        map(_ => taskActions.loadTasksSuccess())\r\n      )})  \r\n     \r\nremoveTask$ = createEffect(() => {\r\n  // console.log('Setting up addTask$ effect');\r\n  return this.actions$.pipe(\r\n    // tap(action => console.log('Action in pipe:', action)),\r\n    ofType(taskActions.removeTask),\r\n    // tap(() => alert('addTask action caught')),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\nupdateTask$ = createEffect(() => {\r\n  return this.actions$.pipe(\r\n    ofType(taskActions.updateTask),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\n} ","export interface Task {\r\n  id: number;\r\n  text: string;\r\n  completed?: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  tasks: Task[];\r\n\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  tasks:[]=[],\r\n\r\n}; ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { taskActions} from './todo.actions';\r\nimport { initialState } from './todo.state';\r\n\r\nexport const todoReducer = createReducer(\r\ninitialState, \r\n  on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n  })),\r\n  on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  on(taskActions.addTask, (state, { task }) => ({\r\n    ...state,\r\n    tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\r\n\r\n   })),\r\n  on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n  })),\r\n  on(taskActions.updateTask, (state, { id,newText }) => {\r\n    const taskExists = state.tasks.some(task => task.id === id);\r\n    if (!taskExists) {\r\n      alert(\"not exists\")\r\n      return state; // No changes if the task doesn't exist\r\n    }\r\n    return {\r\n      ...state,\r\n      tasks: state.tasks.map(task =>\r\n        task.id === id\r\n          ? { ...task, text: newText } // Update the task\r\n          : task // Keep other tasks unchanged\r\n      )\r\n    };\r\n  })\r\n);\r\n","import { createFeatureSelector, createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { Task } from './todo.state';\r\n\r\nexport const taskFeatureSelector: MemoizedSelector<object, TodoState>  = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos$ : MemoizedSelector<object, Task[]> =\r\ncreateSelector(\r\n   taskFeatureSelector,\r\n     ({tasks}) => tasks );\r\n\r\n\r\n\r\n\r\n// export const selectTodoLoading = createSelector(\r\n//   selectTodoState,\r\n//   (state: TodoState) => state\r\n// ); ","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { tap, switchMap, map } from 'rxjs/operators';\r\nimport {  IpConfig } from '../types/ip-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  ips: IpConfig;\r\n  headers: HttpHeaders;\r\n  constructor(\r\n    private http: HttpClient) {\r\n  }\r\n\r\ngetTokenAndHeaders(){\r\n  this.headers = new HttpHeaders({\r\n    'Authorization': `Bearer ${this.ips.token}`\r\n  });\r\n}\r\n\r\n  initConfiguration(path): Promise<any> {\r\n    return combineLatest(\r\n      this.http.get<IpConfig>(`${path}/ipConfig.json`),\r\n    ).pipe(\r\n      tap(res=>console.log),\r\n      // map(response=>this.ips]),\r\n      tap(response => [this.ips] = response),\r\n      tap(_=>    this.getTokenAndHeaders() )\r\n    ).toPromise();\r\n  }\r\n}\r\n","import { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestModel } from '../types/http-request.model';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Injectable()\r\nexport abstract class HttpServiceBase {\r\n\r\n\r\n  index = 0;\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: ConfigurationService,\r\n  ) { }\r\n\r\n  get$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._get$(httpRequest); }\r\n\r\n    return this.http.get<T>(httpRequest.fullUrl, \r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  delete$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.delete<T>(httpRequest.fullUrl,  \r\n       { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  post$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._post$(httpRequest); }\r\n    return this.http.post<T>(httpRequest.fullUrl, httpRequest.body,\r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  put$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n    // return this.http.put<boolean>(this._serverUrl+'/select/'+ addressId, null,\r\n    //   { headers: this.configService.headers});\r\n\r\n    return this.http.put<T>(httpRequest.fullUrlWithQS, null,\r\n      { headers: httpRequest.headers }\r\n    );\r\n  }\r\n\r\n  request$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'GET',\r\n      httpRequest.fullUrl,\r\n      {\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  requestPost$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'POST',\r\n      httpRequest.fullUrl,\r\n      {\r\n\r\n        body: { ...httpRequest.body },\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  private _get$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.get(httpRequest.fullUrl, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n  private _post$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport class HttpRequestModel {\r\n  url: string;\r\n  action?: string;\r\n  params: object = {};\r\n  body: any = {};\r\n  isText: boolean;\r\n  headers: HttpHeaders;\r\n  qsData?:string;\r\n\r\n  constructor(copy?: Partial<HttpRequestModel>) {\r\n    Object.assign(this, copy);\r\n\r\n    this.params = Object.entries(this.params)\r\n      .filter(([, val]) => val !== null)\r\n      .filter(([, val]) => val !== undefined)\r\n      .reduce((state, [key, val]) => ({ ...state, [key]: val }), {});\r\n\r\n    if (Array.isArray(this.body)) { return; }\r\n\r\n    this.body = Object.entries(this.body)\r\n      .filter(([, val]) => val !== null)\r\n      .filter(([, val]) => val !== undefined)\r\n      .reduce((state, [key, val]) => ({\r\n        ...state, [key]: val\r\n      }), {});\r\n\r\n    this.body = Object.keys(this.body).length ? this.body : null;\r\n  }\r\n\r\n  get queryParams() {\r\n\r\n    const result = this._queryParams(this.params);\r\n\r\n    return /&/.test(result) ? `?${result}` : '';\r\n  }\r\n\r\n  private _queryParams(params: object, prefix: string = ''): string {\r\n    const result = Object.entries(params)\r\n      .filter(([, value]) => typeof (value) !== 'object')\r\n      .map(([key, value]) => `${prefix}${key}=${decodeURIComponent(value)}`)\r\n      .join('&');\r\n\r\n    return Object.entries(params)\r\n      .filter(([, value]) => typeof (value) === 'object')\r\n      .map(([key, value]) => this._queryParams(value, `${key}.`))\r\n      .concat(result)\r\n      .join('&');\r\n  }\r\n\r\n  get fullUrl() { \r\n    return this.action? `${this.url}${this.action}`: this.url;\r\n   }\r\n\r\n  get fullParams() {\r\n    return this.params;\r\n  }\r\n\r\n  get fullUrlWithQS() {\r\n    return `${this.url}/${this.qsData}`\r\n  }i\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ConfigurationService } from './configuration.service';\nimport { Address } from '../types/address';\nimport { HttpServiceBase } from './http-service.base';\nimport { HttpRequestModel } from '../types/http-request.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressService extends HttpServiceBase {\n\n  headers: String = '';\n\n  private get _serverUrl(): string {\n    return `${this.configService.ips.swaggerPath}/api/Address`;\n  }\n\n  constructor(public http: HttpClient,\n    public configService: ConfigurationService) {\n    super(http, configService);\n  }\n\n\n  addAddress(address: Address): Observable<boolean> {\n    return this.post$(new HttpRequestModel({\n      url: this._serverUrl,\n      body: address,\n      headers:this.configService.headers\n    }));\n  }\n\n  // addAddress(address:Address): Observable<boolean> {\n  //   return this.http.post<boolean>(this.configService.ips.swaggerPath + '/api/Address', address,{\n  //     headers: this.configService.headers,\n  //   });\n  // }\n\n\n  updateAddressToCheckout(addressId:string): Observable<boolean> {\n    return this.put$ (new HttpRequestModel({\n      url: this._serverUrl+'/select',\n      headers:this.configService.headers,\n      qsData: addressId\n    }));\n  }\n\n\n  getAddress(): Observable<Address[]> {\n    // return this.http.get<Address[]>(this._serverUrl, {\n    //   headers: this.configService.headers\n    // });\n    return this.get$ (new HttpRequestModel({\n      url: this._serverUrl,\n      headers:this.configService.headers\n    }));\n  }\n\n\n\n  \n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n \n  constructor(private http:HttpClient) { }\n  \n  apiUrl='https://du-mock-checkout-7d42d0a76fbf.herokuapp.com';\n  //https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/#addresses\n  getPaymentOptions(token: string): Observable<any> {\n\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n    return this.http.get<any>(this.apiUrl+'/api/Payment/Options', { headers });\n  }        \n  \n  \n  \n  getPaymentCreditCardOptions(token: string): Observable<any> {\n\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n    return this.http.get<any>(this.apiUrl+'/api/Payment/creditcards', { headers });\n  }   \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AddressService } from './address.service';\nimport { PaymentService } from './payment.service';\nimport { ConfigurationService } from './configuration.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers:[AddressService , PaymentService , ConfigurationService]\n})\nexport class ServicesModule { }\n","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * from './lib/store/todo/todo.actions';\nexport * from './lib/store/todo/todo.effects';\nexport * from './lib/store/todo/todo.reducer';\nexport * from './lib/store/todo/todo.selectors';\nexport * from './lib/store/todo/todo.state';\n\n//****************services*****************/\nexport * from './lib/services/address.service';\nexport * from './lib/services/services.module';\nexport * from './lib/services/payment.service';\nexport * from './lib/services/configuration.service';\n\n\n//************types*********************/\nexport * from './lib/types/address';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2.ConfigurationService"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { map, tap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/common/http';\nimport { HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { combineLatest } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nclass StoreService {\r\n    constructor() { }\r\n}\r\nStoreService.ɵfac = function StoreService_Factory(t) { return new (t || StoreService)(); };\r\nStoreService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: StoreService, factory: StoreService.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreService, [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], function () { return []; }, null);\r\n})();\n\nclass StoreComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nStoreComponent.ɵfac = function StoreComponent_Factory(t) { return new (t || StoreComponent)(); };\r\nStoreComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: StoreComponent, selectors: [[\"lib-store\"]], decls: 2, vars: 0, template: function StoreComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵelementStart(0, \"p\");\r\n            i0.ɵɵtext(1, \" store works! \");\r\n            i0.ɵɵelementEnd();\r\n        }\r\n    }, encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'lib-store', template: `\n    <p>\n      store works!\n    </p>\n  ` }]\r\n        }], function () { return []; }, null);\r\n})();\n\nclass StoreLibModule {\r\n}\r\nStoreLibModule.ɵfac = function StoreLibModule_Factory(t) { return new (t || StoreLibModule)(); };\r\nStoreLibModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: StoreLibModule });\r\nStoreLibModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({});\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreLibModule, [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [StoreComponent],\r\n                    imports: [],\r\n                    exports: [StoreComponent]\r\n                }]\r\n        }], null, null);\r\n})();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(StoreLibModule, { declarations: [StoreComponent], exports: [StoreComponent] }); })();\n\nconst taskActions = {\r\n    addTask: createAction('[Todo] Add Task', props()),\r\n    removeTask: createAction('[Todo] Remove Task', props()),\r\n    loadTasks: createAction('[Todo] Load Tasks'),\r\n    loadTasksSuccess: createAction('[Todo] Load Tasks success'),\r\n    loadTasksFailure: createAction('[Todo] Load Tasks failure', props()),\r\n    updateTask: createAction('[Todo] Update Task', props())\r\n};\n\nclass TodoEffects {\r\n    constructor(actions$) {\r\n        // alert('TodoEffects constructor called!!!');\r\n        this.actions$ = actions$;\r\n        this.loadTodos$ = createEffect(() => {\r\n            // console.log('Setting up loadTodos$ effect');\r\n            return this.actions$.pipe(\r\n            // tap(action => console.log('Action in pipe:', action)),\r\n            ofType(taskActions.loadTasks), \r\n            // tap(() => alert('loadTodos action caught')),\r\n            map(() => taskActions.loadTasksSuccess()));\r\n        });\r\n        this.addTask$ = createEffect(() => {\r\n            // console.log('Setting up addTask$ effect');\r\n            return this.actions$.pipe(\r\n            // tap(action => console.log('Action in pipe:', action)),\r\n            ofType(taskActions.addTask), \r\n            // tap(() => alert('addTask action caught')),\r\n            map(_ => taskActions.loadTasksSuccess()));\r\n        });\r\n        this.removeTask$ = createEffect(() => {\r\n            // console.log('Setting up addTask$ effect');\r\n            return this.actions$.pipe(\r\n            // tap(action => console.log('Action in pipe:', action)),\r\n            ofType(taskActions.removeTask), \r\n            // tap(() => alert('addTask action caught')),\r\n            map(_ => taskActions.loadTasksSuccess()));\r\n        });\r\n        this.updateTask$ = createEffect(() => {\r\n            return this.actions$.pipe(ofType(taskActions.updateTask), map(_ => taskActions.loadTasksSuccess()));\r\n        });\r\n        // נוסיף subscription לדיבאג\r\n        this.actions$.subscribe(action => {\r\n            console.log('Action received in effects:', action);\r\n        });\r\n    }\r\n}\r\nTodoEffects.ɵfac = function TodoEffects_Factory(t) { return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions)); };\r\nTodoEffects.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TodoEffects, factory: TodoEffects.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TodoEffects, [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], function () { return [{ type: i1.Actions }]; }, null);\r\n})();\n\nconst initialState = {\r\n    tasks: [] = [],\r\n};\n\nconst todoReducer = createReducer(initialState, on(taskActions.loadTasks, state => (Object.assign(Object.assign({}, state), { loading: true }))), on(taskActions.loadTasksSuccess, (state) => (Object.assign(Object.assign({}, state), { loading: false }))), on(taskActions.loadTasksFailure, (state, { error }) => (Object.assign(Object.assign({}, state), { loading: false, error }))), on(taskActions.addTask, (state, { task }) => (Object.assign(Object.assign({}, state), { tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\r\n }))), on(taskActions.removeTask, (state, { id }) => (Object.assign(Object.assign({}, state), { tasks: state.tasks.filter(task => task.id !== id) }))), on(taskActions.updateTask, (state, { id, newText }) => {\r\n    const taskExists = state.tasks.some(task => task.id === id);\r\n    if (!taskExists) {\r\n        alert(\"not exists\");\r\n        return state; // No changes if the task doesn't exist\r\n    }\r\n    return Object.assign(Object.assign({}, state), { tasks: state.tasks.map(task => task.id === id\r\n            ? Object.assign(Object.assign({}, task), { text: newText }) : task // Keep other tasks unchanged\r\n        ) });\r\n}));\n\nconst taskFeatureSelector = createFeatureSelector('todos');\r\nconst selectAllTodos$ = createSelector(taskFeatureSelector, ({ tasks }) => tasks);\r\n// export const selectTodoLoading = createSelector(\r\n//   selectTodoState,\r\n//   (state: TodoState) => state\r\n// );\n\nclass ConfigurationService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    getTokenAndHeaders() {\r\n        this.headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${this.ips.token}`\r\n        });\r\n    }\r\n    initConfiguration(path) {\r\n        return combineLatest(this.http.get(`${path}/ipConfig.json`)).pipe(tap(res => console.log), \r\n        // map(response=>this.ips]),\r\n        tap(response => [this.ips] = response), tap(_ => this.getTokenAndHeaders())).toPromise();\r\n    }\r\n}\r\nConfigurationService.ɵfac = function ConfigurationService_Factory(t) { return new (t || ConfigurationService)(i0.ɵɵinject(i1$1.HttpClient)); };\r\nConfigurationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ConfigurationService, factory: ConfigurationService.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConfigurationService, [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], function () { return [{ type: i1$1.HttpClient }]; }, null);\r\n})();\n\nclass HttpServiceBase {\r\n    constructor(http, config) {\r\n        this.http = http;\r\n        this.config = config;\r\n        this.index = 0;\r\n    }\r\n    get$(httpRequest) {\r\n        if (httpRequest.isText) {\r\n            return this._get$(httpRequest);\r\n        }\r\n        return this.http.get(httpRequest.fullUrl, { headers: httpRequest.headers, params: Object.assign({}, httpRequest.fullParams) });\r\n    }\r\n    delete$(httpRequest) {\r\n        return this.http.delete(httpRequest.fullUrl, { headers: httpRequest.headers, params: Object.assign({}, httpRequest.fullParams) });\r\n    }\r\n    post$(httpRequest) {\r\n        if (httpRequest.isText) {\r\n            return this._post$(httpRequest);\r\n        }\r\n        return this.http.post(httpRequest.fullUrl, httpRequest.body, { headers: httpRequest.headers, params: Object.assign({}, httpRequest.fullParams) });\r\n    }\r\n    put$(httpRequest) {\r\n        // return this.http.put<boolean>(this._serverUrl+'/select/'+ addressId, null,\r\n        //   { headers: this.configService.headers});\r\n        return this.http.put(httpRequest.fullUrlWithQS, null, { headers: httpRequest.headers });\r\n    }\r\n    request$(httpRequest) {\r\n        return this.http.request('GET', httpRequest.fullUrl, {\r\n            params: Object.assign({}, httpRequest.fullParams),\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n    requestPost$(httpRequest) {\r\n        return this.http.request('POST', httpRequest.fullUrl, {\r\n            body: Object.assign({}, httpRequest.body),\r\n            params: Object.assign({}, httpRequest.fullParams),\r\n            observe: 'response',\r\n            responseType: 'blob',\r\n        });\r\n    }\r\n    _get$(httpRequest) {\r\n        return this.http.get(httpRequest.fullUrl, { params: Object.assign({}, httpRequest.fullParams), responseType: 'text' });\r\n    }\r\n    _post$(httpRequest) {\r\n        return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: Object.assign({}, httpRequest.fullParams), responseType: 'text' });\r\n    }\r\n}\r\nHttpServiceBase.ɵfac = function HttpServiceBase_Factory(t) { return new (t || HttpServiceBase)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(ConfigurationService)); };\r\nHttpServiceBase.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HttpServiceBase, factory: HttpServiceBase.ɵfac });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpServiceBase, [{\r\n            type: Injectable\r\n        }], function () { return [{ type: i1$1.HttpClient }, { type: ConfigurationService }]; }, null);\r\n})();\n\nclass HttpRequestModel {\r\n    constructor(copy) {\r\n        this.params = {};\r\n        this.body = {};\r\n        Object.assign(this, copy);\r\n        this.params = Object.entries(this.params)\r\n            .filter(([, val]) => val !== null)\r\n            .filter(([, val]) => val !== undefined)\r\n            .reduce((state, [key, val]) => (Object.assign(Object.assign({}, state), { [key]: val })), {});\r\n        if (Array.isArray(this.body)) {\r\n            return;\r\n        }\r\n        this.body = Object.entries(this.body)\r\n            .filter(([, val]) => val !== null)\r\n            .filter(([, val]) => val !== undefined)\r\n            .reduce((state, [key, val]) => (Object.assign(Object.assign({}, state), { [key]: val })), {});\r\n        this.body = Object.keys(this.body).length ? this.body : null;\r\n    }\r\n    get queryParams() {\r\n        const result = this._queryParams(this.params);\r\n        return /&/.test(result) ? `?${result}` : '';\r\n    }\r\n    _queryParams(params, prefix = '') {\r\n        const result = Object.entries(params)\r\n            .filter(([, value]) => typeof (value) !== 'object')\r\n            .map(([key, value]) => `${prefix}${key}=${decodeURIComponent(value)}`)\r\n            .join('&');\r\n        return Object.entries(params)\r\n            .filter(([, value]) => typeof (value) === 'object')\r\n            .map(([key, value]) => this._queryParams(value, `${key}.`))\r\n            .concat(result)\r\n            .join('&');\r\n    }\r\n    get fullUrl() {\r\n        return this.action ? `${this.url}${this.action}` : this.url;\r\n    }\r\n    get fullParams() {\r\n        return this.params;\r\n    }\r\n    get fullUrlWithQS() {\r\n        return `${this.url}/${this.qsData}`;\r\n    }\r\n}\n\nclass AddressService extends HttpServiceBase {\r\n    constructor(http, configService) {\r\n        super(http, configService);\r\n        this.http = http;\r\n        this.configService = configService;\r\n        this.headers = '';\r\n    }\r\n    get _serverUrl() {\r\n        return `${this.configService.ips.swaggerPath}/api/Address`;\r\n    }\r\n    addAddress(address) {\r\n        return this.post$(new HttpRequestModel({\r\n            url: this._serverUrl,\r\n            body: address,\r\n            headers: this.configService.headers\r\n        }));\r\n    }\r\n    // addAddress(address:Address): Observable<boolean> {\r\n    //   return this.http.post<boolean>(this.configService.ips.swaggerPath + '/api/Address', address,{\r\n    //     headers: this.configService.headers,\r\n    //   });\r\n    // }\r\n    updateAddressToCheckout(addressId) {\r\n        return this.put$(new HttpRequestModel({\r\n            url: this._serverUrl + '/select',\r\n            headers: this.configService.headers,\r\n            qsData: addressId\r\n        }));\r\n    }\r\n    getAddress() {\r\n        // return this.http.get<Address[]>(this._serverUrl, {\r\n        //   headers: this.configService.headers\r\n        // });\r\n        return this.get$(new HttpRequestModel({\r\n            url: this._serverUrl,\r\n            headers: this.configService.headers\r\n        }));\r\n    }\r\n}\r\nAddressService.ɵfac = function AddressService_Factory(t) { return new (t || AddressService)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(ConfigurationService)); };\r\nAddressService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AddressService, factory: AddressService.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AddressService, [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], function () { return [{ type: i1$1.HttpClient }, { type: ConfigurationService }]; }, null);\r\n})();\n\nclass PaymentService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.apiUrl = 'https://du-mock-checkout-7d42d0a76fbf.herokuapp.com';\r\n    }\r\n    //https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/#addresses\r\n    getPaymentOptions(token) {\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n        // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\r\n        return this.http.get(this.apiUrl + '/api/Payment/Options', { headers });\r\n    }\r\n    getPaymentCreditCardOptions(token) {\r\n        const headers = new HttpHeaders({\r\n            'Authorization': `Bearer ${token}`\r\n        });\r\n        // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\r\n        return this.http.get(this.apiUrl + '/api/Payment/creditcards', { headers });\r\n    }\r\n}\r\nPaymentService.ɵfac = function PaymentService_Factory(t) { return new (t || PaymentService)(i0.ɵɵinject(i1$1.HttpClient)); };\r\nPaymentService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentService, factory: PaymentService.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaymentService, [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], function () { return [{ type: i1$1.HttpClient }]; }, null);\r\n})();\n\nclass ServicesModule {\r\n}\r\nServicesModule.ɵfac = function ServicesModule_Factory(t) { return new (t || ServicesModule)(); };\r\nServicesModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ServicesModule });\r\nServicesModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ providers: [AddressService, PaymentService, ConfigurationService], imports: [CommonModule,\r\n        HttpClientModule] });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServicesModule, [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [],\r\n                    imports: [\r\n                        CommonModule,\r\n                        HttpClientModule\r\n                    ],\r\n                    providers: [AddressService, PaymentService, ConfigurationService]\r\n                }]\r\n        }], null, null);\r\n})();\r\n(function () {\r\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ServicesModule, { imports: [CommonModule,\r\n            HttpClientModule] });\r\n})();\n\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AddressService, ConfigurationService, PaymentService, ServicesModule, StoreComponent, StoreLibModule, StoreService, TodoEffects, initialState, selectAllTodos$, taskActions, taskFeatureSelector, todoReducer };\n//# sourceMappingURL=store.mjs.map\n","map":{"version":3,"file":"store.mjs","sources":["../../../projects/store/src/lib/store.service.ts","../../../projects/store/src/lib/store.component.ts","../../../projects/store/src/lib/store.module.ts","../../../projects/store/src/lib/store/todo/todo.actions.ts","../../../projects/store/src/lib/store/todo/todo.effects.ts","../../../projects/store/src/lib/store/todo/todo.state.ts","../../../projects/store/src/lib/store/todo/todo.reducer.ts","../../../projects/store/src/lib/store/todo/todo.selectors.ts","../../../projects/store/src/lib/services/configuration.service.ts","../../../projects/store/src/lib/services/http-service.base.ts","../../../projects/store/src/lib/types/http-request.model.ts","../../../projects/store/src/lib/services/address.service.ts","../../../projects/store/src/lib/services/payment.service.ts","../../../projects/store/src/lib/services/services.module.ts","../../../projects/store/src/public-api.ts","../../../projects/store/src/store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from './store/todo/todo.effects';\nimport { StoreComponent } from './store.component';\n\n@NgModule({\n  declarations: [StoreComponent],\n  imports: [\n  ],\n  exports: [StoreComponent]\n})\nexport class StoreLibModule { }\n","import { createAction, props } from '@ngrx/store';\r\nimport { Task } from './todo.state';\r\n\r\n\r\n\r\nexport const taskActions = {\r\n  addTask: createAction('[Todo] Add Task', props<{ task: Task }>()),\r\n  removeTask: createAction('[Todo] Remove Task', props<{ id: number }>()),\r\n  loadTasks: createAction('[Todo] Load Tasks'),\r\n  loadTasksSuccess: createAction('[Todo] Load Tasks success'),\r\n  loadTasksFailure: createAction('[Todo] Load Tasks failure', props<{ error: any }>()),\r\n  updateTask:createAction( '[Todo] Update Task',props<{ id: number, newText : string }>())\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { exhaustMap, map, tap } from 'rxjs/operators';\r\nimport { taskActions} from './todo.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    // alert('TodoEffects constructor called!!!');\r\n    \r\n    // נוסיף subscription לדיבאג\r\n    this.actions$.subscribe(action => {\r\n      console.log('Action received in effects:', action);\r\n    });\r\n  }\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    // console.log('Setting up loadTodos$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.loadTasks),\r\n      // tap(() => alert('loadTodos action caught')),\r\n      map(() => taskActions.loadTasksSuccess())\r\n    );\r\n  });\r\n\r\n  addTask$ = createEffect(() => {\r\n    // console.log('Setting up addTask$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.addTask),\r\n      // tap(() => alert('addTask action caught')),\r\n        map(_ => taskActions.loadTasksSuccess())\r\n      )})  \r\n     \r\nremoveTask$ = createEffect(() => {\r\n  // console.log('Setting up addTask$ effect');\r\n  return this.actions$.pipe(\r\n    // tap(action => console.log('Action in pipe:', action)),\r\n    ofType(taskActions.removeTask),\r\n    // tap(() => alert('addTask action caught')),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\nupdateTask$ = createEffect(() => {\r\n  return this.actions$.pipe(\r\n    ofType(taskActions.updateTask),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\n} ","export interface Task {\r\n  id: number;\r\n  text: string;\r\n  completed?: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  tasks: Task[];\r\n\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  tasks:[]=[],\r\n\r\n}; ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { taskActions} from './todo.actions';\r\nimport { initialState } from './todo.state';\r\n\r\nexport const todoReducer = createReducer(\r\ninitialState, \r\n  on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n  })),\r\n  on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  on(taskActions.addTask, (state, { task }) => ({\r\n    ...state,\r\n    tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\r\n\r\n   })),\r\n  on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n  })),\r\n  on(taskActions.updateTask, (state, { id,newText }) => {\r\n    const taskExists = state.tasks.some(task => task.id === id);\r\n    if (!taskExists) {\r\n      alert(\"not exists\")\r\n      return state; // No changes if the task doesn't exist\r\n    }\r\n    return {\r\n      ...state,\r\n      tasks: state.tasks.map(task =>\r\n        task.id === id\r\n          ? { ...task, text: newText } // Update the task\r\n          : task // Keep other tasks unchanged\r\n      )\r\n    };\r\n  })\r\n);\r\n","import { createFeatureSelector, createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { Task } from './todo.state';\r\n\r\nexport const taskFeatureSelector: MemoizedSelector<object, TodoState>  = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos$ : MemoizedSelector<object, Task[]> =\r\ncreateSelector(\r\n   taskFeatureSelector,\r\n     ({tasks}) => tasks );\r\n\r\n\r\n\r\n\r\n// export const selectTodoLoading = createSelector(\r\n//   selectTodoState,\r\n//   (state: TodoState) => state\r\n// ); ","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { tap, switchMap, map } from 'rxjs/operators';\r\nimport {  IpConfig } from '../types/ip-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  ips: IpConfig;\r\n  headers: HttpHeaders;\r\n  constructor(\r\n    private http: HttpClient) {\r\n  }\r\n\r\ngetTokenAndHeaders(){\r\n  this.headers = new HttpHeaders({\r\n    'Authorization': `Bearer ${this.ips.token}`\r\n  });\r\n}\r\n\r\n  initConfiguration(path): Promise<any> {\r\n    return combineLatest(\r\n      this.http.get<IpConfig>(`${path}/ipConfig.json`),\r\n    ).pipe(\r\n      tap(res=>console.log),\r\n      // map(response=>this.ips]),\r\n      tap(response => [this.ips] = response),\r\n      tap(_=>    this.getTokenAndHeaders() )\r\n    ).toPromise();\r\n  }\r\n}\r\n","import { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestModel } from '../types/http-request.model';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Injectable()\r\nexport abstract class HttpServiceBase {\r\n\r\n\r\n  index = 0;\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: ConfigurationService,\r\n  ) { }\r\n\r\n  get$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._get$(httpRequest); }\r\n\r\n    return this.http.get<T>(httpRequest.fullUrl, \r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  delete$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.delete<T>(httpRequest.fullUrl,  \r\n       { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  post$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._post$(httpRequest); }\r\n    return this.http.post<T>(httpRequest.fullUrl, httpRequest.body,\r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  put$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n    // return this.http.put<boolean>(this._serverUrl+'/select/'+ addressId, null,\r\n    //   { headers: this.configService.headers});\r\n\r\n    return this.http.put<T>(httpRequest.fullUrlWithQS, null,\r\n      { headers: httpRequest.headers }\r\n    );\r\n  }\r\n\r\n  request$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'GET',\r\n      httpRequest.fullUrl,\r\n      {\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  requestPost$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'POST',\r\n      httpRequest.fullUrl,\r\n      {\r\n\r\n        body: { ...httpRequest.body },\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  private _get$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.get(httpRequest.fullUrl, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n  private _post$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport class HttpRequestModel {\r\n  url: string;\r\n  action?: string;\r\n  params: object = {};\r\n  body: any = {};\r\n  isText: boolean;\r\n  headers: HttpHeaders;\r\n  qsData?:string;\r\n\r\n  constructor(copy?: Partial<HttpRequestModel>) {\r\n    Object.assign(this, copy);\r\n\r\n    this.params = Object.entries(this.params)\r\n      .filter(([, val]) => val !== null)\r\n      .filter(([, val]) => val !== undefined)\r\n      .reduce((state, [key, val]) => ({ ...state, [key]: val }), {});\r\n\r\n    if (Array.isArray(this.body)) { return; }\r\n\r\n    this.body = Object.entries(this.body)\r\n      .filter(([, val]) => val !== null)\r\n      .filter(([, val]) => val !== undefined)\r\n      .reduce((state, [key, val]) => ({\r\n        ...state, [key]: val\r\n      }), {});\r\n\r\n    this.body = Object.keys(this.body).length ? this.body : null;\r\n  }\r\n\r\n  get queryParams() {\r\n\r\n    const result = this._queryParams(this.params);\r\n\r\n    return /&/.test(result) ? `?${result}` : '';\r\n  }\r\n\r\n  private _queryParams(params: object, prefix: string = ''): string {\r\n    const result = Object.entries(params)\r\n      .filter(([, value]) => typeof (value) !== 'object')\r\n      .map(([key, value]) => `${prefix}${key}=${decodeURIComponent(value)}`)\r\n      .join('&');\r\n\r\n    return Object.entries(params)\r\n      .filter(([, value]) => typeof (value) === 'object')\r\n      .map(([key, value]) => this._queryParams(value, `${key}.`))\r\n      .concat(result)\r\n      .join('&');\r\n  }\r\n\r\n  get fullUrl() { \r\n    return this.action? `${this.url}${this.action}`: this.url;\r\n   }\r\n\r\n  get fullParams() {\r\n    return this.params;\r\n  }\r\n\r\n  get fullUrlWithQS() {\r\n    return `${this.url}/${this.qsData}`\r\n  }i\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ConfigurationService } from './configuration.service';\nimport { Address } from '../types/address';\nimport { HttpServiceBase } from './http-service.base';\nimport { HttpRequestModel } from '../types/http-request.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressService extends HttpServiceBase {\n\n  headers: String = '';\n\n  private get _serverUrl(): string {\n    return `${this.configService.ips.swaggerPath}/api/Address`;\n  }\n\n  constructor(public http: HttpClient,\n    public configService: ConfigurationService) {\n    super(http, configService);\n  }\n\n\n  addAddress(address: Address): Observable<boolean> {\n    return this.post$(new HttpRequestModel({\n      url: this._serverUrl,\n      body: address,\n      headers:this.configService.headers\n    }));\n  }\n\n  // addAddress(address:Address): Observable<boolean> {\n  //   return this.http.post<boolean>(this.configService.ips.swaggerPath + '/api/Address', address,{\n  //     headers: this.configService.headers,\n  //   });\n  // }\n\n\n  updateAddressToCheckout(addressId:string): Observable<boolean> {\n    return this.put$ (new HttpRequestModel({\n      url: this._serverUrl+'/select',\n      headers:this.configService.headers,\n      qsData: addressId\n    }));\n  }\n\n\n  getAddress(): Observable<Address[]> {\n    // return this.http.get<Address[]>(this._serverUrl, {\n    //   headers: this.configService.headers\n    // });\n    return this.get$ (new HttpRequestModel({\n      url: this._serverUrl,\n      headers:this.configService.headers\n    }));\n  }\n\n\n\n  \n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n \n  constructor(private http:HttpClient) { }\n  \n  apiUrl='https://du-mock-checkout-7d42d0a76fbf.herokuapp.com';\n  //https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/#addresses\n  getPaymentOptions(token: string): Observable<any> {\n\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n    return this.http.get<any>(this.apiUrl+'/api/Payment/Options', { headers });\n  }        \n  \n  \n  \n  getPaymentCreditCardOptions(token: string): Observable<any> {\n\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n    return this.http.get<any>(this.apiUrl+'/api/Payment/creditcards', { headers });\n  }   \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AddressService } from './address.service';\nimport { PaymentService } from './payment.service';\nimport { ConfigurationService } from './configuration.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers:[AddressService , PaymentService , ConfigurationService]\n})\nexport class ServicesModule { }\n","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * from './lib/store/todo/todo.actions';\nexport * from './lib/store/todo/todo.effects';\nexport * from './lib/store/todo/todo.reducer';\nexport * from './lib/store/todo/todo.selectors';\nexport * from './lib/store/todo/todo.state';\n\n//****************services*****************/\nexport * from './lib/services/address.service';\nexport * from './lib/services/services.module';\nexport * from './lib/services/payment.service';\nexport * from './lib/services/configuration.service';\n\n\n//************types*********************/\nexport * from './lib/types/address';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2.ConfigurationService"],"mappings":"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"}}}