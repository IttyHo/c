{"ast":null,"code":"import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the virtual scrolling strategy. */\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\n\nclass FixedSizeVirtualScrollStrategy {\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize, minBufferPx, maxBufferPx) {\n    this._scrolledIndexChange = new Subject();\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /** The attached viewport. */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n\n\n  attach(viewport) {\n    this._viewport = viewport;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /** Detaches this scroll strategy from the currently attached viewport. */\n\n\n  detach() {\n    this._scrolledIndexChange.complete();\n\n    this._viewport = null;\n  }\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n\n\n  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n\n    this._updateRenderedRange();\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onContentRendered() {\n    /* no-op */\n  }\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n\n\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n\n\n  scrollToIndex(index, behavior) {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n  /** Update the viewport's total content size. */\n\n\n  _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n  /** Update the viewport's rendered range. */\n\n\n  _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n\n    const newRange = {\n      start: renderedRange.start,\n      end: renderedRange.end\n    };\n\n    const viewportSize = this._viewport.getViewportSize();\n\n    const dataLength = this._viewport.getDataLength();\n\n    let scrollOffset = this._viewport.measureScrollOffset(); // Prevent NaN as result when dividing by zero.\n\n\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0; // If user scrolls to the bottom of the list and data changes to a smaller list\n\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems)); // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\n\n\nlet CdkFixedSizeVirtualScroll = /*#__PURE__*/(() => {\n  class CdkFixedSizeVirtualScroll {\n    constructor() {\n      this._itemSize = 20;\n      this._minBufferPx = 100;\n      this._maxBufferPx = 200;\n      /** The scroll strategy used by this directive. */\n\n      this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n\n\n    get itemSize() {\n      return this._itemSize;\n    }\n\n    set itemSize(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n\n\n    get minBufferPx() {\n      return this._minBufferPx;\n    }\n\n    set minBufferPx(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n\n\n    get maxBufferPx() {\n      return this._maxBufferPx;\n    }\n\n    set maxBufferPx(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n\n    ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n\n  }\n\n  CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n    return new (t || CdkFixedSizeVirtualScroll)();\n  };\n\n  CdkFixedSizeVirtualScroll.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkFixedSizeVirtualScroll,\n    selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n    inputs: {\n      itemSize: \"itemSize\",\n      minBufferPx: \"minBufferPx\",\n      maxBufferPx: \"maxBufferPx\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n  return CdkFixedSizeVirtualScroll;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle the scrolling events by default. */\n\n\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nlet ScrollDispatcher = /*#__PURE__*/(() => {\n  class ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n\n      this._scrolled = new Subject();\n      /** Keeps track of the global `scroll` and `resize` subscriptions. */\n\n      this._globalSubscription = null;\n      /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n\n      this._scrolledCount = 0;\n      /**\n       * Map of all the scrollable references that are registered with the service and their\n       * scroll event subscriptions.\n       */\n\n      this.scrollContainers = new Map();\n      this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n\n\n    register(scrollable) {\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n      }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n\n\n    deregister(scrollable) {\n      const scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n\n\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n\n      return new Observable(observer => {\n        if (!this._globalSubscription) {\n          this._addGlobalListener();\n        } // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n\n\n        const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);\n        this._scrolledCount++;\n        return () => {\n          subscription.unsubscribe();\n          this._scrolledCount--;\n\n          if (!this._scrolledCount) {\n            this._removeGlobalListener();\n          }\n        };\n      });\n    }\n\n    ngOnDestroy() {\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach((_, container) => this.deregister(container));\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n\n\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n      const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(target => {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n\n\n    getAncestorScrollContainers(elementOrElementRef) {\n      const scrollingContainers = [];\n      this.scrollContainers.forEach((_subscription, scrollable) => {\n        if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n\n\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n      let element = coerceElement(elementOrElementRef);\n      let scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element = element.parentElement);\n\n      return false;\n    }\n    /** Sets up the global scroll listeners. */\n\n\n    _addGlobalListener() {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n      });\n    }\n    /** Cleans up the global scroll listener. */\n\n\n    _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n\n  }\n\n  ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n    return new (t || ScrollDispatcher)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(DOCUMENT, 8));\n  };\n\n  ScrollDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScrollDispatcher,\n    factory: ScrollDispatcher.ɵfac,\n    providedIn: 'root'\n  });\n  return ScrollDispatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nlet CdkScrollable = /*#__PURE__*/(() => {\n  class CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      this.elementRef = elementRef;\n      this.scrollDispatcher = scrollDispatcher;\n      this.ngZone = ngZone;\n      this.dir = dir;\n      this._destroyed = new Subject();\n      this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n\n    ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n\n    ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n\n\n    elementScrolled() {\n      return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n\n\n    getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n\n\n    scrollTo(options) {\n      const el = this.elementRef.nativeElement;\n      const isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      } // Rewrite the bottom offset as a top offset.\n\n\n      if (options.bottom != null) {\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != 0\n      /* RtlScrollAxisType.NORMAL */\n      ) {\n        if (options.left != null) {\n          options.right = el.scrollWidth - el.clientWidth - options.left;\n        }\n\n        if (getRtlScrollAxisType() == 2\n        /* RtlScrollAxisType.INVERTED */\n        ) {\n          options.left = options.right;\n        } else if (getRtlScrollAxisType() == 1\n        /* RtlScrollAxisType.NEGATED */\n        ) {\n          options.left = options.right ? -options.right : options.right;\n        }\n      } else {\n        if (options.right != null) {\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n\n    _applyScrollToOptions(options) {\n      const el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n\n\n    measureScrollOffset(from) {\n      const LEFT = 'left';\n      const RIGHT = 'right';\n      const el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      } // Rewrite start & end as left or right offsets.\n\n\n      const isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == 2\n      /* RtlScrollAxisType.INVERTED */\n      ) {\n        // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        } else {\n          return el.scrollLeft;\n        }\n      } else if (isRtl && getRtlScrollAxisType() == 1\n      /* RtlScrollAxisType.NEGATED */\n      ) {\n        // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n        // 0 when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft + el.scrollWidth - el.clientWidth;\n        } else {\n          return -el.scrollLeft;\n        }\n      } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n\n  }\n\n  CdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n    return new (t || CdkScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n\n  CdkScrollable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkScrollable,\n    selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n  });\n  return CdkScrollable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst VIRTUAL_SCROLLABLE = /*#__PURE__*/new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\n\nlet CdkVirtualScrollable = /*#__PURE__*/(() => {\n  class CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n\n\n    measureViewportSize(orientation) {\n      const viewportEl = this.elementRef.nativeElement;\n      return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n\n  }\n\n  CdkVirtualScrollable.ɵfac = function CdkVirtualScrollable_Factory(t) {\n    return new (t || CdkVirtualScrollable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n\n  CdkVirtualScrollable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkVirtualScrollable,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkVirtualScrollable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Time in ms to throttle the resize events by default. */\n\n\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n\nlet ViewportRuler = /*#__PURE__*/(() => {\n  class ViewportRuler {\n    constructor(_platform, ngZone, document) {\n      this._platform = _platform;\n      /** Stream of viewport change events. */\n\n      this._change = new Subject();\n      /** Event listener that will be used to handle the viewport change events. */\n\n      this._changeListener = event => {\n        this._change.next(event);\n      };\n\n      this._document = document;\n      ngZone.runOutsideAngular(() => {\n        if (_platform.isBrowser) {\n          const window = this._getWindow(); // Note that bind the events ourselves, rather than going through something like RxJS's\n          // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n\n\n          window.addEventListener('resize', this._changeListener);\n          window.addEventListener('orientationchange', this._changeListener);\n        } // Clear the cached position so that the viewport is re-measured next time it is required.\n        // We don't need to keep track of the subscription, because it is completed on destroy.\n\n\n        this.change().subscribe(() => this._viewportSize = null);\n      });\n    }\n\n    ngOnDestroy() {\n      if (this._platform.isBrowser) {\n        const window = this._getWindow();\n\n        window.removeEventListener('resize', this._changeListener);\n        window.removeEventListener('orientationchange', this._changeListener);\n      }\n\n      this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n\n\n    getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n\n      const output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize = null;\n      }\n\n      return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n\n\n    getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n      const scrollPosition = this.getViewportScrollPosition();\n      const {\n        width,\n        height\n      } = this.getViewportSize();\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height,\n        width\n      };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n\n\n    getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n\n\n      const document = this._document;\n\n      const window = this._getWindow();\n\n      const documentElement = document.documentElement;\n      const documentRect = documentElement.getBoundingClientRect();\n      const top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      const left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top,\n        left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n\n\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n\n\n    _updateViewportSize() {\n      const window = this._getWindow();\n\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n\n  }\n\n  ViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n    return new (t || ViewportRuler)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT, 8));\n  };\n\n  ViewportRuler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ViewportRuler,\n    factory: ViewportRuler.ɵfac,\n    providedIn: 'root'\n  });\n  return ViewportRuler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks if the given ranges are equal. */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\n\n\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n\nlet CdkVirtualScrollViewport = /*#__PURE__*/(() => {\n  class CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n      this.elementRef = elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollStrategy = _scrollStrategy;\n      this.scrollable = scrollable;\n      this._platform = inject(Platform);\n      /** Emits when the viewport is detached from a CdkVirtualForOf. */\n\n      this._detachedSubject = new Subject();\n      /** Emits when the rendered range changes. */\n\n      this._renderedRangeSubject = new Subject();\n      this._orientation = 'vertical';\n      this._appendOnly = false; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n      // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n      // depending on how the strategy calculates the scrolled index, it may come at a cost to\n      // performance.\n\n      /** Emits when the index of the first element visible in the viewport changes. */\n\n      this.scrolledIndexChange = new Observable(observer => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n      /** A stream that emits whenever the rendered range changes. */\n\n      this.renderedRangeStream = this._renderedRangeSubject;\n      /**\n       * The total size of all content (in pixels), including content that is not currently rendered.\n       */\n\n      this._totalContentSize = 0;\n      /** A string representing the `style.width` property value to be used for the spacer element. */\n\n      this._totalContentWidth = '';\n      /** A string representing the `style.height` property value to be used for the spacer element. */\n\n      this._totalContentHeight = '';\n      /** The currently rendered range of indices. */\n\n      this._renderedRange = {\n        start: 0,\n        end: 0\n      };\n      /** The length of the data bound to this viewport (in number of items). */\n\n      this._dataLength = 0;\n      /** The size of the viewport (in pixels). */\n\n      this._viewportSize = 0;\n      /** The last rendered content offset that was set. */\n\n      this._renderedContentOffset = 0;\n      /**\n       * Whether the last rendered content offset was to the end of the content (and therefore needs to\n       * be rewritten as an offset to the start of the content).\n       */\n\n      this._renderedContentOffsetNeedsRewrite = false;\n      /** Whether there is a pending change detection cycle. */\n\n      this._isChangeDetectionPending = false;\n      /** A list of functions to run after the next change detection cycle. */\n\n      this._runAfterChangeDetection = [];\n      /** Subscription to changes in the viewport size. */\n\n      this._viewportChanges = Subscription.EMPTY;\n\n      if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n      }\n\n      this._viewportChanges = viewportRuler.change().subscribe(() => {\n        this.checkViewportSize();\n      });\n\n      if (!this.scrollable) {\n        // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n        this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n        this.scrollable = this;\n      }\n    }\n    /** The direction the viewport scrolls. */\n\n\n    get orientation() {\n      return this._orientation;\n    }\n\n    set orientation(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n\n        this._calculateSpacerSize();\n      }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n\n\n    get appendOnly() {\n      return this._appendOnly;\n    }\n\n    set appendOnly(value) {\n      this._appendOnly = coerceBooleanProperty(value);\n    }\n\n    ngOnInit() {\n      // Scrolling depends on the element dimensions which we can't get during SSR.\n      if (!this._platform.isBrowser) {\n        return;\n      }\n\n      if (this.scrollable === this) {\n        super.ngOnInit();\n      } // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._measureViewportSize();\n\n        this._scrollStrategy.attach(this);\n\n        this.scrollable.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n        startWith(null), // Collect multiple events into one until the next animation frame. This way if\n        // there are multiple scroll events in the same frame we only need to recheck\n        // our layout once.\n        auditTime(0, SCROLL_SCHEDULER)).subscribe(() => this._scrollStrategy.onContentScrolled());\n\n        this._markChangeDetectionNeeded();\n      }));\n    }\n\n    ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      this._viewportChanges.unsubscribe();\n\n      super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n\n\n    attach(forOf) {\n      if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(() => {\n        this._forOf = forOf;\n\n        this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n          const newLength = data.length;\n\n          if (newLength !== this._dataLength) {\n            this._dataLength = newLength;\n\n            this._scrollStrategy.onDataLengthChanged();\n          }\n\n          this._doChangeDetection();\n        });\n      });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n\n\n    detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n\n\n    getDataLength() {\n      return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n\n\n    getViewportSize() {\n      return this._viewportSize;\n    } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /** Get the current rendered range of items. */\n\n\n    getRenderedRange() {\n      return this._renderedRange;\n    }\n\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n\n\n    setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n\n        this._calculateSpacerSize();\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /** Sets the currently rendered range of indices. */\n\n\n    setRenderedRange(range) {\n      if (!rangesEqual(this._renderedRange, range)) {\n        if (this.appendOnly) {\n          range = {\n            start: 0,\n            end: Math.max(this._renderedRange.end, range.end)\n          };\n        }\n\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n\n\n    getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n\n\n    setRenderedContentOffset(offset, to = 'to-start') {\n      // In appendOnly, we always start from the top\n      offset = this.appendOnly && to === 'to-start' ? 0 : offset; // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n\n      const isRtl = this.dir && this.dir.value == 'rtl';\n      const isHorizontal = this.orientation == 'horizontal';\n      const axis = isHorizontal ? 'X' : 'Y';\n      const axisDirection = isHorizontal && isRtl ? -1 : 1;\n      let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += ` translate${axis}(-100%)`; // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(() => {\n          if (this._renderedContentOffsetNeedsRewrite) {\n            this._renderedContentOffset -= this.measureRenderedContentSize();\n            this._renderedContentOffsetNeedsRewrite = false;\n            this.setRenderedContentOffset(this._renderedContentOffset);\n          } else {\n            this._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n\n    scrollToOffset(offset, behavior = 'auto') {\n      const options = {\n        behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n\n\n    scrollToIndex(index, behavior = 'auto') {\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n\n\n    measureScrollOffset(from) {\n      // This is to break the call cycle\n      let measureScrollOffset;\n\n      if (this.scrollable == this) {\n        measureScrollOffset = _from => super.measureScrollOffset(_from);\n      } else {\n        measureScrollOffset = _from => this.scrollable.measureScrollOffset(_from);\n      }\n\n      return Math.max(0, measureScrollOffset(from !== null && from !== void 0 ? from : this.orientation === 'horizontal' ? 'start' : 'top') - this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n\n\n    measureViewportOffset(from) {\n      var _a;\n\n      let fromRect;\n      const LEFT = 'left';\n      const RIGHT = 'right';\n      const isRtl = ((_a = this.dir) === null || _a === void 0 ? void 0 : _a.value) == 'rtl';\n\n      if (from == 'start') {\n        fromRect = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        fromRect = isRtl ? LEFT : RIGHT;\n      } else if (from) {\n        fromRect = from;\n      } else {\n        fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n      }\n\n      const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n      const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n      return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n\n\n    measureRenderedContentSize() {\n      const contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n\n\n    measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n\n\n    checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n\n\n    _measureViewportSize() {\n      this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n\n\n    _markChangeDetectionNeeded(runAfter) {\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n          this._doChangeDetection();\n        }));\n      }\n    }\n    /** Run change detection. */\n\n\n    _doChangeDetection() {\n      this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n      const runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      for (const fn of runAfterChangeDetection) {\n        fn();\n      }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n\n\n    _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n      this._totalContentWidth = this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n\n  }\n\n  CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n    return new (t || CdkVirtualScrollViewport)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(ViewportRuler), i0.ɵɵdirectiveInject(VIRTUAL_SCROLLABLE, 8));\n  };\n\n  CdkVirtualScrollViewport.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkVirtualScrollViewport,\n    selectors: [[\"cdk-virtual-scroll-viewport\"]],\n    viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n      }\n    },\n    hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n    hostVars: 4,\n    hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n      }\n    },\n    inputs: {\n      orientation: \"orientation\",\n      appendOnly: \"appendOnly\"\n    },\n    outputs: {\n      scrolledIndexChange: \"scrolledIndexChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: CdkScrollable,\n      useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n      deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 4,\n    consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n    template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n      }\n    },\n    styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CdkVirtualScrollViewport;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\n\n\nfunction getOffset(orientation, direction, node) {\n  const el = node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n\n  const rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n\n\nlet CdkVirtualForOf = /*#__PURE__*/(() => {\n  class CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef,\n    /** The template to use when stamping out new items. */\n    _template,\n    /** The set of available differs. */\n    _differs,\n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater,\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n      this._viewContainerRef = _viewContainerRef;\n      this._template = _template;\n      this._differs = _differs;\n      this._viewRepeater = _viewRepeater;\n      this._viewport = _viewport;\n      /** Emits when the rendered view of the data changes. */\n\n      this.viewChange = new Subject();\n      /** Subject that emits when a new DataSource instance is given. */\n\n      this._dataSourceChanges = new Subject();\n      /** Emits whenever the data in the current DataSource changes. */\n\n      this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n      startWith(null), // Bundle up the previous and current data sources so we can work with both.\n      pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n      // new one, passing back a stream of data changes which we run through `switchMap` to give\n      // us a data stream that emits the latest data from whatever the current `DataSource` is.\n      switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), // Replay the last emitted data when someone subscribes.\n      shareReplay(1));\n      /** The differ used to calculate changes to the data. */\n\n      this._differ = null;\n      /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n\n      this._needsUpdate = false;\n      this._destroyed = new Subject();\n      this.dataStream.subscribe(data => {\n        this._data = data;\n\n        this._onRenderedDataChange();\n      });\n\n      this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n        this._renderedRange = range;\n\n        if (this.viewChange.observers.length) {\n          ngZone.run(() => this.viewChange.next(this._renderedRange));\n        }\n\n        this._onRenderedDataChange();\n      });\n\n      this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n\n\n    get cdkVirtualForOf() {\n      return this._cdkVirtualForOf;\n    }\n\n    set cdkVirtualForOf(value) {\n      this._cdkVirtualForOf = value;\n\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // If value is an an NgIterable, convert it to an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n\n\n    get cdkVirtualForTrackBy() {\n      return this._cdkVirtualForTrackBy;\n    }\n\n    set cdkVirtualForTrackBy(fn) {\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : undefined;\n    }\n    /** The template used to stamp out new elements. */\n\n\n    set cdkVirtualForTemplate(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n\n    get cdkVirtualForTemplateCacheSize() {\n      return this._viewRepeater.viewCacheSize;\n    }\n\n    set cdkVirtualForTemplateCacheSize(size) {\n      this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n\n\n    measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Error: attempted to measure an item that isn't rendered.`);\n      } // The index into the list of rendered views for the first item in the range.\n\n\n      const renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n      const rangeLen = range.end - range.start; // Loop over all the views, find the first and land node and compute the size by subtracting\n      // the top of the first node from the bottom of the last one.\n\n      let firstNode;\n      let lastNode; // Find the first node by starting from the beginning and going forwards.\n\n      for (let i = 0; i < rangeLen; i++) {\n        const view = this._viewContainerRef.get(i + renderedStartIndex);\n\n        if (view && view.rootNodes.length) {\n          firstNode = lastNode = view.rootNodes[0];\n          break;\n        }\n      } // Find the last node by starting from the end and going backwards.\n\n\n      for (let i = rangeLen - 1; i > -1; i--) {\n        const view = this._viewContainerRef.get(i + renderedStartIndex);\n\n        if (view && view.rootNodes.length) {\n          lastNode = view.rootNodes[view.rootNodes.length - 1];\n          break;\n        }\n      }\n\n      return firstNode && lastNode ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n\n    ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n        const changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n\n    ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.next(undefined);\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n\n\n    _onRenderedDataChange() {\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        // Use a wrapper function for the `trackBy` so any new values are\n        // picked up automatically without having to recreate the differ.\n        this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n          return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n        });\n      }\n\n      this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n\n\n    _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n\n\n    _updateContext() {\n      const count = this._data.length;\n      let i = this._viewContainerRef.length;\n\n      while (i--) {\n        const view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /** Apply changes to the DOM. */\n\n\n    _applyChanges(changes) {\n      this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item); // Update $implicit for any items that had an identity change.\n\n\n      changes.forEachIdentityChange(record => {\n        const view = this._viewContainerRef.get(record.currentIndex);\n\n        view.context.$implicit = record.item;\n      }); // Update the context variables on all items.\n\n      const count = this._data.length;\n      let i = this._viewContainerRef.length;\n\n      while (i--) {\n        const view = this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n\n\n    _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n\n    _getEmbeddedViewArgs(record, index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return {\n        templateRef: this._template,\n        context: {\n          $implicit: record.item,\n          // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n          // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n          cdkVirtualForOf: this._cdkVirtualForOf,\n          index: -1,\n          count: -1,\n          first: false,\n          last: false,\n          odd: false,\n          even: false\n        },\n        index\n      };\n    }\n\n  }\n\n  CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n    return new (t || CdkVirtualForOf)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), i0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  CdkVirtualForOf.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkVirtualForOf,\n    selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n    inputs: {\n      cdkVirtualForOf: \"cdkVirtualForOf\",\n      cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n      cdkVirtualForTemplate: \"cdkVirtualForTemplate\",\n      cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n  return CdkVirtualForOf;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\n\n\nlet CdkVirtualScrollableElement = /*#__PURE__*/(() => {\n  class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n      super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from] - this.measureScrollOffset(from);\n    }\n\n  }\n\n  CdkVirtualScrollableElement.ɵfac = function CdkVirtualScrollableElement_Factory(t) {\n    return new (t || CdkVirtualScrollableElement)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n\n  CdkVirtualScrollableElement.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkVirtualScrollableElement,\n    selectors: [[\"\", \"cdkVirtualScrollingElement\", \"\"]],\n    hostAttrs: [1, \"cdk-virtual-scrollable\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: VIRTUAL_SCROLLABLE,\n      useExisting: CdkVirtualScrollableElement\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkVirtualScrollableElement;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\n\n\nlet CdkVirtualScrollableWindow = /*#__PURE__*/(() => {\n  class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n      super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n      this._elementScrolled = new Observable(observer => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n\n    measureBoundingClientRectWithScrollOffset(from) {\n      return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n\n  }\n\n  CdkVirtualScrollableWindow.ɵfac = function CdkVirtualScrollableWindow_Factory(t) {\n    return new (t || CdkVirtualScrollableWindow)(i0.ɵɵdirectiveInject(ScrollDispatcher), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n  };\n\n  CdkVirtualScrollableWindow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkVirtualScrollableWindow,\n    selectors: [[\"cdk-virtual-scroll-viewport\", \"scrollWindow\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: VIRTUAL_SCROLLABLE,\n      useExisting: CdkVirtualScrollableWindow\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkVirtualScrollableWindow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet CdkScrollableModule = /*#__PURE__*/(() => {\n  class CdkScrollableModule {}\n\n  CdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) {\n    return new (t || CdkScrollableModule)();\n  };\n\n  CdkScrollableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CdkScrollableModule\n  });\n  CdkScrollableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return CdkScrollableModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @docs-primary-export\n */\n\n\nlet ScrollingModule = /*#__PURE__*/(() => {\n  class ScrollingModule {}\n\n  ScrollingModule.ɵfac = function ScrollingModule_Factory(t) {\n    return new (t || ScrollingModule)();\n  };\n\n  ScrollingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ScrollingModule\n  });\n  ScrollingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule]\n  });\n  return ScrollingModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };","map":{"version":3,"names":["coerceNumberProperty","coerceElement","coerceBooleanProperty","i0","InjectionToken","forwardRef","Directive","Input","Injectable","Optional","Inject","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","Output","ViewChild","SkipSelf","ElementRef","NgModule","Subject","of","Observable","fromEvent","animationFrameScheduler","asapScheduler","Subscription","isObservable","distinctUntilChanged","auditTime","filter","takeUntil","startWith","pairwise","switchMap","shareReplay","DOCUMENT","i1","getRtlScrollAxisType","supportsScrollBehavior","Platform","i2","BidiModule","i2$1","isDataSource","ArrayDataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","VIRTUAL_SCROLL_STRATEGY","FixedSizeVirtualScrollStrategy","constructor","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","ngDevMode","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","maxVisibleItems","Math","ceil","newVisibleIndex","max","min","floor","startBuffer","expandStart","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","value","ngOnChanges","ɵfac","ɵdir","provide","useFactory","deps","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","register","scrollable","has","set","elementScrolled","subscribe","deregister","scrollableReference","get","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","ngOnDestroy","forEach","_","container","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","_getWindow","defaultView","window","element","scrollableElement","getElementRef","nativeElement","parentElement","runOutsideAngular","NgZone","ɵprov","CdkScrollable","elementRef","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTop","scrollLeft","from","LEFT","RIGHT","Directionality","VIRTUAL_SCROLLABLE","CdkVirtualScrollable","measureViewportSize","orientation","viewportEl","DEFAULT_RESIZE_TIME","ViewportRuler","_change","_changeListener","event","addEventListener","change","_viewportSize","removeEventListener","_updateViewportSize","output","width","height","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","_appendOnly","Promise","resolve","then","run","renderedRangeStream","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","classList","add","_calculateSpacerSize","appendOnly","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","measureBoundingClientRectWithScrollOffset","size","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","axisDirection","transform","Number","_renderedContentTransform","measureRenderedContentSize","_from","measureViewportOffset","_a","fromRect","scrollerClientRect","viewportClientRect","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","runAfter","style","markForCheck","runAfterChangeDetection","fn","ChangeDetectorRef","ɵcmp","virtualScrollable","getOffset","direction","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","_viewRepeater","viewChange","_dataSourceChanges","prev","cur","_changeDataSource","_differ","_needsUpdate","_data","_onRenderedDataChange","observers","cdkVirtualForOf","_cdkVirtualForOf","Array","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","item","undefined","cdkVirtualForTemplate","cdkVirtualForTemplateCacheSize","viewCacheSize","renderedStartIndex","rangeLen","firstNode","lastNode","i","view","rootNodes","ngDoCheck","changes","diff","_renderedItems","_updateContext","_applyChanges","slice","find","create","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","forEachIdentityChange","$implicit","first","last","even","odd","templateRef","ViewContainerRef","TemplateRef","IterableDiffers","useClass","CdkVirtualScrollableElement","useExisting","CdkVirtualScrollableWindow","CdkScrollableModule","ɵmod","ɵinj","ScrollingModule"],"sources":["C:/IttyHorowitz/mini project/to-do-list/node_modules/@angular/cdk/fesm2015/scrolling.mjs"],"sourcesContent":["import { coerceNumberProperty, coerceElement, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkFixedSizeVirtualScroll.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n        {\n            provide: VIRTUAL_SCROLL_STRATEGY,\n            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n        },\n    ], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* RtlScrollAxisType.NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* RtlScrollAxisType.INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* RtlScrollAxisType.NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n}\nCdkVirtualScrollable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nViewportRuler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ViewportRuler, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        this._appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n     * will be removed.\n     */\n    get appendOnly() {\n        return this._appendOnly;\n    }\n    set appendOnly(value) {\n        this._appendOnly = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from !== null && from !== void 0 ? from : (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        var _a;\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = ((_a = this.dir) === null || _a === void 0 ? void 0 : _a.value) == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkVirtualScrollViewport.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: \"appendOnly\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n        {\n            provide: CdkScrollable,\n            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n        },\n    ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLL_STRATEGY]\n                    }] }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [VIRTUAL_SCROLLABLE]\n                    }] }];\n    }, propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualForOf.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.NgZone }];\n    }, propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n}\nCdkVirtualScrollableElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollableElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkVirtualScrollableElement, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n}\nCdkVirtualScrollableWindow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkVirtualScrollableWindow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: CdkVirtualScrollableWindow, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkScrollableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkScrollableModule, declarations: [CdkScrollable], exports: [CdkScrollable] });\nCdkScrollableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkScrollableModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    declarations: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nScrollingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollingModule, declarations: [CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport,\n        CdkVirtualScrollableWindow,\n        CdkVirtualScrollableElement], imports: [BidiModule, CdkScrollableModule], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport,\n        CdkVirtualScrollableWindow,\n        CdkVirtualScrollableElement] });\nScrollingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, CdkScrollableModule],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    declarations: [\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,aAA/B,EAA8CC,qBAA9C,QAA2E,uBAA3E;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,KAAhD,EAAuDC,UAAvD,EAAmEC,QAAnE,EAA6EC,MAA7E,EAAqFC,MAArF,EAA6FC,SAA7F,EAAwGC,iBAAxG,EAA2HC,uBAA3H,EAAoJC,MAApJ,EAA4JC,SAA5J,EAAuKC,QAAvK,EAAiLC,UAAjL,EAA6LC,QAA7L,QAA6M,eAA7M;AACA,SAASC,OAAT,EAAkBC,EAAlB,EAAsBC,UAAtB,EAAkCC,SAAlC,EAA6CC,uBAA7C,EAAsEC,aAAtE,EAAqFC,YAArF,EAAmGC,YAAnG,QAAuH,MAAvH;AACA,SAASC,oBAAT,EAA+BC,SAA/B,EAA0CC,MAA1C,EAAkDC,SAAlD,EAA6DC,SAA7D,EAAwEC,QAAxE,EAAkFC,SAAlF,EAA6FC,WAA7F,QAAgH,gBAAhH;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,QAAvD,QAAuE,uBAAvE;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,0BAAtB;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,uBAAxC,EAAiEC,4BAAjE,QAAqG,0BAArG;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;AACA,MAAMC,uBAAuB,gBAAG,IAAI5C,cAAJ,CAAmB,yBAAnB,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAM6C,8BAAN,CAAqC;EACjC;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACC,QAAD,EAAWC,WAAX,EAAwBC,WAAxB,EAAqC;IAC5C,KAAKC,oBAAL,GAA4B,IAAIlC,OAAJ,EAA5B;IACA;;IACA,KAAKmC,mBAAL,GAA2B,KAAKD,oBAAL,CAA0BE,IAA1B,CAA+B5B,oBAAoB,EAAnD,CAA3B;IACA;;IACA,KAAK6B,SAAL,GAAiB,IAAjB;IACA,KAAKC,SAAL,GAAiBP,QAAjB;IACA,KAAKQ,YAAL,GAAoBP,WAApB;IACA,KAAKQ,YAAL,GAAoBP,WAApB;EACH;EACD;AACJ;AACA;AACA;;;EACIQ,MAAM,CAACC,QAAD,EAAW;IACb,KAAKL,SAAL,GAAiBK,QAAjB;;IACA,KAAKC,uBAAL;;IACA,KAAKC,oBAAL;EACH;EACD;;;EACAC,MAAM,GAAG;IACL,KAAKX,oBAAL,CAA0BY,QAA1B;;IACA,KAAKT,SAAL,GAAiB,IAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIU,uBAAuB,CAAChB,QAAD,EAAWC,WAAX,EAAwBC,WAAxB,EAAqC;IACxD,IAAIA,WAAW,GAAGD,WAAd,KAA8B,OAAOgB,SAAP,KAAqB,WAArB,IAAoCA,SAAlE,CAAJ,EAAkF;MAC9E,MAAMC,KAAK,CAAC,8EAAD,CAAX;IACH;;IACD,KAAKX,SAAL,GAAiBP,QAAjB;IACA,KAAKQ,YAAL,GAAoBP,WAApB;IACA,KAAKQ,YAAL,GAAoBP,WAApB;;IACA,KAAKU,uBAAL;;IACA,KAAKC,oBAAL;EACH;EACD;;;EACAM,iBAAiB,GAAG;IAChB,KAAKN,oBAAL;EACH;EACD;;;EACAO,mBAAmB,GAAG;IAClB,KAAKR,uBAAL;;IACA,KAAKC,oBAAL;EACH;EACD;;;EACAQ,iBAAiB,GAAG;IAChB;EACH;EACD;;;EACAC,uBAAuB,GAAG;IACtB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIC,aAAa,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAC3B,IAAI,KAAKnB,SAAT,EAAoB;MAChB,KAAKA,SAAL,CAAeoB,cAAf,CAA8BF,KAAK,GAAG,KAAKjB,SAA3C,EAAsDkB,QAAtD;IACH;EACJ;EACD;;;EACAb,uBAAuB,GAAG;IACtB,IAAI,CAAC,KAAKN,SAAV,EAAqB;MACjB;IACH;;IACD,KAAKA,SAAL,CAAeqB,mBAAf,CAAmC,KAAKrB,SAAL,CAAesB,aAAf,KAAiC,KAAKrB,SAAzE;EACH;EACD;;;EACAM,oBAAoB,GAAG;IACnB,IAAI,CAAC,KAAKP,SAAV,EAAqB;MACjB;IACH;;IACD,MAAMuB,aAAa,GAAG,KAAKvB,SAAL,CAAewB,gBAAf,EAAtB;;IACA,MAAMC,QAAQ,GAAG;MAAEC,KAAK,EAAEH,aAAa,CAACG,KAAvB;MAA8BC,GAAG,EAAEJ,aAAa,CAACI;IAAjD,CAAjB;;IACA,MAAMC,YAAY,GAAG,KAAK5B,SAAL,CAAe6B,eAAf,EAArB;;IACA,MAAMC,UAAU,GAAG,KAAK9B,SAAL,CAAesB,aAAf,EAAnB;;IACA,IAAIS,YAAY,GAAG,KAAK/B,SAAL,CAAegC,mBAAf,EAAnB,CARmB,CASnB;;;IACA,IAAIC,iBAAiB,GAAG,KAAKhC,SAAL,GAAiB,CAAjB,GAAqB8B,YAAY,GAAG,KAAK9B,SAAzC,GAAqD,CAA7E,CAVmB,CAWnB;;IACA,IAAIwB,QAAQ,CAACE,GAAT,GAAeG,UAAnB,EAA+B;MAC3B;MACA,MAAMI,eAAe,GAAGC,IAAI,CAACC,IAAL,CAAUR,YAAY,GAAG,KAAK3B,SAA9B,CAAxB;MACA,MAAMoC,eAAe,GAAGF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYH,IAAI,CAACI,GAAL,CAASN,iBAAT,EAA4BH,UAAU,GAAGI,eAAzC,CAAZ,CAAxB,CAH2B,CAI3B;MACA;;MACA,IAAID,iBAAiB,IAAII,eAAzB,EAA0C;QACtCJ,iBAAiB,GAAGI,eAApB;QACAN,YAAY,GAAGM,eAAe,GAAG,KAAKpC,SAAtC;QACAwB,QAAQ,CAACC,KAAT,GAAiBS,IAAI,CAACK,KAAL,CAAWP,iBAAX,CAAjB;MACH;;MACDR,QAAQ,CAACE,GAAT,GAAeQ,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYH,IAAI,CAACI,GAAL,CAAST,UAAT,EAAqBL,QAAQ,CAACC,KAAT,GAAiBQ,eAAtC,CAAZ,CAAf;IACH;;IACD,MAAMO,WAAW,GAAGV,YAAY,GAAGN,QAAQ,CAACC,KAAT,GAAiB,KAAKzB,SAAzD;;IACA,IAAIwC,WAAW,GAAG,KAAKvC,YAAnB,IAAmCuB,QAAQ,CAACC,KAAT,IAAkB,CAAzD,EAA4D;MACxD,MAAMgB,WAAW,GAAGP,IAAI,CAACC,IAAL,CAAU,CAAC,KAAKjC,YAAL,GAAoBsC,WAArB,IAAoC,KAAKxC,SAAnD,CAApB;MACAwB,QAAQ,CAACC,KAAT,GAAiBS,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYb,QAAQ,CAACC,KAAT,GAAiBgB,WAA7B,CAAjB;MACAjB,QAAQ,CAACE,GAAT,GAAeQ,IAAI,CAACI,GAAL,CAAST,UAAT,EAAqBK,IAAI,CAACC,IAAL,CAAUH,iBAAiB,GAAG,CAACL,YAAY,GAAG,KAAK1B,YAArB,IAAqC,KAAKD,SAAxE,CAArB,CAAf;IACH,CAJD,MAKK;MACD,MAAM0C,SAAS,GAAGlB,QAAQ,CAACE,GAAT,GAAe,KAAK1B,SAApB,IAAiC8B,YAAY,GAAGH,YAAhD,CAAlB;;MACA,IAAIe,SAAS,GAAG,KAAKzC,YAAjB,IAAiCuB,QAAQ,CAACE,GAAT,IAAgBG,UAArD,EAAiE;QAC7D,MAAMc,SAAS,GAAGT,IAAI,CAACC,IAAL,CAAU,CAAC,KAAKjC,YAAL,GAAoBwC,SAArB,IAAkC,KAAK1C,SAAjD,CAAlB;;QACA,IAAI2C,SAAS,GAAG,CAAhB,EAAmB;UACfnB,QAAQ,CAACE,GAAT,GAAeQ,IAAI,CAACI,GAAL,CAAST,UAAT,EAAqBL,QAAQ,CAACE,GAAT,GAAeiB,SAApC,CAAf;UACAnB,QAAQ,CAACC,KAAT,GAAiBS,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYH,IAAI,CAACK,KAAL,CAAWP,iBAAiB,GAAG,KAAK/B,YAAL,GAAoB,KAAKD,SAAxD,CAAZ,CAAjB;QACH;MACJ;IACJ;;IACD,KAAKD,SAAL,CAAe6C,gBAAf,CAAgCpB,QAAhC;;IACA,KAAKzB,SAAL,CAAe8C,wBAAf,CAAwC,KAAK7C,SAAL,GAAiBwB,QAAQ,CAACC,KAAlE;;IACA,KAAK7B,oBAAL,CAA0BkD,IAA1B,CAA+BZ,IAAI,CAACK,KAAL,CAAWP,iBAAX,CAA/B;EACH;;AA7HgC;AA+HrC;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,sCAAT,CAAgDC,YAAhD,EAA8D;EAC1D,OAAOA,YAAY,CAACC,eAApB;AACH;AACD;;;IACMC,yB;EAAN,MAAMA,yBAAN,CAAgC;IAC5B1D,WAAW,GAAG;MACV,KAAKQ,SAAL,GAAiB,EAAjB;MACA,KAAKC,YAAL,GAAoB,GAApB;MACA,KAAKC,YAAL,GAAoB,GAApB;MACA;;MACA,KAAK+C,eAAL,GAAuB,IAAI1D,8BAAJ,CAAmC,KAAKE,QAAxC,EAAkD,KAAKC,WAAvD,EAAoE,KAAKC,WAAzE,CAAvB;IACH;IACD;;;IACY,IAARF,QAAQ,GAAG;MACX,OAAO,KAAKO,SAAZ;IACH;;IACW,IAARP,QAAQ,CAAC0D,KAAD,EAAQ;MAChB,KAAKnD,SAAL,GAAiB1D,oBAAoB,CAAC6G,KAAD,CAArC;IACH;IACD;AACJ;AACA;AACA;;;IACmB,IAAXzD,WAAW,GAAG;MACd,OAAO,KAAKO,YAAZ;IACH;;IACc,IAAXP,WAAW,CAACyD,KAAD,EAAQ;MACnB,KAAKlD,YAAL,GAAoB3D,oBAAoB,CAAC6G,KAAD,CAAxC;IACH;IACD;AACJ;AACA;;;IACmB,IAAXxD,WAAW,GAAG;MACd,OAAO,KAAKO,YAAZ;IACH;;IACc,IAAXP,WAAW,CAACwD,KAAD,EAAQ;MACnB,KAAKjD,YAAL,GAAoB5D,oBAAoB,CAAC6G,KAAD,CAAxC;IACH;;IACDC,WAAW,GAAG;MACV,KAAKH,eAAL,CAAqBxC,uBAArB,CAA6C,KAAKhB,QAAlD,EAA4D,KAAKC,WAAjE,EAA8E,KAAKC,WAAnF;IACH;;EApC2B;;EAsChCuD,yBAAyB,CAACG,IAA1B;IAAA,iBAAsHH,yBAAtH;EAAA;;EACAA,yBAAyB,CAACI,IAA1B,kBAD4G7G,EAC5G;IAAA,MAA0GyG,yBAA1G;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;IAAA,WAD4GzG,EAC5G,oBAA6R,CACrR;MACI8G,OAAO,EAAEjE,uBADb;MAEIkE,UAAU,EAAET,sCAFhB;MAGIU,IAAI,EAAE,CAAC9G,UAAU,CAAC,MAAMuG,yBAAP,CAAX;IAHV,CADqR,CAA7R,GAD4GzG,EAC5G;EAAA;SAvCMyG,yB;;;AA8CN;AAAA;EAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMQ,mBAAmB,GAAG,EAA5B;AACA;AACA;AACA;AACA;;IACMC,gB;EAAN,MAAMA,gBAAN,CAAuB;IACnBnE,WAAW,CAACoE,OAAD,EAAUC,SAAV,EAAqBC,QAArB,EAA+B;MACtC,KAAKF,OAAL,GAAeA,OAAf;MACA,KAAKC,SAAL,GAAiBA,SAAjB;MACA;;MACA,KAAKE,SAAL,GAAiB,IAAIrG,OAAJ,EAAjB;MACA;;MACA,KAAKsG,mBAAL,GAA2B,IAA3B;MACA;;MACA,KAAKC,cAAL,GAAsB,CAAtB;MACA;AACR;AACA;AACA;;MACQ,KAAKC,gBAAL,GAAwB,IAAIC,GAAJ,EAAxB;MACA,KAAKC,SAAL,GAAiBN,QAAjB;IACH;IACD;AACJ;AACA;AACA;AACA;;;IACIO,QAAQ,CAACC,UAAD,EAAa;MACjB,IAAI,CAAC,KAAKJ,gBAAL,CAAsBK,GAAtB,CAA0BD,UAA1B,CAAL,EAA4C;QACxC,KAAKJ,gBAAL,CAAsBM,GAAtB,CAA0BF,UAA1B,EAAsCA,UAAU,CAACG,eAAX,GAA6BC,SAA7B,CAAuC,MAAM,KAAKX,SAAL,CAAejB,IAAf,CAAoBwB,UAApB,CAA7C,CAAtC;MACH;IACJ;IACD;AACJ;AACA;AACA;;;IACIK,UAAU,CAACL,UAAD,EAAa;MACnB,MAAMM,mBAAmB,GAAG,KAAKV,gBAAL,CAAsBW,GAAtB,CAA0BP,UAA1B,CAA5B;;MACA,IAAIM,mBAAJ,EAAyB;QACrBA,mBAAmB,CAACE,WAApB;QACA,KAAKZ,gBAAL,CAAsBa,MAAtB,CAA6BT,UAA7B;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACIU,QAAQ,CAACC,aAAa,GAAGvB,mBAAjB,EAAsC;MAC1C,IAAI,CAAC,KAAKG,SAAL,CAAeqB,SAApB,EAA+B;QAC3B,OAAOvH,EAAE,EAAT;MACH;;MACD,OAAO,IAAIC,UAAJ,CAAgBuH,QAAD,IAAc;QAChC,IAAI,CAAC,KAAKnB,mBAAV,EAA+B;UAC3B,KAAKoB,kBAAL;QACH,CAH+B,CAIhC;QACA;;;QACA,MAAMC,YAAY,GAAGJ,aAAa,GAAG,CAAhB,GACf,KAAKlB,SAAL,CAAejE,IAAf,CAAoB3B,SAAS,CAAC8G,aAAD,CAA7B,EAA8CP,SAA9C,CAAwDS,QAAxD,CADe,GAEf,KAAKpB,SAAL,CAAeW,SAAf,CAAyBS,QAAzB,CAFN;QAGA,KAAKlB,cAAL;QACA,OAAO,MAAM;UACToB,YAAY,CAACP,WAAb;UACA,KAAKb,cAAL;;UACA,IAAI,CAAC,KAAKA,cAAV,EAA0B;YACtB,KAAKqB,qBAAL;UACH;QACJ,CAND;MAOH,CAjBM,CAAP;IAkBH;;IACDC,WAAW,GAAG;MACV,KAAKD,qBAAL;;MACA,KAAKpB,gBAAL,CAAsBsB,OAAtB,CAA8B,CAACC,CAAD,EAAIC,SAAJ,KAAkB,KAAKf,UAAL,CAAgBe,SAAhB,CAAhD;;MACA,KAAK3B,SAAL,CAAevD,QAAf;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;IACImF,gBAAgB,CAACC,mBAAD,EAAsBX,aAAtB,EAAqC;MACjD,MAAMY,SAAS,GAAG,KAAKC,2BAAL,CAAiCF,mBAAjC,CAAlB;MACA,OAAO,KAAKZ,QAAL,CAAcC,aAAd,EAA6BnF,IAA7B,CAAkC1B,MAAM,CAAC2H,MAAM,IAAI;QACtD,OAAO,CAACA,MAAD,IAAWF,SAAS,CAACG,OAAV,CAAkBD,MAAlB,IAA4B,CAAC,CAA/C;MACH,CAF8C,CAAxC,CAAP;IAGH;IACD;;;IACAD,2BAA2B,CAACF,mBAAD,EAAsB;MAC7C,MAAMK,mBAAmB,GAAG,EAA5B;MACA,KAAK/B,gBAAL,CAAsBsB,OAAtB,CAA8B,CAACU,aAAD,EAAgB5B,UAAhB,KAA+B;QACzD,IAAI,KAAK6B,0BAAL,CAAgC7B,UAAhC,EAA4CsB,mBAA5C,CAAJ,EAAsE;UAClEK,mBAAmB,CAACG,IAApB,CAAyB9B,UAAzB;QACH;MACJ,CAJD;MAKA,OAAO2B,mBAAP;IACH;IACD;;;IACAI,UAAU,GAAG;MACT,OAAO,KAAKjC,SAAL,CAAekC,WAAf,IAA8BC,MAArC;IACH;IACD;;;IACAJ,0BAA0B,CAAC7B,UAAD,EAAasB,mBAAb,EAAkC;MACxD,IAAIY,OAAO,GAAGjK,aAAa,CAACqJ,mBAAD,CAA3B;MACA,IAAIa,iBAAiB,GAAGnC,UAAU,CAACoC,aAAX,GAA2BC,aAAnD,CAFwD,CAGxD;MACA;;MACA,GAAG;QACC,IAAIH,OAAO,IAAIC,iBAAf,EAAkC;UAC9B,OAAO,IAAP;QACH;MACJ,CAJD,QAIUD,OAAO,GAAGA,OAAO,CAACI,aAJ5B;;MAKA,OAAO,KAAP;IACH;IACD;;;IACAxB,kBAAkB,GAAG;MACjB,KAAKpB,mBAAL,GAA2B,KAAKJ,OAAL,CAAaiD,iBAAb,CAA+B,MAAM;QAC5D,MAAMN,MAAM,GAAG,KAAKF,UAAL,EAAf;;QACA,OAAOxI,SAAS,CAAC0I,MAAM,CAACzC,QAAR,EAAkB,QAAlB,CAAT,CAAqCY,SAArC,CAA+C,MAAM,KAAKX,SAAL,CAAejB,IAAf,EAArD,CAAP;MACH,CAH0B,CAA3B;IAIH;IACD;;;IACAwC,qBAAqB,GAAG;MACpB,IAAI,KAAKtB,mBAAT,EAA8B;QAC1B,KAAKA,mBAAL,CAAyBc,WAAzB;;QACA,KAAKd,mBAAL,GAA2B,IAA3B;MACH;IACJ;;EAhIkB;;EAkIvBL,gBAAgB,CAACN,IAAjB;IAAA,iBAA6GM,gBAA7G,EA3K4GlH,EA2K5G,UAA+IA,EAAE,CAACqK,MAAlJ,GA3K4GrK,EA2K5G,UAAqKkC,EAAE,CAACG,QAAxK,GA3K4GrC,EA2K5G,UAA6LiC,QAA7L;EAAA;;EACAiF,gBAAgB,CAACoD,KAAjB,kBA5K4GtK,EA4K5G;IAAA,OAAiHkH,gBAAjH;IAAA,SAAiHA,gBAAjH;IAAA,YAA+I;EAA/I;SAnIMA,gB;;;AAoIN;AAAA;EAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;;;IACMqD,a;EAAN,MAAMA,aAAN,CAAoB;IAChBxH,WAAW,CAACyH,UAAD,EAAaC,gBAAb,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;MACnD,KAAKH,UAAL,GAAkBA,UAAlB;MACA,KAAKC,gBAAL,GAAwBA,gBAAxB;MACA,KAAKC,MAAL,GAAcA,MAAd;MACA,KAAKC,GAAL,GAAWA,GAAX;MACA,KAAKC,UAAL,GAAkB,IAAI3J,OAAJ,EAAlB;MACA,KAAK4J,gBAAL,GAAwB,IAAI1J,UAAJ,CAAgBuH,QAAD,IAAc,KAAKgC,MAAL,CAAYN,iBAAZ,CAA8B,MAAMhJ,SAAS,CAAC,KAAKoJ,UAAL,CAAgBN,aAAjB,EAAgC,QAAhC,CAAT,CACpF7G,IADoF,CAC/EzB,SAAS,CAAC,KAAKgJ,UAAN,CADsE,EAEpF3C,SAFoF,CAE1ES,QAF0E,CAApC,CAA7B,CAAxB;IAGH;;IACDoC,QAAQ,GAAG;MACP,KAAKL,gBAAL,CAAsB7C,QAAtB,CAA+B,IAA/B;IACH;;IACDkB,WAAW,GAAG;MACV,KAAK2B,gBAAL,CAAsBvC,UAAtB,CAAiC,IAAjC;;MACA,KAAK0C,UAAL,CAAgBvE,IAAhB;;MACA,KAAKuE,UAAL,CAAgB7G,QAAhB;IACH;IACD;;;IACAiE,eAAe,GAAG;MACd,OAAO,KAAK6C,gBAAZ;IACH;IACD;;;IACAZ,aAAa,GAAG;MACZ,OAAO,KAAKO,UAAZ;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;IACIO,QAAQ,CAACC,OAAD,EAAU;MACd,MAAMC,EAAE,GAAG,KAAKT,UAAL,CAAgBN,aAA3B;MACA,MAAMgB,KAAK,GAAG,KAAKP,GAAL,IAAY,KAAKA,GAAL,CAASjE,KAAT,IAAkB,KAA5C,CAFc,CAGd;;MACA,IAAIsE,OAAO,CAACG,IAAR,IAAgB,IAApB,EAA0B;QACtBH,OAAO,CAACG,IAAR,GAAeD,KAAK,GAAGF,OAAO,CAAC/F,GAAX,GAAiB+F,OAAO,CAAChG,KAA7C;MACH;;MACD,IAAIgG,OAAO,CAACI,KAAR,IAAiB,IAArB,EAA2B;QACvBJ,OAAO,CAACI,KAAR,GAAgBF,KAAK,GAAGF,OAAO,CAAChG,KAAX,GAAmBgG,OAAO,CAAC/F,GAAhD;MACH,CATa,CAUd;;;MACA,IAAI+F,OAAO,CAACK,MAAR,IAAkB,IAAtB,EAA4B;QACxBL,OAAO,CAACM,GAAR,GACIL,EAAE,CAACM,YAAH,GAAkBN,EAAE,CAACO,YAArB,GAAoCR,OAAO,CAACK,MADhD;MAEH,CAda,CAed;;;MACA,IAAIH,KAAK,IAAI/I,oBAAoB,MAAM;MAAE;MAAzC,EAAyE;QACrE,IAAI6I,OAAO,CAACG,IAAR,IAAgB,IAApB,EAA0B;UACtBH,OAAO,CAACI,KAAR,GACIH,EAAE,CAACQ,WAAH,GAAiBR,EAAE,CAACS,WAApB,GAAkCV,OAAO,CAACG,IAD9C;QAEH;;QACD,IAAIhJ,oBAAoB,MAAM;QAAE;QAAhC,EAAkE;UAC9D6I,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,KAAvB;QACH,CAFD,MAGK,IAAIjJ,oBAAoB,MAAM;QAAE;QAAhC,EAAiE;UAClE6I,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,KAAR,GAAgB,CAACJ,OAAO,CAACI,KAAzB,GAAiCJ,OAAO,CAACI,KAAxD;QACH;MACJ,CAXD,MAYK;QACD,IAAIJ,OAAO,CAACI,KAAR,IAAiB,IAArB,EAA2B;UACvBJ,OAAO,CAACG,IAAR,GACIF,EAAE,CAACQ,WAAH,GAAiBR,EAAE,CAACS,WAApB,GAAkCV,OAAO,CAACI,KAD9C;QAEH;MACJ;;MACD,KAAKO,qBAAL,CAA2BX,OAA3B;IACH;;IACDW,qBAAqB,CAACX,OAAD,EAAU;MAC3B,MAAMC,EAAE,GAAG,KAAKT,UAAL,CAAgBN,aAA3B;;MACA,IAAI9H,sBAAsB,EAA1B,EAA8B;QAC1B6I,EAAE,CAACF,QAAH,CAAYC,OAAZ;MACH,CAFD,MAGK;QACD,IAAIA,OAAO,CAACM,GAAR,IAAe,IAAnB,EAAyB;UACrBL,EAAE,CAACW,SAAH,GAAeZ,OAAO,CAACM,GAAvB;QACH;;QACD,IAAIN,OAAO,CAACG,IAAR,IAAgB,IAApB,EAA0B;UACtBF,EAAE,CAACY,UAAH,GAAgBb,OAAO,CAACG,IAAxB;QACH;MACJ;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACI7F,mBAAmB,CAACwG,IAAD,EAAO;MACtB,MAAMC,IAAI,GAAG,MAAb;MACA,MAAMC,KAAK,GAAG,OAAd;MACA,MAAMf,EAAE,GAAG,KAAKT,UAAL,CAAgBN,aAA3B;;MACA,IAAI4B,IAAI,IAAI,KAAZ,EAAmB;QACf,OAAOb,EAAE,CAACW,SAAV;MACH;;MACD,IAAIE,IAAI,IAAI,QAAZ,EAAsB;QAClB,OAAOb,EAAE,CAACM,YAAH,GAAkBN,EAAE,CAACO,YAArB,GAAoCP,EAAE,CAACW,SAA9C;MACH,CATqB,CAUtB;;;MACA,MAAMV,KAAK,GAAG,KAAKP,GAAL,IAAY,KAAKA,GAAL,CAASjE,KAAT,IAAkB,KAA5C;;MACA,IAAIoF,IAAI,IAAI,OAAZ,EAAqB;QACjBA,IAAI,GAAGZ,KAAK,GAAGc,KAAH,GAAWD,IAAvB;MACH,CAFD,MAGK,IAAID,IAAI,IAAI,KAAZ,EAAmB;QACpBA,IAAI,GAAGZ,KAAK,GAAGa,IAAH,GAAUC,KAAtB;MACH;;MACD,IAAId,KAAK,IAAI/I,oBAAoB,MAAM;MAAE;MAAzC,EAA2E;QACvE;QACA;QACA,IAAI2J,IAAI,IAAIC,IAAZ,EAAkB;UACd,OAAOd,EAAE,CAACQ,WAAH,GAAiBR,EAAE,CAACS,WAApB,GAAkCT,EAAE,CAACY,UAA5C;QACH,CAFD,MAGK;UACD,OAAOZ,EAAE,CAACY,UAAV;QACH;MACJ,CATD,MAUK,IAAIX,KAAK,IAAI/I,oBAAoB,MAAM;MAAE;MAAzC,EAA0E;QAC3E;QACA;QACA,IAAI2J,IAAI,IAAIC,IAAZ,EAAkB;UACd,OAAOd,EAAE,CAACY,UAAH,GAAgBZ,EAAE,CAACQ,WAAnB,GAAiCR,EAAE,CAACS,WAA3C;QACH,CAFD,MAGK;UACD,OAAO,CAACT,EAAE,CAACY,UAAX;QACH;MACJ,CATI,MAUA;QACD;QACA;QACA,IAAIC,IAAI,IAAIC,IAAZ,EAAkB;UACd,OAAOd,EAAE,CAACY,UAAV;QACH,CAFD,MAGK;UACD,OAAOZ,EAAE,CAACQ,WAAH,GAAiBR,EAAE,CAACS,WAApB,GAAkCT,EAAE,CAACY,UAA5C;QACH;MACJ;IACJ;;EA9Ie;;EAgJpBtB,aAAa,CAAC3D,IAAd;IAAA,iBAA0G2D,aAA1G,EA9U4GvK,EA8U5G,mBAAyIA,EAAE,CAACe,UAA5I,GA9U4Gf,EA8U5G,mBAAmKkH,gBAAnK,GA9U4GlH,EA8U5G,mBAAgMA,EAAE,CAACqK,MAAnM,GA9U4GrK,EA8U5G,mBAAsNsC,EAAE,CAAC2J,cAAzN;EAAA;;EACA1B,aAAa,CAAC1D,IAAd,kBA/U4G7G,EA+U5G;IAAA,MAA8FuK,aAA9F;IAAA;EAAA;SAjJMA,a;;;AAkJN;AAAA;EAAA;AAAA;;AAWA,MAAM2B,kBAAkB,gBAAG,IAAIjM,cAAJ,CAAmB,oBAAnB,CAA3B;AACA;AACA;AACA;;IACMkM,oB;EAAN,MAAMA,oBAAN,SAAmC5B,aAAnC,CAAiD;IAC7CxH,WAAW,CAACyH,UAAD,EAAaC,gBAAb,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;MACnD,MAAMH,UAAN,EAAkBC,gBAAlB,EAAoCC,MAApC,EAA4CC,GAA5C;IACH;IACD;AACJ;AACA;AACA;AACA;;;IACIyB,mBAAmB,CAACC,WAAD,EAAc;MAC7B,MAAMC,UAAU,GAAG,KAAK9B,UAAL,CAAgBN,aAAnC;MACA,OAAOmC,WAAW,KAAK,YAAhB,GAA+BC,UAAU,CAACZ,WAA1C,GAAwDY,UAAU,CAACd,YAA1E;IACH;;EAZ4C;;EAcjDW,oBAAoB,CAACvF,IAArB;IAAA,iBAAiHuF,oBAAjH,EA7W4GnM,EA6W5G,mBAAuJA,EAAE,CAACe,UAA1J,GA7W4Gf,EA6W5G,mBAAiLkH,gBAAjL,GA7W4GlH,EA6W5G,mBAA8MA,EAAE,CAACqK,MAAjN,GA7W4GrK,EA6W5G,mBAAoOsC,EAAE,CAAC2J,cAAvO;EAAA;;EACAE,oBAAoB,CAACtF,IAArB,kBA9W4G7G,EA8W5G;IAAA,MAAqGmM,oBAArG;IAAA,WA9W4GnM,EA8W5G;EAAA;SAfMmM,oB;;;AAgBN;AAAA;EAAA;AAAA;AAQA;;;AACA,MAAMI,mBAAmB,GAAG,EAA5B;AACA;AACA;AACA;AACA;;IACMC,a;EAAN,MAAMA,aAAN,CAAoB;IAChBzJ,WAAW,CAACqE,SAAD,EAAYsD,MAAZ,EAAoBrD,QAApB,EAA8B;MACrC,KAAKD,SAAL,GAAiBA,SAAjB;MACA;;MACA,KAAKqF,OAAL,GAAe,IAAIxL,OAAJ,EAAf;MACA;;MACA,KAAKyL,eAAL,GAAwBC,KAAD,IAAW;QAC9B,KAAKF,OAAL,CAAapG,IAAb,CAAkBsG,KAAlB;MACH,CAFD;;MAGA,KAAKhF,SAAL,GAAiBN,QAAjB;MACAqD,MAAM,CAACN,iBAAP,CAAyB,MAAM;QAC3B,IAAIhD,SAAS,CAACqB,SAAd,EAAyB;UACrB,MAAMqB,MAAM,GAAG,KAAKF,UAAL,EAAf,CADqB,CAErB;UACA;;;UACAE,MAAM,CAAC8C,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,eAAvC;UACA5C,MAAM,CAAC8C,gBAAP,CAAwB,mBAAxB,EAA6C,KAAKF,eAAlD;QACH,CAP0B,CAQ3B;QACA;;;QACA,KAAKG,MAAL,GAAc5E,SAAd,CAAwB,MAAO,KAAK6E,aAAL,GAAqB,IAApD;MACH,CAXD;IAYH;;IACDhE,WAAW,GAAG;MACV,IAAI,KAAK1B,SAAL,CAAeqB,SAAnB,EAA8B;QAC1B,MAAMqB,MAAM,GAAG,KAAKF,UAAL,EAAf;;QACAE,MAAM,CAACiD,mBAAP,CAA2B,QAA3B,EAAqC,KAAKL,eAA1C;QACA5C,MAAM,CAACiD,mBAAP,CAA2B,mBAA3B,EAAgD,KAAKL,eAArD;MACH;;MACD,KAAKD,OAAL,CAAa1I,QAAb;IACH;IACD;;;IACAoB,eAAe,GAAG;MACd,IAAI,CAAC,KAAK2H,aAAV,EAAyB;QACrB,KAAKE,mBAAL;MACH;;MACD,MAAMC,MAAM,GAAG;QAAEC,KAAK,EAAE,KAAKJ,aAAL,CAAmBI,KAA5B;QAAmCC,MAAM,EAAE,KAAKL,aAAL,CAAmBK;MAA9D,CAAf,CAJc,CAKd;;MACA,IAAI,CAAC,KAAK/F,SAAL,CAAeqB,SAApB,EAA+B;QAC3B,KAAKqE,aAAL,GAAqB,IAArB;MACH;;MACD,OAAOG,MAAP;IACH;IACD;;;IACAG,eAAe,GAAG;MACd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMC,cAAc,GAAG,KAAKC,yBAAL,EAAvB;MACA,MAAM;QAAEJ,KAAF;QAASC;MAAT,IAAoB,KAAKhI,eAAL,EAA1B;MACA,OAAO;QACHmG,GAAG,EAAE+B,cAAc,CAAC/B,GADjB;QAEHH,IAAI,EAAEkC,cAAc,CAAClC,IAFlB;QAGHE,MAAM,EAAEgC,cAAc,CAAC/B,GAAf,GAAqB6B,MAH1B;QAIH/B,KAAK,EAAEiC,cAAc,CAAClC,IAAf,GAAsB+B,KAJ1B;QAKHC,MALG;QAMHD;MANG,CAAP;IAQH;IACD;;;IACAI,yBAAyB,GAAG;MACxB;MACA;MACA,IAAI,CAAC,KAAKlG,SAAL,CAAeqB,SAApB,EAA+B;QAC3B,OAAO;UAAE6C,GAAG,EAAE,CAAP;UAAUH,IAAI,EAAE;QAAhB,CAAP;MACH,CALuB,CAMxB;MACA;MACA;MACA;MACA;MACA;;;MACA,MAAM9D,QAAQ,GAAG,KAAKM,SAAtB;;MACA,MAAMmC,MAAM,GAAG,KAAKF,UAAL,EAAf;;MACA,MAAM2D,eAAe,GAAGlG,QAAQ,CAACkG,eAAjC;MACA,MAAMC,YAAY,GAAGD,eAAe,CAACE,qBAAhB,EAArB;MACA,MAAMnC,GAAG,GAAG,CAACkC,YAAY,CAAClC,GAAd,IACRjE,QAAQ,CAACqG,IAAT,CAAc9B,SADN,IAER9B,MAAM,CAAC6D,OAFC,IAGRJ,eAAe,CAAC3B,SAHR,IAIR,CAJJ;MAKA,MAAMT,IAAI,GAAG,CAACqC,YAAY,CAACrC,IAAd,IACT9D,QAAQ,CAACqG,IAAT,CAAc7B,UADL,IAET/B,MAAM,CAAC8D,OAFE,IAGTL,eAAe,CAAC1B,UAHP,IAIT,CAJJ;MAKA,OAAO;QAAEP,GAAF;QAAOH;MAAP,CAAP;IACH;IACD;AACJ;AACA;AACA;AACA;;;IACI0B,MAAM,CAACgB,YAAY,GAAGtB,mBAAhB,EAAqC;MACvC,OAAOsB,YAAY,GAAG,CAAf,GAAmB,KAAKpB,OAAL,CAAapJ,IAAb,CAAkB3B,SAAS,CAACmM,YAAD,CAA3B,CAAnB,GAAgE,KAAKpB,OAA5E;IACH;IACD;;;IACA7C,UAAU,GAAG;MACT,OAAO,KAAKjC,SAAL,CAAekC,WAAf,IAA8BC,MAArC;IACH;IACD;;;IACAkD,mBAAmB,GAAG;MAClB,MAAMlD,MAAM,GAAG,KAAKF,UAAL,EAAf;;MACA,KAAKkD,aAAL,GAAqB,KAAK1F,SAAL,CAAeqB,SAAf,GACf;QAAEyE,KAAK,EAAEpD,MAAM,CAACgE,UAAhB;QAA4BX,MAAM,EAAErD,MAAM,CAACiE;MAA3C,CADe,GAEf;QAAEb,KAAK,EAAE,CAAT;QAAYC,MAAM,EAAE;MAApB,CAFN;IAGH;;EAhHe;;EAkHpBX,aAAa,CAAC5F,IAAd;IAAA,iBAA0G4F,aAA1G,EA/e4GxM,EA+e5G,UAAyIkC,EAAE,CAACG,QAA5I,GA/e4GrC,EA+e5G,UAAiKA,EAAE,CAACqK,MAApK,GA/e4GrK,EA+e5G,UAAuLiC,QAAvL;EAAA;;EACAuK,aAAa,CAAClC,KAAd,kBAhf4GtK,EAgf5G;IAAA,OAA8GwM,aAA9G;IAAA,SAA8GA,aAA9G;IAAA,YAAyI;EAAzI;SAnHMA,a;;;AAoHN;AAAA;EAAA;AAAA;AAYA;;;AACA,SAASwB,WAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA6B;EACzB,OAAOD,EAAE,CAACjJ,KAAH,IAAYkJ,EAAE,CAAClJ,KAAf,IAAwBiJ,EAAE,CAAChJ,GAAH,IAAUiJ,EAAE,CAACjJ,GAA5C;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,MAAMkJ,gBAAgB,GAAG,OAAOC,qBAAP,KAAiC,WAAjC,GAA+C/M,uBAA/C,GAAyEC,aAAlG;AACA;;IACM+M,wB;EAAN,MAAMA,wBAAN,SAAuClC,oBAAvC,CAA4D;IACxDpJ,WAAW,CAACyH,UAAD,EAAa8D,kBAAb,EAAiC5D,MAAjC,EAAyClE,eAAzC,EAA0DmE,GAA1D,EAA+DF,gBAA/D,EAAiF8D,aAAjF,EAAgG1G,UAAhG,EAA4G;MACnH,MAAM2C,UAAN,EAAkBC,gBAAlB,EAAoCC,MAApC,EAA4CC,GAA5C;MACA,KAAKH,UAAL,GAAkBA,UAAlB;MACA,KAAK8D,kBAAL,GAA0BA,kBAA1B;MACA,KAAK9H,eAAL,GAAuBA,eAAvB;MACA,KAAKqB,UAAL,GAAkBA,UAAlB;MACA,KAAKT,SAAL,GAAiB5G,MAAM,CAAC6B,QAAD,CAAvB;MACA;;MACA,KAAKmM,gBAAL,GAAwB,IAAIvN,OAAJ,EAAxB;MACA;;MACA,KAAKwN,qBAAL,GAA6B,IAAIxN,OAAJ,EAA7B;MACA,KAAKyN,YAAL,GAAoB,UAApB;MACA,KAAKC,WAAL,GAAmB,KAAnB,CAZmH,CAanH;MACA;MACA;MACA;;MACA;;MACA,KAAKvL,mBAAL,GAA2B,IAAIjC,UAAJ,CAAgBuH,QAAD,IAAc,KAAKlC,eAAL,CAAqBpD,mBAArB,CAAyC6E,SAAzC,CAAmDzD,KAAK,IAAIoK,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM,KAAKpE,MAAL,CAAYqE,GAAZ,CAAgB,MAAMrG,QAAQ,CAACrC,IAAT,CAAc7B,KAAd,CAAtB,CAA7B,CAA5D,CAA7B,CAA3B;MACA;;MACA,KAAKwK,mBAAL,GAA2B,KAAKP,qBAAhC;MACA;AACR;AACA;;MACQ,KAAKQ,iBAAL,GAAyB,CAAzB;MACA;;MACA,KAAKC,kBAAL,GAA0B,EAA1B;MACA;;MACA,KAAKC,mBAAL,GAA2B,EAA3B;MACA;;MACA,KAAKC,cAAL,GAAsB;QAAEpK,KAAK,EAAE,CAAT;QAAYC,GAAG,EAAE;MAAjB,CAAtB;MACA;;MACA,KAAKoK,WAAL,GAAmB,CAAnB;MACA;;MACA,KAAKvC,aAAL,GAAqB,CAArB;MACA;;MACA,KAAKwC,sBAAL,GAA8B,CAA9B;MACA;AACR;AACA;AACA;;MACQ,KAAKC,kCAAL,GAA0C,KAA1C;MACA;;MACA,KAAKC,yBAAL,GAAiC,KAAjC;MACA;;MACA,KAAKC,wBAAL,GAAgC,EAAhC;MACA;;MACA,KAAKC,gBAAL,GAAwBnO,YAAY,CAACoO,KAArC;;MACA,IAAI,CAACnJ,eAAD,KAAqB,OAAOvC,SAAP,KAAqB,WAArB,IAAoCA,SAAzD,CAAJ,EAAyE;QACrE,MAAMC,KAAK,CAAC,gFAAD,CAAX;MACH;;MACD,KAAKwL,gBAAL,GAAwBnB,aAAa,CAAC1B,MAAd,GAAuB5E,SAAvB,CAAiC,MAAM;QAC3D,KAAK2H,iBAAL;MACH,CAFuB,CAAxB;;MAGA,IAAI,CAAC,KAAK/H,UAAV,EAAsB;QAClB;QACA,KAAK2C,UAAL,CAAgBN,aAAhB,CAA8B2F,SAA9B,CAAwCC,GAAxC,CAA4C,wBAA5C;QACA,KAAKjI,UAAL,GAAkB,IAAlB;MACH;IACJ;IACD;;;IACe,IAAXwE,WAAW,GAAG;MACd,OAAO,KAAKqC,YAAZ;IACH;;IACc,IAAXrC,WAAW,CAACA,WAAD,EAAc;MACzB,IAAI,KAAKqC,YAAL,KAAsBrC,WAA1B,EAAuC;QACnC,KAAKqC,YAAL,GAAoBrC,WAApB;;QACA,KAAK0D,oBAAL;MACH;IACJ;IACD;AACJ;AACA;AACA;;;IACkB,IAAVC,UAAU,GAAG;MACb,OAAO,KAAKrB,WAAZ;IACH;;IACa,IAAVqB,UAAU,CAACtJ,KAAD,EAAQ;MAClB,KAAKiI,WAAL,GAAmB5O,qBAAqB,CAAC2G,KAAD,CAAxC;IACH;;IACDoE,QAAQ,GAAG;MACP;MACA,IAAI,CAAC,KAAK1D,SAAL,CAAeqB,SAApB,EAA+B;QAC3B;MACH;;MACD,IAAI,KAAKZ,UAAL,KAAoB,IAAxB,EAA8B;QAC1B,MAAMiD,QAAN;MACH,CAPM,CAQP;MACA;MACA;MACA;;;MACA,KAAKJ,MAAL,CAAYN,iBAAZ,CAA8B,MAAMwE,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;QAC7D,KAAKmB,oBAAL;;QACA,KAAKzJ,eAAL,CAAqB9C,MAArB,CAA4B,IAA5B;;QACA,KAAKmE,UAAL,CACKG,eADL,GAEK3E,IAFL,EAGA;QACAxB,SAAS,CAAC,IAAD,CAJT,EAKA;QACA;QACA;QACAH,SAAS,CAAC,CAAD,EAAIyM,gBAAJ,CART,EASKlG,SATL,CASe,MAAM,KAAKzB,eAAL,CAAqBrC,iBAArB,EATrB;;QAUA,KAAK+L,0BAAL;MACH,CAdmC,CAApC;IAeH;;IACDpH,WAAW,GAAG;MACV,KAAKhF,MAAL;;MACA,KAAK0C,eAAL,CAAqB1C,MAArB,GAFU,CAGV;;;MACA,KAAK2K,qBAAL,CAA2B1K,QAA3B;;MACA,KAAKyK,gBAAL,CAAsBzK,QAAtB;;MACA,KAAK2L,gBAAL,CAAsBrH,WAAtB;;MACA,MAAMS,WAAN;IACH;IACD;;;IACApF,MAAM,CAACyM,KAAD,EAAQ;MACV,IAAI,KAAKC,MAAL,KAAgB,OAAOnM,SAAP,KAAqB,WAArB,IAAoCA,SAApD,CAAJ,EAAoE;QAChE,MAAMC,KAAK,CAAC,+CAAD,CAAX;MACH,CAHS,CAIV;MACA;MACA;;;MACA,KAAKwG,MAAL,CAAYN,iBAAZ,CAA8B,MAAM;QAChC,KAAKgG,MAAL,GAAcD,KAAd;;QACA,KAAKC,MAAL,CAAYC,UAAZ,CAAuBhN,IAAvB,CAA4BzB,SAAS,CAAC,KAAK4M,gBAAN,CAArC,EAA8DvG,SAA9D,CAAwEqI,IAAI,IAAI;UAC5E,MAAMC,SAAS,GAAGD,IAAI,CAACE,MAAvB;;UACA,IAAID,SAAS,KAAK,KAAKlB,WAAvB,EAAoC;YAChC,KAAKA,WAAL,GAAmBkB,SAAnB;;YACA,KAAK/J,eAAL,CAAqBpC,mBAArB;UACH;;UACD,KAAKqM,kBAAL;QACH,CAPD;MAQH,CAVD;IAWH;IACD;;;IACA3M,MAAM,GAAG;MACL,KAAKsM,MAAL,GAAc,IAAd;;MACA,KAAK5B,gBAAL,CAAsBnI,IAAtB;IACH;IACD;;;IACAzB,aAAa,GAAG;MACZ,OAAO,KAAKyK,WAAZ;IACH;IACD;;;IACAlK,eAAe,GAAG;MACd,OAAO,KAAK2H,aAAZ;IACH,CAtJuD,CAuJxD;IACA;IACA;IACA;;IACA;;;IACAhI,gBAAgB,GAAG;MACf,OAAO,KAAKsK,cAAZ;IACH;;IACDsB,yCAAyC,CAAC5E,IAAD,EAAO;MAC5C,OAAO,KAAK7B,aAAL,GAAqBC,aAArB,CAAmCuD,qBAAnC,GAA2D3B,IAA3D,CAAP;IACH;IACD;AACJ;AACA;AACA;;;IACInH,mBAAmB,CAACgM,IAAD,EAAO;MACtB,IAAI,KAAK1B,iBAAL,KAA2B0B,IAA/B,EAAqC;QACjC,KAAK1B,iBAAL,GAAyB0B,IAAzB;;QACA,KAAKZ,oBAAL;;QACA,KAAKG,0BAAL;MACH;IACJ;IACD;;;IACA/J,gBAAgB,CAACyK,KAAD,EAAQ;MACpB,IAAI,CAAC5C,WAAW,CAAC,KAAKoB,cAAN,EAAsBwB,KAAtB,CAAhB,EAA8C;QAC1C,IAAI,KAAKZ,UAAT,EAAqB;UACjBY,KAAK,GAAG;YAAE5L,KAAK,EAAE,CAAT;YAAYC,GAAG,EAAEQ,IAAI,CAACG,GAAL,CAAS,KAAKwJ,cAAL,CAAoBnK,GAA7B,EAAkC2L,KAAK,CAAC3L,GAAxC;UAAjB,CAAR;QACH;;QACD,KAAKwJ,qBAAL,CAA2BpI,IAA3B,CAAiC,KAAK+I,cAAL,GAAsBwB,KAAvD;;QACA,KAAKV,0BAAL,CAAgC,MAAM,KAAK1J,eAAL,CAAqBnC,iBAArB,EAAtC;MACH;IACJ;IACD;AACJ;AACA;;;IACIwM,+BAA+B,GAAG;MAC9B,OAAO,KAAKtB,kCAAL,GAA0C,IAA1C,GAAiD,KAAKD,sBAA7D;IACH;IACD;AACJ;AACA;AACA;;;IACIlJ,wBAAwB,CAAC0K,MAAD,EAASC,EAAE,GAAG,UAAd,EAA0B;MAC9C;MACAD,MAAM,GAAG,KAAKd,UAAL,IAAmBe,EAAE,KAAK,UAA1B,GAAuC,CAAvC,GAA2CD,MAApD,CAF8C,CAG9C;MACA;;MACA,MAAM5F,KAAK,GAAG,KAAKP,GAAL,IAAY,KAAKA,GAAL,CAASjE,KAAT,IAAkB,KAA5C;MACA,MAAMsK,YAAY,GAAG,KAAK3E,WAAL,IAAoB,YAAzC;MACA,MAAM4E,IAAI,GAAGD,YAAY,GAAG,GAAH,GAAS,GAAlC;MACA,MAAME,aAAa,GAAGF,YAAY,IAAI9F,KAAhB,GAAwB,CAAC,CAAzB,GAA6B,CAAnD;MACA,IAAIiG,SAAS,GAAI,YAAWF,IAAK,IAAGG,MAAM,CAACF,aAAa,GAAGJ,MAAjB,CAAyB,KAAnE;MACA,KAAKxB,sBAAL,GAA8BwB,MAA9B;;MACA,IAAIC,EAAE,KAAK,QAAX,EAAqB;QACjBI,SAAS,IAAK,aAAYF,IAAK,SAA/B,CADiB,CAEjB;QACA;QACA;;QACA,KAAK1B,kCAAL,GAA0C,IAA1C;MACH;;MACD,IAAI,KAAK8B,yBAAL,IAAkCF,SAAtC,EAAiD;QAC7C;QACA;QACA,KAAKE,yBAAL,GAAiCF,SAAjC;;QACA,KAAKjB,0BAAL,CAAgC,MAAM;UAClC,IAAI,KAAKX,kCAAT,EAA6C;YACzC,KAAKD,sBAAL,IAA+B,KAAKgC,0BAAL,EAA/B;YACA,KAAK/B,kCAAL,GAA0C,KAA1C;YACA,KAAKnJ,wBAAL,CAA8B,KAAKkJ,sBAAnC;UACH,CAJD,MAKK;YACD,KAAK9I,eAAL,CAAqBlC,uBAArB;UACH;QACJ,CATD;MAUH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;IACII,cAAc,CAACoM,MAAD,EAASrM,QAAQ,GAAG,MAApB,EAA4B;MACtC,MAAMuG,OAAO,GAAG;QAAEvG;MAAF,CAAhB;;MACA,IAAI,KAAK4H,WAAL,KAAqB,YAAzB,EAAuC;QACnCrB,OAAO,CAAChG,KAAR,GAAgB8L,MAAhB;MACH,CAFD,MAGK;QACD9F,OAAO,CAACM,GAAR,GAAcwF,MAAd;MACH;;MACD,KAAKjJ,UAAL,CAAgBkD,QAAhB,CAAyBC,OAAzB;IACH;IACD;AACJ;AACA;AACA;AACA;;;IACIzG,aAAa,CAACC,KAAD,EAAQC,QAAQ,GAAG,MAAnB,EAA2B;MACpC,KAAK+B,eAAL,CAAqBjC,aAArB,CAAmCC,KAAnC,EAA0CC,QAA1C;IACH;IACD;AACJ;AACA;AACA;AACA;;;IACIa,mBAAmB,CAACwG,IAAD,EAAO;MACtB;MACA,IAAIxG,mBAAJ;;MACA,IAAI,KAAKuC,UAAL,IAAmB,IAAvB,EAA6B;QACzBvC,mBAAmB,GAAIiM,KAAD,IAAW,MAAMjM,mBAAN,CAA0BiM,KAA1B,CAAjC;MACH,CAFD,MAGK;QACDjM,mBAAmB,GAAIiM,KAAD,IAAW,KAAK1J,UAAL,CAAgBvC,mBAAhB,CAAoCiM,KAApC,CAAjC;MACH;;MACD,OAAO9L,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYN,mBAAmB,CAACwG,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA2C,KAAKO,WAAL,KAAqB,YAArB,GAAoC,OAApC,GAA8C,KAA1F,CAAnB,GACf,KAAKmF,qBAAL,EADG,CAAP;IAEH;IACD;AACJ;AACA;AACA;;;IACIA,qBAAqB,CAAC1F,IAAD,EAAO;MACxB,IAAI2F,EAAJ;;MACA,IAAIC,QAAJ;MACA,MAAM3F,IAAI,GAAG,MAAb;MACA,MAAMC,KAAK,GAAG,OAAd;MACA,MAAMd,KAAK,GAAG,CAAC,CAACuG,EAAE,GAAG,KAAK9G,GAAX,MAAoB,IAApB,IAA4B8G,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAAC/K,KAAzD,KAAmE,KAAjF;;MACA,IAAIoF,IAAI,IAAI,OAAZ,EAAqB;QACjB4F,QAAQ,GAAGxG,KAAK,GAAGc,KAAH,GAAWD,IAA3B;MACH,CAFD,MAGK,IAAID,IAAI,IAAI,KAAZ,EAAmB;QACpB4F,QAAQ,GAAGxG,KAAK,GAAGa,IAAH,GAAUC,KAA1B;MACH,CAFI,MAGA,IAAIF,IAAJ,EAAU;QACX4F,QAAQ,GAAG5F,IAAX;MACH,CAFI,MAGA;QACD4F,QAAQ,GAAG,KAAKrF,WAAL,KAAqB,YAArB,GAAoC,MAApC,GAA6C,KAAxD;MACH;;MACD,MAAMsF,kBAAkB,GAAG,KAAK9J,UAAL,CAAgB6I,yCAAhB,CAA0DgB,QAA1D,CAA3B;MACA,MAAME,kBAAkB,GAAG,KAAKpH,UAAL,CAAgBN,aAAhB,CAA8BuD,qBAA9B,GAAsDiE,QAAtD,CAA3B;MACA,OAAOE,kBAAkB,GAAGD,kBAA5B;IACH;IACD;;;IACAL,0BAA0B,GAAG;MACzB,MAAMO,SAAS,GAAG,KAAKC,eAAL,CAAqB5H,aAAvC;MACA,OAAO,KAAKmC,WAAL,KAAqB,YAArB,GAAoCwF,SAAS,CAACE,WAA9C,GAA4DF,SAAS,CAACG,YAA7E;IACH;IACD;AACJ;AACA;AACA;;;IACIC,gBAAgB,CAACrB,KAAD,EAAQ;MACpB,IAAI,CAAC,KAAKR,MAAV,EAAkB;QACd,OAAO,CAAP;MACH;;MACD,OAAO,KAAKA,MAAL,CAAY6B,gBAAZ,CAA6BrB,KAA7B,EAAoC,KAAKvE,WAAzC,CAAP;IACH;IACD;;;IACAuD,iBAAiB,GAAG;MAChB;MACA,KAAKK,oBAAL;;MACA,KAAKzJ,eAAL,CAAqBpC,mBAArB;IACH;IACD;;;IACA6L,oBAAoB,GAAG;MACnB,KAAKnD,aAAL,GAAqB,KAAKjF,UAAL,CAAgBuE,mBAAhB,CAAoC,KAAKC,WAAzC,CAArB;IACH;IACD;;;IACA6D,0BAA0B,CAACgC,QAAD,EAAW;MACjC,IAAIA,QAAJ,EAAc;QACV,KAAKzC,wBAAL,CAA8B9F,IAA9B,CAAmCuI,QAAnC;MACH,CAHgC,CAIjC;MACA;;;MACA,IAAI,CAAC,KAAK1C,yBAAV,EAAqC;QACjC,KAAKA,yBAAL,GAAiC,IAAjC;QACA,KAAK9E,MAAL,CAAYN,iBAAZ,CAA8B,MAAMwE,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;UAC7D,KAAK2B,kBAAL;QACH,CAFmC,CAApC;MAGH;IACJ;IACD;;;IACAA,kBAAkB,GAAG;MACjB,KAAKjB,yBAAL,GAAiC,KAAjC,CADiB,CAEjB;MACA;MACA;MACA;;MACA,KAAKsC,eAAL,CAAqB5H,aAArB,CAAmCiI,KAAnC,CAAyChB,SAAzC,GAAqD,KAAKE,yBAA1D,CANiB,CAOjB;MACA;MACA;;MACA,KAAK3G,MAAL,CAAYqE,GAAZ,CAAgB,MAAM,KAAKT,kBAAL,CAAwB8D,YAAxB,EAAtB;MACA,MAAMC,uBAAuB,GAAG,KAAK5C,wBAArC;MACA,KAAKA,wBAAL,GAAgC,EAAhC;;MACA,KAAK,MAAM6C,EAAX,IAAiBD,uBAAjB,EAA0C;QACtCC,EAAE;MACL;IACJ;IACD;;;IACAvC,oBAAoB,GAAG;MACnB,KAAKZ,mBAAL,GACI,KAAK9C,WAAL,KAAqB,YAArB,GAAoC,EAApC,GAA0C,GAAE,KAAK4C,iBAAkB,IADvE;MAEA,KAAKC,kBAAL,GACI,KAAK7C,WAAL,KAAqB,YAArB,GAAqC,GAAE,KAAK4C,iBAAkB,IAA9D,GAAoE,EADxE;IAEH;;EAtWuD;;EAwW5DZ,wBAAwB,CAACzH,IAAzB;IAAA,iBAAqHyH,wBAArH,EAh3B4GrO,EAg3B5G,mBAA+JA,EAAE,CAACe,UAAlK,GAh3B4Gf,EAg3B5G,mBAAyLA,EAAE,CAACuS,iBAA5L,GAh3B4GvS,EAg3B5G,mBAA0NA,EAAE,CAACqK,MAA7N,GAh3B4GrK,EAg3B5G,mBAAgP6C,uBAAhP,MAh3B4G7C,EAg3B5G,mBAAoSsC,EAAE,CAAC2J,cAAvS,MAh3B4GjM,EAg3B5G,mBAAkVkH,gBAAlV,GAh3B4GlH,EAg3B5G,mBAA+WwM,aAA/W,GAh3B4GxM,EAg3B5G,mBAAyYkM,kBAAzY;EAAA;;EACAmC,wBAAwB,CAACmE,IAAzB,kBAj3B4GxS,EAi3B5G;IAAA,MAAyGqO,wBAAzG;IAAA;IAAA;MAAA;QAj3B4GrO,EAi3B5G;MAAA;;MAAA;QAAA;;QAj3B4GA,EAi3B5G,qBAj3B4GA,EAi3B5G;MAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAj3B4GA,EAi3B5G;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA,WAj3B4GA,EAi3B5G,oBAAmiB,CAC3hB;MACI8G,OAAO,EAAEyD,aADb;MAEIxD,UAAU,EAAE,CAAC0L,iBAAD,EAAoB9O,QAApB,KAAiC8O,iBAAiB,IAAI9O,QAFtE;MAGIqD,IAAI,EAAE,CAAC,CAAC,IAAI1G,QAAJ,EAAD,EAAiB,IAAIC,MAAJ,CAAW2L,kBAAX,CAAjB,CAAD,EAAmDmC,wBAAnD;IAHV,CAD2hB,CAAniB,GAj3B4GrO,EAi3B5G;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAj3B4GA,EAi3B5G;QAj3B4GA,EAu3BkM,+BAN9S;QAj3B4GA,EAu3BwQ,gBANpX;QAj3B4GA,EAu3BmS,eAN/Y;QAj3B4GA,EAu3B6d,uBANzkB;MAAA;;MAAA;QAj3B4GA,EAu3B4gB,aANxnB;QAj3B4GA,EAu3B4gB,gFANxnB;MAAA;IAAA;IAAA;IAAA;IAAA;EAAA;SAzWMqO,wB;;;AAgXN;AAAA;EAAA;AAAA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASqE,SAAT,CAAmBrG,WAAnB,EAAgCsG,SAAhC,EAA2CC,IAA3C,EAAiD;EAC7C,MAAM3H,EAAE,GAAG2H,IAAX;;EACA,IAAI,CAAC3H,EAAE,CAACwC,qBAAR,EAA+B;IAC3B,OAAO,CAAP;EACH;;EACD,MAAMoF,IAAI,GAAG5H,EAAE,CAACwC,qBAAH,EAAb;;EACA,IAAIpB,WAAW,KAAK,YAApB,EAAkC;IAC9B,OAAOsG,SAAS,KAAK,OAAd,GAAwBE,IAAI,CAAC1H,IAA7B,GAAoC0H,IAAI,CAACzH,KAAhD;EACH;;EACD,OAAOuH,SAAS,KAAK,OAAd,GAAwBE,IAAI,CAACvH,GAA7B,GAAmCuH,IAAI,CAACxH,MAA/C;AACH;AACD;AACA;AACA;AACA;;;IACMyH,e;EAAN,MAAMA,eAAN,CAAsB;IAClB/P,WAAW;IACX;IACAgQ,iBAFW;IAGX;IACAC,SAJW;IAKX;IACAC,QANW;IAOX;IACAC,aARW;IASX;IACA5P,SAVW,EAUAoH,MAVA,EAUQ;MACf,KAAKqI,iBAAL,GAAyBA,iBAAzB;MACA,KAAKC,SAAL,GAAiBA,SAAjB;MACA,KAAKC,QAAL,GAAgBA,QAAhB;MACA,KAAKC,aAAL,GAAqBA,aAArB;MACA,KAAK5P,SAAL,GAAiBA,SAAjB;MACA;;MACA,KAAK6P,UAAL,GAAkB,IAAIlS,OAAJ,EAAlB;MACA;;MACA,KAAKmS,kBAAL,GAA0B,IAAInS,OAAJ,EAA1B;MACA;;MACA,KAAKoP,UAAL,GAAkB,KAAK+C,kBAAL,CAAwB/P,IAAxB,EAClB;MACAxB,SAAS,CAAC,IAAD,CAFS,EAGlB;MACAC,QAAQ,EAJU,EAKlB;MACA;MACA;MACAC,SAAS,CAAC,CAAC,CAACsR,IAAD,EAAOC,GAAP,CAAD,KAAiB,KAAKC,iBAAL,CAAuBF,IAAvB,EAA6BC,GAA7B,CAAlB,CARS,EASlB;MACAtR,WAAW,CAAC,CAAD,CAVO,CAAlB;MAWA;;MACA,KAAKwR,OAAL,GAAe,IAAf;MACA;;MACA,KAAKC,YAAL,GAAoB,KAApB;MACA,KAAK7I,UAAL,GAAkB,IAAI3J,OAAJ,EAAlB;MACA,KAAKoP,UAAL,CAAgBpI,SAAhB,CAA0BqI,IAAI,IAAI;QAC9B,KAAKoD,KAAL,GAAapD,IAAb;;QACA,KAAKqD,qBAAL;MACH,CAHD;;MAIA,KAAKrQ,SAAL,CAAe0L,mBAAf,CAAmC3L,IAAnC,CAAwCzB,SAAS,CAAC,KAAKgJ,UAAN,CAAjD,EAAoE3C,SAApE,CAA8E2I,KAAK,IAAI;QACnF,KAAKxB,cAAL,GAAsBwB,KAAtB;;QACA,IAAI,KAAKuC,UAAL,CAAgBS,SAAhB,CAA0BpD,MAA9B,EAAsC;UAClC9F,MAAM,CAACqE,GAAP,CAAW,MAAM,KAAKoE,UAAL,CAAgB9M,IAAhB,CAAqB,KAAK+I,cAA1B,CAAjB;QACH;;QACD,KAAKuE,qBAAL;MACH,CAND;;MAOA,KAAKrQ,SAAL,CAAeI,MAAf,CAAsB,IAAtB;IACH;IACD;;;IACmB,IAAfmQ,eAAe,GAAG;MAClB,OAAO,KAAKC,gBAAZ;IACH;;IACkB,IAAfD,eAAe,CAACnN,KAAD,EAAQ;MACvB,KAAKoN,gBAAL,GAAwBpN,KAAxB;;MACA,IAAIjE,YAAY,CAACiE,KAAD,CAAhB,EAAyB;QACrB,KAAK0M,kBAAL,CAAwB/M,IAAxB,CAA6BK,KAA7B;MACH,CAFD,MAGK;QACD;QACA,KAAK0M,kBAAL,CAAwB/M,IAAxB,CAA6B,IAAI3D,eAAJ,CAAoBlB,YAAY,CAACkF,KAAD,CAAZ,GAAsBA,KAAtB,GAA8BqN,KAAK,CAACjI,IAAN,CAAWpF,KAAK,IAAI,EAApB,CAAlD,CAA7B;MACH;IACJ;IACD;AACJ;AACA;AACA;;;IAC4B,IAApBsN,oBAAoB,GAAG;MACvB,OAAO,KAAKC,qBAAZ;IACH;;IACuB,IAApBD,oBAAoB,CAAC1B,EAAD,EAAK;MACzB,KAAKmB,YAAL,GAAoB,IAApB;MACA,KAAKQ,qBAAL,GAA6B3B,EAAE,GACzB,CAAC9N,KAAD,EAAQ0P,IAAR,KAAiB5B,EAAE,CAAC9N,KAAK,IAAI,KAAK4K,cAAL,GAAsB,KAAKA,cAAL,CAAoBpK,KAA1C,GAAkD,CAAtD,CAAN,EAAgEkP,IAAhE,CADM,GAEzBC,SAFN;IAGH;IACD;;;IACyB,IAArBC,qBAAqB,CAAC1N,KAAD,EAAQ;MAC7B,IAAIA,KAAJ,EAAW;QACP,KAAK+M,YAAL,GAAoB,IAApB;QACA,KAAKT,SAAL,GAAiBtM,KAAjB;MACH;IACJ;IACD;AACJ;AACA;AACA;;;IACsC,IAA9B2N,8BAA8B,GAAG;MACjC,OAAO,KAAKnB,aAAL,CAAmBoB,aAA1B;IACH;;IACiC,IAA9BD,8BAA8B,CAAC1D,IAAD,EAAO;MACrC,KAAKuC,aAAL,CAAmBoB,aAAnB,GAAmCzU,oBAAoB,CAAC8Q,IAAD,CAAvD;IACH;IACD;AACJ;AACA;AACA;AACA;;;IACIsB,gBAAgB,CAACrB,KAAD,EAAQvE,WAAR,EAAqB;MACjC,IAAIuE,KAAK,CAAC5L,KAAN,IAAe4L,KAAK,CAAC3L,GAAzB,EAA8B;QAC1B,OAAO,CAAP;MACH;;MACD,IAAI,CAAC2L,KAAK,CAAC5L,KAAN,GAAc,KAAKoK,cAAL,CAAoBpK,KAAlC,IAA2C4L,KAAK,CAAC3L,GAAN,GAAY,KAAKmK,cAAL,CAAoBnK,GAA5E,MACC,OAAOhB,SAAP,KAAqB,WAArB,IAAoCA,SADrC,CAAJ,EACqD;QACjD,MAAMC,KAAK,CAAE,0DAAF,CAAX;MACH,CAPgC,CAQjC;;;MACA,MAAMqQ,kBAAkB,GAAG3D,KAAK,CAAC5L,KAAN,GAAc,KAAKoK,cAAL,CAAoBpK,KAA7D,CATiC,CAUjC;;MACA,MAAMwP,QAAQ,GAAG5D,KAAK,CAAC3L,GAAN,GAAY2L,KAAK,CAAC5L,KAAnC,CAXiC,CAYjC;MACA;;MACA,IAAIyP,SAAJ;MACA,IAAIC,QAAJ,CAfiC,CAgBjC;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAApB,EAA8BG,CAAC,EAA/B,EAAmC;QAC/B,MAAMC,IAAI,GAAG,KAAK7B,iBAAL,CAAuB3K,GAAvB,CAA2BuM,CAAC,GAAGJ,kBAA/B,CAAb;;QACA,IAAIK,IAAI,IAAIA,IAAI,CAACC,SAAL,CAAerE,MAA3B,EAAmC;UAC/BiE,SAAS,GAAGC,QAAQ,GAAGE,IAAI,CAACC,SAAL,CAAe,CAAf,CAAvB;UACA;QACH;MACJ,CAvBgC,CAwBjC;;;MACA,KAAK,IAAIF,CAAC,GAAGH,QAAQ,GAAG,CAAxB,EAA2BG,CAAC,GAAG,CAAC,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;QACpC,MAAMC,IAAI,GAAG,KAAK7B,iBAAL,CAAuB3K,GAAvB,CAA2BuM,CAAC,GAAGJ,kBAA/B,CAAb;;QACA,IAAIK,IAAI,IAAIA,IAAI,CAACC,SAAL,CAAerE,MAA3B,EAAmC;UAC/BkE,QAAQ,GAAGE,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACC,SAAL,CAAerE,MAAf,GAAwB,CAAvC,CAAX;UACA;QACH;MACJ;;MACD,OAAOiE,SAAS,IAAIC,QAAb,GACDhC,SAAS,CAACrG,WAAD,EAAc,KAAd,EAAqBqI,QAArB,CAAT,GAA0ChC,SAAS,CAACrG,WAAD,EAAc,OAAd,EAAuBoI,SAAvB,CADlD,GAED,CAFN;IAGH;;IACDK,SAAS,GAAG;MACR,IAAI,KAAKtB,OAAL,IAAgB,KAAKC,YAAzB,EAAuC;QACnC;QACA;QACA;QACA,MAAMsB,OAAO,GAAG,KAAKvB,OAAL,CAAawB,IAAb,CAAkB,KAAKC,cAAvB,CAAhB;;QACA,IAAI,CAACF,OAAL,EAAc;UACV,KAAKG,cAAL;QACH,CAFD,MAGK;UACD,KAAKC,aAAL,CAAmBJ,OAAnB;QACH;;QACD,KAAKtB,YAAL,GAAoB,KAApB;MACH;IACJ;;IACD3K,WAAW,GAAG;MACV,KAAKxF,SAAL,CAAeQ,MAAf;;MACA,KAAKsP,kBAAL,CAAwB/M,IAAxB,CAA6B8N,SAA7B;;MACA,KAAKf,kBAAL,CAAwBrP,QAAxB;;MACA,KAAKoP,UAAL,CAAgBpP,QAAhB;;MACA,KAAK6G,UAAL,CAAgBvE,IAAhB;;MACA,KAAKuE,UAAL,CAAgB7G,QAAhB;;MACA,KAAKmP,aAAL,CAAmBpP,MAAnB;IACH;IACD;;;IACA6P,qBAAqB,GAAG;MACpB,IAAI,CAAC,KAAKvE,cAAV,EAA0B;QACtB;MACH;;MACD,KAAK6F,cAAL,GAAsB,KAAKvB,KAAL,CAAW0B,KAAX,CAAiB,KAAKhG,cAAL,CAAoBpK,KAArC,EAA4C,KAAKoK,cAAL,CAAoBnK,GAAhE,CAAtB;;MACA,IAAI,CAAC,KAAKuO,OAAV,EAAmB;QACf;QACA;QACA,KAAKA,OAAL,GAAe,KAAKP,QAAL,CAAcoC,IAAd,CAAmB,KAAKJ,cAAxB,EAAwCK,MAAxC,CAA+C,CAAC9Q,KAAD,EAAQ0P,IAAR,KAAiB;UAC3E,OAAO,KAAKF,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BxP,KAA1B,EAAiC0P,IAAjC,CAA5B,GAAqEA,IAA5E;QACH,CAFc,CAAf;MAGH;;MACD,KAAKT,YAAL,GAAoB,IAApB;IACH;IACD;;;IACAF,iBAAiB,CAACgC,KAAD,EAAQC,KAAR,EAAe;MAC5B,IAAID,KAAJ,EAAW;QACPA,KAAK,CAACE,UAAN,CAAiB,IAAjB;MACH;;MACD,KAAKhC,YAAL,GAAoB,IAApB;MACA,OAAO+B,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,IAAd,CAAH,GAAyBxU,EAAE,EAAvC;IACH;IACD;;;IACAgU,cAAc,GAAG;MACb,MAAMS,KAAK,GAAG,KAAKjC,KAAL,CAAWlD,MAAzB;MACA,IAAImE,CAAC,GAAG,KAAK5B,iBAAL,CAAuBvC,MAA/B;;MACA,OAAOmE,CAAC,EAAR,EAAY;QACR,MAAMC,IAAI,GAAG,KAAK7B,iBAAL,CAAuB3K,GAAvB,CAA2BuM,CAA3B,CAAb;;QACAC,IAAI,CAACgB,OAAL,CAAapR,KAAb,GAAqB,KAAK4K,cAAL,CAAoBpK,KAApB,GAA4B2P,CAAjD;QACAC,IAAI,CAACgB,OAAL,CAAaD,KAAb,GAAqBA,KAArB;;QACA,KAAKE,gCAAL,CAAsCjB,IAAI,CAACgB,OAA3C;;QACAhB,IAAI,CAACkB,aAAL;MACH;IACJ;IACD;;;IACAX,aAAa,CAACJ,OAAD,EAAU;MACnB,KAAK7B,aAAL,CAAmB6C,YAAnB,CAAgChB,OAAhC,EAAyC,KAAKhC,iBAA9C,EAAiE,CAACiD,MAAD,EAASC,sBAAT,EAAiCC,YAAjC,KAAkD,KAAKC,oBAAL,CAA0BH,MAA1B,EAAkCE,YAAlC,CAAnH,EAAoKF,MAAM,IAAIA,MAAM,CAAC9B,IAArL,EADmB,CAEnB;;;MACAa,OAAO,CAACqB,qBAAR,CAA+BJ,MAAD,IAAY;QACtC,MAAMpB,IAAI,GAAG,KAAK7B,iBAAL,CAAuB3K,GAAvB,CAA2B4N,MAAM,CAACE,YAAlC,CAAb;;QACAtB,IAAI,CAACgB,OAAL,CAAaS,SAAb,GAAyBL,MAAM,CAAC9B,IAAhC;MACH,CAHD,EAHmB,CAOnB;;MACA,MAAMyB,KAAK,GAAG,KAAKjC,KAAL,CAAWlD,MAAzB;MACA,IAAImE,CAAC,GAAG,KAAK5B,iBAAL,CAAuBvC,MAA/B;;MACA,OAAOmE,CAAC,EAAR,EAAY;QACR,MAAMC,IAAI,GAAG,KAAK7B,iBAAL,CAAuB3K,GAAvB,CAA2BuM,CAA3B,CAAb;;QACAC,IAAI,CAACgB,OAAL,CAAapR,KAAb,GAAqB,KAAK4K,cAAL,CAAoBpK,KAApB,GAA4B2P,CAAjD;QACAC,IAAI,CAACgB,OAAL,CAAaD,KAAb,GAAqBA,KAArB;;QACA,KAAKE,gCAAL,CAAsCjB,IAAI,CAACgB,OAA3C;MACH;IACJ;IACD;;;IACAC,gCAAgC,CAACD,OAAD,EAAU;MACtCA,OAAO,CAACU,KAAR,GAAgBV,OAAO,CAACpR,KAAR,KAAkB,CAAlC;MACAoR,OAAO,CAACW,IAAR,GAAeX,OAAO,CAACpR,KAAR,KAAkBoR,OAAO,CAACD,KAAR,GAAgB,CAAjD;MACAC,OAAO,CAACY,IAAR,GAAeZ,OAAO,CAACpR,KAAR,GAAgB,CAAhB,KAAsB,CAArC;MACAoR,OAAO,CAACa,GAAR,GAAc,CAACb,OAAO,CAACY,IAAvB;IACH;;IACDL,oBAAoB,CAACH,MAAD,EAASxR,KAAT,EAAgB;MAChC;MACA;MACA;MACA;MACA,OAAO;QACHkS,WAAW,EAAE,KAAK1D,SADf;QAEH4C,OAAO,EAAE;UACLS,SAAS,EAAEL,MAAM,CAAC9B,IADb;UAEL;UACA;UACAL,eAAe,EAAE,KAAKC,gBAJjB;UAKLtP,KAAK,EAAE,CAAC,CALH;UAMLmR,KAAK,EAAE,CAAC,CANH;UAOLW,KAAK,EAAE,KAPF;UAQLC,IAAI,EAAE,KARD;UASLE,GAAG,EAAE,KATA;UAULD,IAAI,EAAE;QAVD,CAFN;QAcHhS;MAdG,CAAP;IAgBH;;EAjPiB;;EAmPtBsO,eAAe,CAAClM,IAAhB;IAAA,iBAA4GkM,eAA5G,EAxqC4G9S,EAwqC5G,mBAA6IA,EAAE,CAAC2W,gBAAhJ,GAxqC4G3W,EAwqC5G,mBAA6KA,EAAE,CAAC4W,WAAhL,GAxqC4G5W,EAwqC5G,mBAAwMA,EAAE,CAAC6W,eAA3M,GAxqC4G7W,EAwqC5G,mBAAuO2C,uBAAvO,GAxqC4G3C,EAwqC5G,mBAA2QqO,wBAA3Q,MAxqC4GrO,EAwqC5G,mBAAgUA,EAAE,CAACqK,MAAnU;EAAA;;EACAyI,eAAe,CAACjM,IAAhB,kBAzqC4G7G,EAyqC5G;IAAA,MAAgG8S,eAAhG;IAAA;IAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAA,WAzqC4G9S,EAyqC5G,oBAA0X,CAAC;MAAE8G,OAAO,EAAEnE,uBAAX;MAAoCmU,QAAQ,EAAElU;IAA9C,CAAD,CAA1X;EAAA;SApPMkQ,e;;;AAqPN;AAAA;EAAA;AAAA;AAuBA;AACA;AACA;;;IACMiE,2B;EAAN,MAAMA,2BAAN,SAA0C5K,oBAA1C,CAA+D;IAC3DpJ,WAAW,CAACyH,UAAD,EAAaC,gBAAb,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;MACnD,MAAMH,UAAN,EAAkBC,gBAAlB,EAAoCC,MAApC,EAA4CC,GAA5C;IACH;;IACD+F,yCAAyC,CAAC5E,IAAD,EAAO;MAC5C,OAAQ,KAAK7B,aAAL,GAAqBC,aAArB,CAAmCuD,qBAAnC,GAA2D3B,IAA3D,IACJ,KAAKxG,mBAAL,CAAyBwG,IAAzB,CADJ;IAEH;;EAP0D;;EAS/DiL,2BAA2B,CAACnQ,IAA5B;IAAA,iBAAwHmQ,2BAAxH,EA7sC4G/W,EA6sC5G,mBAAqKA,EAAE,CAACe,UAAxK,GA7sC4Gf,EA6sC5G,mBAA+LkH,gBAA/L,GA7sC4GlH,EA6sC5G,mBAA4NA,EAAE,CAACqK,MAA/N,GA7sC4GrK,EA6sC5G,mBAAkPsC,EAAE,CAAC2J,cAArP;EAAA;;EACA8K,2BAA2B,CAAClQ,IAA5B,kBA9sC4G7G,EA8sC5G;IAAA,MAA4G+W,2BAA5G;IAAA;IAAA;IAAA,WA9sC4G/W,EA8sC5G,oBAAkP,CAAC;MAAE8G,OAAO,EAAEoF,kBAAX;MAA+B8K,WAAW,EAAED;IAA5C,CAAD,CAAlP,GA9sC4G/W,EA8sC5G;EAAA;SAVM+W,2B;;;AAWN;AAAA;EAAA;AAAA;AAeA;AACA;AACA;;;IACME,0B;EAAN,MAAMA,0BAAN,SAAyC9K,oBAAzC,CAA8D;IAC1DpJ,WAAW,CAAC0H,gBAAD,EAAmBC,MAAnB,EAA2BC,GAA3B,EAAgC;MACvC,MAAM,IAAI5J,UAAJ,CAAesG,QAAQ,CAACkG,eAAxB,CAAN,EAAgD9C,gBAAhD,EAAkEC,MAAlE,EAA0EC,GAA1E;MACA,KAAKE,gBAAL,GAAwB,IAAI1J,UAAJ,CAAgBuH,QAAD,IAAc,KAAKgC,MAAL,CAAYN,iBAAZ,CAA8B,MAAMhJ,SAAS,CAACiG,QAAD,EAAW,QAAX,CAAT,CAA8BhE,IAA9B,CAAmCzB,SAAS,CAAC,KAAKgJ,UAAN,CAA5C,EAA+D3C,SAA/D,CAAyES,QAAzE,CAApC,CAA7B,CAAxB;IACH;;IACDgI,yCAAyC,CAAC5E,IAAD,EAAO;MAC5C,OAAO,KAAK7B,aAAL,GAAqBC,aAArB,CAAmCuD,qBAAnC,GAA2D3B,IAA3D,CAAP;IACH;;EAPyD;;EAS9DmL,0BAA0B,CAACrQ,IAA3B;IAAA,iBAAuHqQ,0BAAvH,EA1uC4GjX,EA0uC5G,mBAAmKkH,gBAAnK,GA1uC4GlH,EA0uC5G,mBAAgMA,EAAE,CAACqK,MAAnM,GA1uC4GrK,EA0uC5G,mBAAsNsC,EAAE,CAAC2J,cAAzN;EAAA;;EACAgL,0BAA0B,CAACpQ,IAA3B,kBA3uC4G7G,EA2uC5G;IAAA,MAA2GiX,0BAA3G;IAAA;IAAA,WA3uC4GjX,EA2uC5G,oBAAyM,CAAC;MAAE8G,OAAO,EAAEoF,kBAAX;MAA+B8K,WAAW,EAAEC;IAA5C,CAAD,CAAzM,GA3uC4GjX,EA2uC5G;EAAA;SAVMiX,0B;;;AAWN;AAAA;EAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMC,mB;EAAN,MAAMA,mBAAN,CAA0B;;EAE1BA,mBAAmB,CAACtQ,IAApB;IAAA,iBAAgHsQ,mBAAhH;EAAA;;EACAA,mBAAmB,CAACC,IAApB,kBAlwC4GnX,EAkwC5G;IAAA,MAAiHkX;EAAjH;EACAA,mBAAmB,CAACE,IAApB,kBAnwC4GpX,EAmwC5G;SAJMkX,mB;;;AAKN;AAAA;EAAA;AAAA;AAOA;AACA;AACA;;;IACMG,e;EAAN,MAAMA,eAAN,CAAsB;;EAEtBA,eAAe,CAACzQ,IAAhB;IAAA,iBAA4GyQ,eAA5G;EAAA;;EACAA,eAAe,CAACF,IAAhB,kBAjxC4GnX,EAixC5G;IAAA,MAA6GqX;EAA7G;EASAA,eAAe,CAACD,IAAhB,kBA1xC4GpX,EA0xC5G;IAAA,UAAwIuC,UAAxI,EAAoJ2U,mBAApJ,EAAyK3U,UAAzK,EAAqL2U,mBAArL;EAAA;SAZMG,e;;;AAaN;AAAA;EAAA;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS5Q,yBAAT,EAAoC8D,aAApC,EAAmD2M,mBAAnD,EAAwEpE,eAAxE,EAAyFzE,wBAAzF,EAAmHlC,oBAAnH,EAAyI4K,2BAAzI,EAAsKE,0BAAtK,EAAkM1K,mBAAlM,EAAuNtF,mBAAvN,EAA4OnE,8BAA5O,EAA4QoE,gBAA5Q,EAA8RmQ,eAA9R,EAA+SnL,kBAA/S,EAAmUrJ,uBAAnU,EAA4V2J,aAA5V,EAA2WlG,sCAA3W","ignoreList":[]},"metadata":{},"sourceType":"module"}