{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { selectAllTodos$, Task, taskActions } from 'store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction HomeComponent_div_7_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵtext(1, \"completed\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"innerText\", task_r1.completed);\n  }\n}\n\nfunction HomeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 5)(2, \"span\", 6);\n    i0.ɵɵtext(3, \"text\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, HomeComponent_div_7_span_4_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementStart(5, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function HomeComponent_div_7_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.removeTask(task_r1.id));\n    });\n    i0.ɵɵtext(6, \" \\u274C \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function HomeComponent_div_7_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateTask());\n    });\n    i0.ɵɵtext(8, \" \\uD83D\\uDD8A \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function HomeComponent_div_7_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const task_r1 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.okUpdateTask(task_r1.id));\n    })(\"input\", function HomeComponent_div_7_Template_button_input_9_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.updateTaskText($event));\n    });\n    i0.ɵɵtext(10, \"\\u2705\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \" \\u2714\\uD83D\\uDD8B\\n\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerText\", task_r1.text);\n    i0.ɵɵattribute(\"contenteditable\", ctx_r0.editable);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", task_r1.completed);\n  }\n}\n\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor(store) {\n      this.store = store;\n      this.tasks$ = this.store.select(selectAllTodos$).pipe();\n      this.id = 0;\n      this.completed = true;\n      this.editable = false;\n      this.newText = '';\n    }\n\n    ngOnInit() {\n      this.initForm();\n      this.store.dispatch(taskActions.loadTasks());\n    }\n\n    addTask() {\n      this.id++;\n      this.completed = !this.completed;\n      console.log(this.form);\n      let task = {\n        id: this.id,\n        text: this.form.controls.taskValue.value\n      };\n      this.store.dispatch(taskActions.addTask({\n        task\n      }));\n      this.initForm();\n    }\n\n    removeTask(id) {\n      this.store.dispatch(taskActions.removeTask({\n        id\n      }));\n    }\n\n    updateTask() {\n      this.editable = true;\n    }\n\n    updateTaskText(event) {\n      const target = event.target;\n      this.newText = target.innerText;\n    }\n\n    okUpdateTask(id) {\n      this.editable = false;\n      this.store.dispatch(taskActions.updateTask({\n        id,\n        newText: this.form.controls.taskValue.value\n      }));\n    }\n\n    initForm() {\n      this.form = new FormGroup({\n        taskValue: new FormControl(''),\n        completed: new FormControl('')\n      });\n    }\n\n  }\n\n  HomeComponent.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n\n  HomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 9,\n    vars: 4,\n    consts: [[3, \"formGroup\"], [\"type\", \"text\", \"formControlName\", \"taskValue\", \"placeholder\", \"Enter your task\"], [\"type\", \"text\", \"formControlName\", \"completed\", \"placeholder\", \"Enter if you completed\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [1, \"border\", \"border-primary\", \"rounded\", \"p-3\"], [3, \"innerText\"], [3, \"innerText\", 4, \"ngIf\"], [1, \"text-danger\", 3, \"click\"], [3, \"click\", \"input\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"home works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵelement(3, \"input\", 1)(4, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_5_listener() {\n          return ctx.addTask();\n        });\n        i0.ɵɵtext(6, \"ADD\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, HomeComponent_div_7_Template, 12, 3, \"div\", 4);\n        i0.ɵɵpipe(8, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 2, ctx.tasks$));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i2.AsyncPipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5zY3NzIn0= */\"]\n  });\n  return HomeComponent;\n})();","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Observable","selectAllTodos$","Task","taskActions","i0","HomeComponent","constructor","store","select","pipe","ngOnInit","initForm","dispatch","loadTasks","addTask","id","completed","console","log","form","task","text","controls","taskValue","value","removeTask","updateTask","editable","updateTaskText","event","target","newText","innerText","okUpdateTask","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\src\\app\\pages\\home\\home.component.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\src\\app\\pages\\home\\home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { map, Observable, tap } from 'rxjs';\nimport { selectAllTodos$, Task, taskActions, TodoState} from 'store';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n tasks$ : Observable< any>=this.store.select(selectAllTodos$).pipe( );\n\n  id: number=0;\n  completed: boolean = true;\n  form: FormGroup;\n  editable: boolean=false;\n  newText: string ='';\n\n  constructor(private store:Store) { }\n\n\n\n  ngOnInit() { \n    this.initForm()\n    this.store.dispatch(taskActions.loadTasks());\n  }\n\naddTask(){\n  this.id++\n  this.completed=!this.completed\n  console.log(this.form);\n  \n  let task :Task={id:this.id,text:this.form.controls.taskValue.value}\n    \n  this.store.dispatch(taskActions.addTask({task}))\n  this.initForm()\n}\n\nremoveTask(id:number){\n  this.store.dispatch(taskActions.removeTask({id}))\n\n}\nupdateTask(){\nthis.editable=true;\n\n}\n\n\n\nupdateTaskText(event:Event){\n  const target = event.target as HTMLElement;\n    this.newText = target.innerText;\n}\n\nokUpdateTask(id:number){\n  this.editable=false;\n    this.store.dispatch(taskActions.updateTask({id , newText:this.form.controls.taskValue.value }))\n\n}\n\ninitForm(){\nthis.form=new FormGroup({  \n  taskValue : new FormControl(''),\n  completed : new FormControl('')\n})\n}\n}\n","<p>home works!</p>\n     <form [formGroup]=\"form\">\n<input type=\"text\" formControlName=\"taskValue\" placeholder=\"Enter your task\">\n<input type=\"text\" formControlName=\"completed\" placeholder=\"Enter if you completed\">\n </form>\n<button (click)=\"addTask()\">ADD</button>\n<div *ngFor=\"let task of tasks$ | async\">\n    <!-- <span [innerText]=\"task.id\">ID</span> -->\n    <div class=\"border border-primary rounded p-3\">\n        <span  [attr.contenteditable]=\"editable\" [innerText]=\"task.text\">text</span>\n    <span [innerText]=\"task.completed\" *ngIf=\"task.completed\">completed</span>\n    <button (click)=\"removeTask(task.id)\" class=\"text-danger\">    ❌ </button>\n    <button (click)=\"updateTask()\" > 🖊 </button>\n    <button (click)=\"okUpdateTask(task.id)\"  (input)=\"updateTaskText($event)\">✅</button>\n    \n✔🖋\n</div>\n\n</div>\n"]},"metadata":{},"sourceType":"module"}