{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport * as i1$1 from '@ngrx/store';\nimport { createAction, props, StoreModule, createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType, EffectsModule } from '@ngrx/effects';\nimport { tap, map } from 'rxjs/operators';\nlet StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {}\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreComponent = /*#__PURE__*/(() => {\n  class StoreComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  StoreComponent.ɵfac = function StoreComponent_Factory(t) {\n    return new (t || StoreComponent)();\n  };\n\n  StoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StoreComponent,\n    selectors: [[\"lib-store\"]],\n    decls: 2,\n    vars: 0,\n    template: function StoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" store works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return StoreComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst loadTodos = createAction('[Todo] Load Todos');\nconst loadTodosSuccess = createAction('[Todo] Load Todos Success', props());\nconst loadTodosFailure = createAction('[Todo] Load Todos Failure', props());\nlet TodoEffects = /*#__PURE__*/(() => {\n  class TodoEffects {\n    constructor(actions$) {\n      this.actions$ = actions$;\n      this.loadTodos$ = createEffect(() => {\n        console.log('Setting up loadTodos$ effect');\n        return this.actions$.pipe(tap(action => console.log('Action in pipe:', action)), ofType(loadTodos), tap(() => console.log('loadTodos action caught')), map(() => loadTodosSuccess({\n          todos: []\n        })));\n      });\n      console.log('TodoEffects constructor called'); // נוסיף subscription לדיבאג\n\n      this.actions$.subscribe(action => {\n        console.log('Action received in effects:', action);\n      });\n    }\n\n  }\n\n  TodoEffects.ɵfac = function TodoEffects_Factory(t) {\n    return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions));\n  };\n\n  TodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoEffects,\n    factory: TodoEffects.ɵfac\n  });\n  return TodoEffects;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreLibModule = /*#__PURE__*/(() => {\n  class StoreLibModule {}\n\n  StoreLibModule.ɵfac = function StoreLibModule_Factory(t) {\n    return new (t || StoreLibModule)();\n  };\n\n  StoreLibModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: StoreLibModule\n  });\n  StoreLibModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [TodoEffects],\n    imports: [StoreModule.forRoot({}), EffectsModule.forRoot([TodoEffects]), StoreModule, EffectsModule]\n  });\n  return StoreLibModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(StoreLibModule, {\n    imports: [i1$1.StoreRootModule, i1.EffectsRootModule],\n    exports: [StoreModule, EffectsModule]\n  });\n})();\n\nconst initialState = {\n  todos: [],\n  loading: false,\n  error: null\n};\nconst todoReducer = createReducer(initialState, on(loadTodos, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(loadTodosSuccess, (state, {\n  todos\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  todos\n})), on(loadTodosFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})));\nconst selectTodoState = createFeatureSelector('todos');\nconst selectAllTodos = createSelector(selectTodoState, state => state.todos);\nconst selectTodoLoading = createSelector(selectTodoState, state => state.loading);\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { StoreComponent, StoreLibModule, StoreService, TodoEffects, initialState, loadTodos, loadTodosFailure, loadTodosSuccess, selectAllTodos, selectTodoLoading, selectTodoState, todoReducer };","map":{"version":3,"mappings":"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","names":["StoreService","constructor","factory","providedIn","StoreComponent","ngOnInit","selectors","decls","vars","template","i0","loadTodos","createAction","props","TodoEffects","actions$","createEffect","console","log","pipe","tap","action","ofType","TodoActions.loadTodos","map","TodoActions.loadTodosSuccess","todos","subscribe","token","StoreLibModule","imports","forRoot","EffectsModule","StoreModule","exports","loading","error","createReducer","initialState","on","state","Object","TodoActions.loadTodosFailure","selectTodoState","createFeatureSelector","createSelector"],"sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.component.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.actions.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.effects.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.module.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.state.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.reducer.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.selectors.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\public-api.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\r\nimport { Todo } from './todo.state';\r\n\r\n\r\n\r\nexport const loadTodos = createAction('[Todo] Load Todos');\r\nexport const loadTodosSuccess = createAction(\r\n  '[Todo] Load Todos Success',\r\n  props<{ todos: Todo[] }>()\r\n);\r\nexport const loadTodosFailure = createAction(\r\n  '[Todo] Load Todos Failure',\r\n  props<{ error: string }>()\r\n); ","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport * as TodoActions from './todo.actions';\r\n\r\n@Injectable()\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    console.log('TodoEffects constructor called');\r\n    \r\n    // נוסיף subscription לדיבאג\r\n    this.actions$.subscribe(action => {\r\n      console.log('Action received in effects:', action);\r\n    });\r\n  }\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    console.log('Setting up loadTodos$ effect');\r\n    return this.actions$.pipe(\r\n      tap(action => console.log('Action in pipe:', action)),\r\n      ofType(TodoActions.loadTodos),\r\n      tap(() => console.log('loadTodos action caught')),\r\n      map(() => TodoActions.loadTodosSuccess({ todos: [] }))\r\n    );\r\n  });\r\n} ","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from './store/todo.effects';\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([TodoEffects])\n  ],\n  exports: [\n    StoreModule,\n    EffectsModule\n  ],\n  providers:[TodoEffects]\n})\nexport class StoreLibModule { }\n","export interface Todo {\r\n  id: number;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  todos: Todo[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  todos: [],\r\n  loading: false,\r\n  error: null\r\n}; ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState, initialState } from './todo.state';\r\nimport * as TodoActions  from './todo.actions';\r\n\r\nexport const todoReducer = createReducer(\r\n  initialState,\r\n  on(TodoActions.loadTodos, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(TodoActions.loadTodosSuccess, (state, { todos }) => ({\r\n    ...state,\r\n    loading: false,\r\n    todos\r\n  })),\r\n  on(TodoActions.loadTodosFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  }))\r\n); ","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\n\r\nexport const selectTodoState = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.todos\r\n);\r\n\r\nexport const selectTodoLoading = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.loading\r\n); ","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * from './lib/store/todo.actions';\nexport * from './lib/store/todo.effects'\nexport * from './lib/store/todo.reducer'\nexport * from './lib/store/todo.selectors'\nexport * from './lib/store/todo.state'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}