{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { map } from 'rxjs/operators';\nimport { taskActions } from './todo.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nexport let TodoEffects = /*#__PURE__*/(() => {\n  class TodoEffects {\n    constructor(actions$) {\n      // alert('TodoEffects constructor called!!!');\n      this.actions$ = actions$;\n      this.loadTodos$ = createEffect(() => {\n        // console.log('Setting up loadTodos$ effect');\n        return this.actions$.pipe( // tap(action => console.log('Action in pipe:', action)),\n        ofType(taskActions.loadTasks), // tap(() => alert('loadTodos action caught')),\n        map(() => taskActions.loadTasksSuccess()));\n      });\n      this.addTask$ = createEffect(() => {\n        // console.log('Setting up addTask$ effect');\n        return this.actions$.pipe( // tap(action => console.log('Action in pipe:', action)),\n        ofType(taskActions.addTask), // tap(() => alert('addTask action caught')),\n        map(_ => taskActions.loadTasksSuccess()));\n      });\n      this.removeTask$ = createEffect(() => {\n        // console.log('Setting up addTask$ effect');\n        return this.actions$.pipe( // tap(action => console.log('Action in pipe:', action)),\n        ofType(taskActions.removeTask), // tap(() => alert('addTask action caught')),\n        map(_ => taskActions.loadTasksSuccess()));\n      });\n      this.updateTask$ = createEffect(() => {\n        return this.actions$.pipe(ofType(taskActions.updateTask), map(_ => taskActions.loadTasksSuccess()));\n      }); // נוסיף subscription לדיבאג\n\n      this.actions$.subscribe(action => {\n        console.log('Action received in effects:', action);\n      });\n    }\n\n  }\n\n  TodoEffects.ɵfac = function TodoEffects_Factory(t) {\n    return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions));\n  };\n\n  TodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoEffects,\n    factory: TodoEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoEffects;\n})();","map":{"version":3,"mappings":"AACA,SAAkBA,YAAlB,EAAgCC,MAAhC,QAA8C,eAA9C;AACA,SAAqBC,GAArB,QAAqC,gBAArC;AACA,SAASC,WAAT,QAA2B,gBAA3B;;;AAKA,WAAaC,WAAb;EAAM,MAAOA,WAAP,CAAkB;IACtBC,YAAoBC,QAApB,EAAqC;MACnC;MADkB;MASpB,kBAAaN,YAAY,CAAC,MAAK;QAC7B;QACA,OAAO,KAAKM,QAAL,CAAcC,IAAd,EACL;QACAN,MAAM,CAACE,WAAW,CAACK,SAAb,CAFD,EAGL;QACAN,GAAG,CAAC,MAAMC,WAAW,CAACM,gBAAZ,EAAP,CAJE,CAAP;MAMD,CARwB,CAAzB;MAUA,gBAAWT,YAAY,CAAC,MAAK;QAC3B;QACA,OAAO,KAAKM,QAAL,CAAcC,IAAd,EACL;QACAN,MAAM,CAACE,WAAW,CAACO,OAAb,CAFD,EAGL;QACER,GAAG,CAACS,CAAC,IAAIR,WAAW,CAACM,gBAAZ,EAAN,CAJA,CAAP;MAKI,CAPiB,CAAvB;MASF,mBAAcT,YAAY,CAAC,MAAK;QAC9B;QACA,OAAO,KAAKM,QAAL,CAAcC,IAAd,EACL;QACAN,MAAM,CAACE,WAAW,CAACS,UAAb,CAFD,EAGL;QACEV,GAAG,CAACS,CAAC,IAAIR,WAAW,CAACM,gBAAZ,EAAN,CAJA,CAAP;MAKI,CAPoB,CAA1B;MAQA,mBAAcT,YAAY,CAAC,MAAK;QAC9B,OAAO,KAAKM,QAAL,CAAcC,IAAd,CACLN,MAAM,CAACE,WAAW,CAACU,UAAb,CADD,EAEHX,GAAG,CAACS,CAAC,IAAIR,WAAW,CAACM,gBAAZ,EAAN,CAFA,CAAP;MAGI,CAJoB,CAA1B,CApCuC,CAGnC;;MACA,KAAKH,QAAL,CAAcQ,SAAd,CAAwBC,MAAM,IAAG;QAC/BC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,MAA3C;MACD,CAFD;IAGD;;EARqB;;;qBAAXX,aAAWc;EAAA;;;WAAXd;IAAWe,SAAXf,WAAW;IAAAgB,YAFV;;EAEd,OAAahB,WAAb;AAAA","names":["createEffect","ofType","map","taskActions","TodoEffects","constructor","actions$","pipe","loadTasks","loadTasksSuccess","addTask","_","removeTask","updateTask","subscribe","action","console","log","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { exhaustMap, map, tap } from 'rxjs/operators';\r\nimport { taskActions} from './todo.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    // alert('TodoEffects constructor called!!!');\r\n    \r\n    // נוסיף subscription לדיבאג\r\n    this.actions$.subscribe(action => {\r\n      console.log('Action received in effects:', action);\r\n    });\r\n  }\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    // console.log('Setting up loadTodos$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.loadTasks),\r\n      // tap(() => alert('loadTodos action caught')),\r\n      map(() => taskActions.loadTasksSuccess())\r\n    );\r\n  });\r\n\r\n  addTask$ = createEffect(() => {\r\n    // console.log('Setting up addTask$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.addTask),\r\n      // tap(() => alert('addTask action caught')),\r\n        map(_ => taskActions.loadTasksSuccess())\r\n      )})  \r\n     \r\nremoveTask$ = createEffect(() => {\r\n  // console.log('Setting up addTask$ effect');\r\n  return this.actions$.pipe(\r\n    // tap(action => console.log('Action in pipe:', action)),\r\n    ofType(taskActions.removeTask),\r\n    // tap(() => alert('addTask action caught')),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\nupdateTask$ = createEffect(() => {\r\n  return this.actions$.pipe(\r\n    ofType(taskActions.updateTask),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\n} "]},"metadata":{},"sourceType":"module"}