{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {}\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\n\n\nlet TranslateFakeLoader = /*#__PURE__*/(() => {\n  class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n      return of({});\n    }\n\n  }\n\n  TranslateFakeLoader.ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateFakeLoader_BaseFactory;\n    return function TranslateFakeLoader_Factory(t) {\n      return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader);\n    };\n  }();\n\n  TranslateFakeLoader.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateFakeLoader,\n    factory: TranslateFakeLoader.ɵfac\n  });\n  return TranslateFakeLoader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass MissingTranslationHandler {}\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\n\n\nlet FakeMissingTranslationHandler = /*#__PURE__*/(() => {\n  class FakeMissingTranslationHandler {\n    handle(params) {\n      return params.key;\n    }\n\n  }\n\n  FakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n    return new (t || FakeMissingTranslationHandler)();\n  };\n\n  FakeMissingTranslationHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FakeMissingTranslationHandler,\n    factory: FakeMissingTranslationHandler.ɵfac\n  });\n  return FakeMissingTranslationHandler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* tslint:disable */\n\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\n\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n\n  let t1 = typeof o1,\n      t2 = typeof o2,\n      length,\n      key,\n      keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/* tslint:enable */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction mergeDeep(target, source) {\n  let output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n\n  return output;\n}\n\nclass TranslateParser {}\n\nlet TranslateDefaultParser = /*#__PURE__*/(() => {\n  class TranslateDefaultParser extends TranslateParser {\n    constructor() {\n      super(...arguments);\n      this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n\n    interpolate(expr, params) {\n      let result;\n\n      if (typeof expr === 'string') {\n        result = this.interpolateString(expr, params);\n      } else if (typeof expr === 'function') {\n        result = this.interpolateFunction(expr, params);\n      } else {\n        // this should not happen, but an unrelated TranslateService test depends on it\n        result = expr;\n      }\n\n      return result;\n    }\n\n    getValue(target, key) {\n      let keys = typeof key === 'string' ? key.split('.') : [key];\n      key = '';\n\n      do {\n        key += keys.shift();\n\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n          target = target[key];\n          key = '';\n        } else if (!keys.length) {\n          target = undefined;\n        } else {\n          key += '.';\n        }\n      } while (keys.length);\n\n      return target;\n    }\n\n    interpolateFunction(fn, params) {\n      return fn(params);\n    }\n\n    interpolateString(expr, params) {\n      if (!params) {\n        return expr;\n      }\n\n      return expr.replace(this.templateMatcher, (substring, b) => {\n        let r = this.getValue(params, b);\n        return isDefined(r) ? r : substring;\n      });\n    }\n\n  }\n\n  TranslateDefaultParser.ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateDefaultParser_BaseFactory;\n    return function TranslateDefaultParser_Factory(t) {\n      return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser);\n    };\n  }();\n\n  TranslateDefaultParser.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateDefaultParser,\n    factory: TranslateDefaultParser.ɵfac\n  });\n  return TranslateDefaultParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass TranslateCompiler {}\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\n\n\nlet TranslateFakeCompiler = /*#__PURE__*/(() => {\n  class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n      return value;\n    }\n\n    compileTranslations(translations, lang) {\n      return translations;\n    }\n\n  }\n\n  TranslateFakeCompiler.ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateFakeCompiler_BaseFactory;\n    return function TranslateFakeCompiler_Factory(t) {\n      return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler);\n    };\n  }();\n\n  TranslateFakeCompiler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateFakeCompiler,\n    factory: TranslateFakeCompiler.ɵfac\n  });\n  return TranslateFakeCompiler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass TranslateStore {\n  constructor() {\n    /**\r\n     * The lang currently used\r\n     */\n    this.currentLang = this.defaultLang;\n    /**\r\n     * a list of translations per lang\r\n     */\n\n    this.translations = {};\n    /**\r\n     * an array of langs\r\n     */\n\n    this.langs = [];\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n    this.onTranslationChange = new EventEmitter();\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n    this.onLangChange = new EventEmitter();\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n    this.onDefaultLangChange = new EventEmitter();\n  }\n\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nlet TranslateService = /*#__PURE__*/(() => {\n  class TranslateService {\n    /**\r\n     *\r\n     * @param store an instance of the store (that is supposed to be unique)\r\n     * @param currentLoader An instance of the loader currently used\r\n     * @param compiler An instance of the compiler currently used\r\n     * @param parser An instance of the parser currently used\r\n     * @param missingTranslationHandler A handler for missing translations.\r\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n     * @param isolate whether this service should use the store or not\r\n     * @param extend To make a child module extend (and use) translations from parent modules.\r\n     * @param defaultLanguage Set the default language using configuration\r\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n      this.store = store;\n      this.currentLoader = currentLoader;\n      this.compiler = compiler;\n      this.parser = parser;\n      this.missingTranslationHandler = missingTranslationHandler;\n      this.useDefaultLang = useDefaultLang;\n      this.isolate = isolate;\n      this.extend = extend;\n      this.pending = false;\n      this._onTranslationChange = new EventEmitter();\n      this._onLangChange = new EventEmitter();\n      this._onDefaultLangChange = new EventEmitter();\n      this._langs = [];\n      this._translations = {};\n      this._translationRequests = {};\n      /** set the default language from configuration */\n\n      if (defaultLanguage) {\n        this.setDefaultLang(defaultLanguage);\n      }\n    }\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n\n    get onTranslationChange() {\n      return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n\n    get onLangChange() {\n      return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n\n\n    get onDefaultLangChange() {\n      return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\r\n     * The default lang to fallback when translations are missing on the current lang\r\n     */\n\n\n    get defaultLang() {\n      return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n\n    set defaultLang(defaultLang) {\n      if (this.isolate) {\n        this._defaultLang = defaultLang;\n      } else {\n        this.store.defaultLang = defaultLang;\n      }\n    }\n    /**\r\n     * The lang currently used\r\n     */\n\n\n    get currentLang() {\n      return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n\n    set currentLang(currentLang) {\n      if (this.isolate) {\n        this._currentLang = currentLang;\n      } else {\n        this.store.currentLang = currentLang;\n      }\n    }\n    /**\r\n     * an array of langs\r\n     */\n\n\n    get langs() {\n      return this.isolate ? this._langs : this.store.langs;\n    }\n\n    set langs(langs) {\n      if (this.isolate) {\n        this._langs = langs;\n      } else {\n        this.store.langs = langs;\n      }\n    }\n    /**\r\n     * a list of translations per lang\r\n     */\n\n\n    get translations() {\n      return this.isolate ? this._translations : this.store.translations;\n    }\n\n    set translations(translations) {\n      if (this.isolate) {\n        this._translations = translations;\n      } else {\n        this.store.translations = translations;\n      }\n    }\n    /**\r\n     * Sets the default language to use as a fallback\r\n     */\n\n\n    setDefaultLang(lang) {\n      if (lang === this.defaultLang) {\n        return;\n      }\n\n      let pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (this.defaultLang == null) {\n          this.defaultLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(res => {\n          this.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\r\n     * Gets the default language used\r\n     */\n\n\n    getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\r\n     * Changes the lang currently used\r\n     */\n\n\n    use(lang) {\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n\n      let pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n          this.currentLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(res => {\n          this.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\r\n     * Retrieves the given translations\r\n     */\n\n\n    retrieveTranslations(lang) {\n      let pending; // if this language is unavailable or extend is true, ask for it\n\n      if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n        pending = this._translationRequests[lang];\n      }\n\n      return pending;\n    }\n    /**\r\n     * Gets an object of translations for a given language with the current loader\r\n     * and passes it through the compiler\r\n     */\n\n\n    getTranslation(lang) {\n      this.pending = true;\n      const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n      this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n      this.loadingTranslations.subscribe({\n        next: res => {\n          this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n          this.updateLangs();\n          this.pending = false;\n        },\n        error: err => {\n          this.pending = false;\n        }\n      });\n      return loadingTranslations;\n    }\n    /**\r\n     * Manually sets an object of translations for a given language\r\n     * after passing it through the compiler\r\n     */\n\n\n    setTranslation(lang, translations, shouldMerge = false) {\n      translations = this.compiler.compileTranslations(translations, lang);\n\n      if ((shouldMerge || this.extend) && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], translations);\n      } else {\n        this.translations[lang] = translations;\n      }\n\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\r\n     * Returns an array of currently available langs\r\n     */\n\n\n    getLangs() {\n      return this.langs;\n    }\n    /**\r\n     * Add available langs\r\n     */\n\n\n    addLangs(langs) {\n      langs.forEach(lang => {\n        if (this.langs.indexOf(lang) === -1) {\n          this.langs.push(lang);\n        }\n      });\n    }\n    /**\r\n     * Update the list of available langs\r\n     */\n\n\n    updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    /**\r\n     * Returns the parsed result of the translations\r\n     */\n\n\n    getParsedResult(translations, key, interpolateParams) {\n      let res;\n\n      if (key instanceof Array) {\n        let result = {},\n            observables = false;\n\n        for (let k of key) {\n          result[k] = this.getParsedResult(translations, k, interpolateParams);\n\n          if (isObservable(result[k])) {\n            observables = true;\n          }\n        }\n\n        if (observables) {\n          const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n          return forkJoin(sources).pipe(map(arr => {\n            let obj = {};\n            arr.forEach((value, index) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          }));\n        }\n\n        return result;\n      }\n\n      if (translations) {\n        res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\") {\n        let params = {\n          key,\n          translateService: this\n        };\n\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n\n        res = this.missingTranslationHandler.handle(params);\n      }\n\n      return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\r\n     * Gets the translated value of a key (or an array of keys)\r\n     * @returns the translated key, or an object of translated keys\r\n     */\n\n\n    get(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      } // check if we are loading a new translation to use\n\n\n      if (this.pending) {\n        return this.loadingTranslations.pipe(concatMap(res => {\n          res = this.getParsedResult(res, key, interpolateParams);\n          return isObservable(res) ? res : of(res);\n        }));\n      } else {\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }\n    }\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the translation changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\n\n\n    getStreamOnTranslationChange(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n\n      return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n\n        if (typeof res.subscribe === 'function') {\n          return res;\n        } else {\n          return of(res);\n        }\n      })));\n    }\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the language changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\n\n\n    stream(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n\n      return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      })));\n    }\n    /**\r\n     * Returns a translation instantly from the internal state of loaded translation.\r\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n     */\n\n\n    instant(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n      if (isObservable(res)) {\n        if (key instanceof Array) {\n          let obj = {};\n          key.forEach((value, index) => {\n            obj[key[index]] = key[index];\n          });\n          return obj;\n        }\n\n        return key;\n      } else {\n        return res;\n      }\n    }\n    /**\r\n     * Sets the translated value of a key, after compiling it\r\n     */\n\n\n    set(key, value, lang = this.currentLang) {\n      this.translations[lang][key] = this.compiler.compile(value, lang);\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\r\n     * Changes the current lang\r\n     */\n\n\n    changeLang(lang) {\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      }); // if there is no default lang, use the one that we just set\n\n      if (this.defaultLang == null) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\r\n     * Changes the default lang\r\n     */\n\n\n    changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\r\n     * Allows to reload the lang file from the file\r\n     */\n\n\n    reloadLang(lang) {\n      this.resetLang(lang);\n      return this.getTranslation(lang);\n    }\n    /**\r\n     * Deletes inner translation\r\n     */\n\n\n    resetLang(lang) {\n      this._translationRequests[lang] = undefined;\n      this.translations[lang] = undefined;\n    }\n    /**\r\n     * Returns the language code name from the browser, e.g. \"de\"\r\n     */\n\n\n    getBrowserLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n\n      let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n      if (typeof browserLang === 'undefined') {\n        return undefined;\n      }\n\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n\n      if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n      }\n\n      return browserLang;\n    }\n    /**\r\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n     */\n\n\n    getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n\n      let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      return browserCultureLang;\n    }\n\n  }\n\n  TranslateService.ɵfac = function TranslateService_Factory(t) {\n    return new (t || TranslateService)(i0.ɵɵinject(TranslateStore), i0.ɵɵinject(TranslateLoader), i0.ɵɵinject(TranslateCompiler), i0.ɵɵinject(TranslateParser), i0.ɵɵinject(MissingTranslationHandler), i0.ɵɵinject(USE_DEFAULT_LANG), i0.ɵɵinject(USE_STORE), i0.ɵɵinject(USE_EXTEND), i0.ɵɵinject(DEFAULT_LANGUAGE));\n  };\n\n  TranslateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateService,\n    factory: TranslateService.ɵfac\n  });\n  return TranslateService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TranslateDirective = /*#__PURE__*/(() => {\n  class TranslateDirective {\n    constructor(translateService, element, _ref) {\n      this.translateService = translateService;\n      this.element = element;\n      this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n      if (!this.onTranslationChangeSub) {\n        this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n          if (event.lang === this.translateService.currentLang) {\n            this.checkNodes(true, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChangeSub) {\n        this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n          this.checkNodes(true, event.translations);\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n          this.checkNodes(true);\n        });\n      }\n    }\n\n    set translate(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n\n    set translateParams(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n\n    ngAfterViewChecked() {\n      this.checkNodes();\n    }\n\n    checkNodes(forceUpdate = false, translations) {\n      let nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n\n      for (let i = 0; i < nodes.length; ++i) {\n        let node = nodes[i];\n\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          let key;\n\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n\n          if (isDefined(node.lookupKey)) {\n            key = node.lookupKey;\n          } else if (this.key) {\n            key = this.key;\n          } else {\n            let content = this.getContent(node);\n            let trimmedContent = content.trim();\n\n            if (trimmedContent.length) {\n              node.lookupKey = trimmedContent; // we want to use the content as a key, not the translation value\n\n              if (content !== node.currentValue) {\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = content || node.originalContent;\n              } else if (node.originalContent) {\n                // the content seems ok, but the lang has changed\n                // the current content is the translation, not the key, use the last real content as key\n                key = node.originalContent.trim();\n              } else if (content !== node.currentValue) {\n                // we want to use the content as a key, not the translation value\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = content || node.originalContent;\n              }\n            }\n          }\n\n          this.updateValue(key, node, translations);\n        }\n      }\n    }\n\n    updateValue(key, node, translations) {\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n\n        this.lastParams = this.currentParams;\n\n        let onTranslation = res => {\n          if (res !== key) {\n            node.lastKey = key;\n          }\n\n          if (!node.originalContent) {\n            node.originalContent = this.getContent(node);\n          }\n\n          node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n          this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n          this._ref.markForCheck();\n        };\n\n        if (isDefined(translations)) {\n          let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n          if (isObservable(res)) {\n            res.subscribe({\n              next: onTranslation\n            });\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n\n    getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n\n    setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n\n  }\n\n  TranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n    return new (t || TranslateDirective)(i0.ɵɵdirectiveInject(TranslateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  TranslateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TranslateDirective,\n    selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n    inputs: {\n      translate: \"translate\",\n      translateParams: \"translateParams\"\n    }\n  });\n  return TranslateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TranslatePipe = /*#__PURE__*/(() => {\n  class TranslatePipe {\n    constructor(translate, _ref) {\n      this.translate = translate;\n      this._ref = _ref;\n      this.value = '';\n      this.lastKey = null;\n      this.lastParams = [];\n    }\n\n    updateValue(key, interpolateParams, translations) {\n      let onTranslation = res => {\n        this.value = res !== undefined ? res : key;\n        this.lastKey = key;\n\n        this._ref.markForCheck();\n      };\n\n      if (translations) {\n        let res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n        if (isObservable(res.subscribe)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n\n    transform(query, ...args) {\n      if (!query || !query.length) {\n        return query;\n      } // if we ask another time for the same key, return the last value\n\n\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n\n      let interpolateParams = undefined;\n\n      if (isDefined(args[0]) && args.length) {\n        if (typeof args[0] === 'string' && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n          let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (e) {\n            throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n          }\n        } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n          interpolateParams = args[0];\n        }\n      } // store the query, in case it changes\n\n\n      this.lastKey = query; // store the params, in case they change\n\n      this.lastParams = args; // set the value\n\n      this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n      this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n          if (this.lastKey && event.lang === this.translate.currentLang) {\n            this.lastKey = null;\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(event => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            this.updateValue(query, interpolateParams);\n          }\n        });\n      }\n\n      return this.value;\n    }\n    /**\r\n     * Clean any existing subscription to change events\r\n     */\n\n\n    _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n\n    ngOnDestroy() {\n      this._dispose();\n    }\n\n  }\n\n  TranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n    return new (t || TranslatePipe)(i0.ɵɵdirectiveInject(TranslateService, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n  };\n\n  TranslatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"translate\",\n    type: TranslatePipe,\n    pure: false\n  });\n  TranslatePipe.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslatePipe,\n    factory: TranslatePipe.ɵfac\n  });\n  return TranslatePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet TranslateModule = /*#__PURE__*/(() => {\n  class TranslateModule {\n    /**\r\n     * Use this method in your root module to provide the TranslateService\r\n     */\n    static forRoot(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    /**\r\n     * Use this method in your other (non root) modules to import the directive/pipe\r\n     */\n\n\n    static forChild(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n\n  }\n\n  TranslateModule.ɵfac = function TranslateModule_Factory(t) {\n    return new (t || TranslateModule)();\n  };\n\n  TranslateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TranslateModule\n  });\n  TranslateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TranslateModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵprov","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","TranslateDefaultParser","constructor","arguments","templateMatcher","interpolate","expr","result","interpolateString","interpolateFunction","getValue","split","shift","undefined","fn","replace","substring","b","r","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","_defaultLang","_currentLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","observables","k","sources","arr","obj","index","translateService","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","ElementRef","ChangeDetectorRef","ɵdir","TranslatePipe","transform","query","args","validArgs","JSON","parse","e","SyntaxError","_dispose","ɵpipe","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","ɵmod","ɵinj"],"sources":["C:/IttyHorowitz/mini project/to-do-list/node_modules/@ngx-translate/core/fesm2015/ngx-translate-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\r\n}\r\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\r\nclass TranslateFakeLoader extends TranslateLoader {\r\n    getTranslation(lang) {\r\n        return of({});\r\n    }\r\n}\r\nTranslateFakeLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateFakeLoader.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass MissingTranslationHandler {\r\n}\r\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\r\nclass FakeMissingTranslationHandler {\r\n    handle(params) {\r\n        return params.key;\r\n    }\r\n}\r\nFakeMissingTranslationHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nFakeMissingTranslationHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\r\n            type: Injectable\r\n        }] });\n\n/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nfunction equals(o1, o2) {\r\n    if (o1 === o2)\r\n        return true;\r\n    if (o1 === null || o2 === null)\r\n        return false;\r\n    if (o1 !== o1 && o2 !== o2)\r\n        return true; // NaN === NaN\r\n    let t1 = typeof o1, t2 = typeof o2, length, key, keySet;\r\n    if (t1 == t2 && t1 == 'object') {\r\n        if (Array.isArray(o1)) {\r\n            if (!Array.isArray(o2))\r\n                return false;\r\n            if ((length = o1.length) == o2.length) {\r\n                for (key = 0; key < length; key++) {\r\n                    if (!equals(o1[key], o2[key]))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (Array.isArray(o2)) {\r\n                return false;\r\n            }\r\n            keySet = Object.create(null);\r\n            for (key in o1) {\r\n                if (!equals(o1[key], o2[key])) {\r\n                    return false;\r\n                }\r\n                keySet[key] = true;\r\n            }\r\n            for (key in o2) {\r\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/* tslint:enable */\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\r\nfunction isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\nfunction mergeDeep(target, source) {\r\n    let output = Object.assign({}, target);\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach((key) => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                }\r\n                else {\r\n                    output[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n            }\r\n            else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\n\nclass TranslateParser {\r\n}\r\nclass TranslateDefaultParser extends TranslateParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n    }\r\n    interpolate(expr, params) {\r\n        let result;\r\n        if (typeof expr === 'string') {\r\n            result = this.interpolateString(expr, params);\r\n        }\r\n        else if (typeof expr === 'function') {\r\n            result = this.interpolateFunction(expr, params);\r\n        }\r\n        else {\r\n            // this should not happen, but an unrelated TranslateService test depends on it\r\n            result = expr;\r\n        }\r\n        return result;\r\n    }\r\n    getValue(target, key) {\r\n        let keys = typeof key === 'string' ? key.split('.') : [key];\r\n        key = '';\r\n        do {\r\n            key += keys.shift();\r\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\r\n                target = target[key];\r\n                key = '';\r\n            }\r\n            else if (!keys.length) {\r\n                target = undefined;\r\n            }\r\n            else {\r\n                key += '.';\r\n            }\r\n        } while (keys.length);\r\n        return target;\r\n    }\r\n    interpolateFunction(fn, params) {\r\n        return fn(params);\r\n    }\r\n    interpolateString(expr, params) {\r\n        if (!params) {\r\n            return expr;\r\n        }\r\n        return expr.replace(this.templateMatcher, (substring, b) => {\r\n            let r = this.getValue(params, b);\r\n            return isDefined(r) ? r : substring;\r\n        });\r\n    }\r\n}\r\nTranslateDefaultParser.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateDefaultParser.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass TranslateCompiler {\r\n}\r\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\r\nclass TranslateFakeCompiler extends TranslateCompiler {\r\n    compile(value, lang) {\r\n        return value;\r\n    }\r\n    compileTranslations(translations, lang) {\r\n        return translations;\r\n    }\r\n}\r\nTranslateFakeCompiler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateFakeCompiler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass TranslateStore {\r\n    constructor() {\r\n        /**\r\n         * The lang currently used\r\n         */\r\n        this.currentLang = this.defaultLang;\r\n        /**\r\n         * a list of translations per lang\r\n         */\r\n        this.translations = {};\r\n        /**\r\n         * an array of langs\r\n         */\r\n        this.langs = [];\r\n        /**\r\n         * An EventEmitter to listen to translation change events\r\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onTranslationChange = new EventEmitter();\r\n        /**\r\n         * An EventEmitter to listen to lang change events\r\n         * onLangChange.subscribe((params: LangChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onLangChange = new EventEmitter();\r\n        /**\r\n         * An EventEmitter to listen to default lang change events\r\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onDefaultLangChange = new EventEmitter();\r\n    }\r\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\r\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\r\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\r\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\r\nclass TranslateService {\r\n    /**\r\n     *\r\n     * @param store an instance of the store (that is supposed to be unique)\r\n     * @param currentLoader An instance of the loader currently used\r\n     * @param compiler An instance of the compiler currently used\r\n     * @param parser An instance of the parser currently used\r\n     * @param missingTranslationHandler A handler for missing translations.\r\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n     * @param isolate whether this service should use the store or not\r\n     * @param extend To make a child module extend (and use) translations from parent modules.\r\n     * @param defaultLanguage Set the default language using configuration\r\n     */\r\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\r\n        this.store = store;\r\n        this.currentLoader = currentLoader;\r\n        this.compiler = compiler;\r\n        this.parser = parser;\r\n        this.missingTranslationHandler = missingTranslationHandler;\r\n        this.useDefaultLang = useDefaultLang;\r\n        this.isolate = isolate;\r\n        this.extend = extend;\r\n        this.pending = false;\r\n        this._onTranslationChange = new EventEmitter();\r\n        this._onLangChange = new EventEmitter();\r\n        this._onDefaultLangChange = new EventEmitter();\r\n        this._langs = [];\r\n        this._translations = {};\r\n        this._translationRequests = {};\r\n        /** set the default language from configuration */\r\n        if (defaultLanguage) {\r\n            this.setDefaultLang(defaultLanguage);\r\n        }\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onTranslationChange() {\r\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onLangChange() {\r\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onDefaultLangChange() {\r\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\r\n    }\r\n    /**\r\n     * The default lang to fallback when translations are missing on the current lang\r\n     */\r\n    get defaultLang() {\r\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\r\n    }\r\n    set defaultLang(defaultLang) {\r\n        if (this.isolate) {\r\n            this._defaultLang = defaultLang;\r\n        }\r\n        else {\r\n            this.store.defaultLang = defaultLang;\r\n        }\r\n    }\r\n    /**\r\n     * The lang currently used\r\n     */\r\n    get currentLang() {\r\n        return this.isolate ? this._currentLang : this.store.currentLang;\r\n    }\r\n    set currentLang(currentLang) {\r\n        if (this.isolate) {\r\n            this._currentLang = currentLang;\r\n        }\r\n        else {\r\n            this.store.currentLang = currentLang;\r\n        }\r\n    }\r\n    /**\r\n     * an array of langs\r\n     */\r\n    get langs() {\r\n        return this.isolate ? this._langs : this.store.langs;\r\n    }\r\n    set langs(langs) {\r\n        if (this.isolate) {\r\n            this._langs = langs;\r\n        }\r\n        else {\r\n            this.store.langs = langs;\r\n        }\r\n    }\r\n    /**\r\n     * a list of translations per lang\r\n     */\r\n    get translations() {\r\n        return this.isolate ? this._translations : this.store.translations;\r\n    }\r\n    set translations(translations) {\r\n        if (this.isolate) {\r\n            this._translations = translations;\r\n        }\r\n        else {\r\n            this.store.translations = translations;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the default language to use as a fallback\r\n     */\r\n    setDefaultLang(lang) {\r\n        if (lang === this.defaultLang) {\r\n            return;\r\n        }\r\n        let pending = this.retrieveTranslations(lang);\r\n        if (typeof pending !== \"undefined\") {\r\n            // on init set the defaultLang immediately\r\n            if (this.defaultLang == null) {\r\n                this.defaultLang = lang;\r\n            }\r\n            pending.pipe(take(1))\r\n                .subscribe((res) => {\r\n                this.changeDefaultLang(lang);\r\n            });\r\n        }\r\n        else { // we already have this language\r\n            this.changeDefaultLang(lang);\r\n        }\r\n    }\r\n    /**\r\n     * Gets the default language used\r\n     */\r\n    getDefaultLang() {\r\n        return this.defaultLang;\r\n    }\r\n    /**\r\n     * Changes the lang currently used\r\n     */\r\n    use(lang) {\r\n        // don't change the language if the language given is already selected\r\n        if (lang === this.currentLang) {\r\n            return of(this.translations[lang]);\r\n        }\r\n        let pending = this.retrieveTranslations(lang);\r\n        if (typeof pending !== \"undefined\") {\r\n            // on init set the currentLang immediately\r\n            if (!this.currentLang) {\r\n                this.currentLang = lang;\r\n            }\r\n            pending.pipe(take(1))\r\n                .subscribe((res) => {\r\n                this.changeLang(lang);\r\n            });\r\n            return pending;\r\n        }\r\n        else { // we have this language, return an Observable\r\n            this.changeLang(lang);\r\n            return of(this.translations[lang]);\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the given translations\r\n     */\r\n    retrieveTranslations(lang) {\r\n        let pending;\r\n        // if this language is unavailable or extend is true, ask for it\r\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\r\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\r\n            pending = this._translationRequests[lang];\r\n        }\r\n        return pending;\r\n    }\r\n    /**\r\n     * Gets an object of translations for a given language with the current loader\r\n     * and passes it through the compiler\r\n     */\r\n    getTranslation(lang) {\r\n        this.pending = true;\r\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\r\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\r\n        this.loadingTranslations\r\n            .subscribe({\r\n            next: (res) => {\r\n                this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\r\n                this.updateLangs();\r\n                this.pending = false;\r\n            },\r\n            error: (err) => {\r\n                this.pending = false;\r\n            }\r\n        });\r\n        return loadingTranslations;\r\n    }\r\n    /**\r\n     * Manually sets an object of translations for a given language\r\n     * after passing it through the compiler\r\n     */\r\n    setTranslation(lang, translations, shouldMerge = false) {\r\n        translations = this.compiler.compileTranslations(translations, lang);\r\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\r\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\r\n        }\r\n        else {\r\n            this.translations[lang] = translations;\r\n        }\r\n        this.updateLangs();\r\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Returns an array of currently available langs\r\n     */\r\n    getLangs() {\r\n        return this.langs;\r\n    }\r\n    /**\r\n     * Add available langs\r\n     */\r\n    addLangs(langs) {\r\n        langs.forEach((lang) => {\r\n            if (this.langs.indexOf(lang) === -1) {\r\n                this.langs.push(lang);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Update the list of available langs\r\n     */\r\n    updateLangs() {\r\n        this.addLangs(Object.keys(this.translations));\r\n    }\r\n    /**\r\n     * Returns the parsed result of the translations\r\n     */\r\n    getParsedResult(translations, key, interpolateParams) {\r\n        let res;\r\n        if (key instanceof Array) {\r\n            let result = {}, observables = false;\r\n            for (let k of key) {\r\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\r\n                if (isObservable(result[k])) {\r\n                    observables = true;\r\n                }\r\n            }\r\n            if (observables) {\r\n                const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\r\n                return forkJoin(sources).pipe(map((arr) => {\r\n                    let obj = {};\r\n                    arr.forEach((value, index) => {\r\n                        obj[key[index]] = value;\r\n                    });\r\n                    return obj;\r\n                }));\r\n            }\r\n            return result;\r\n        }\r\n        if (translations) {\r\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\r\n        }\r\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\r\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\r\n        }\r\n        if (typeof res === \"undefined\") {\r\n            let params = { key, translateService: this };\r\n            if (typeof interpolateParams !== 'undefined') {\r\n                params.interpolateParams = interpolateParams;\r\n            }\r\n            res = this.missingTranslationHandler.handle(params);\r\n        }\r\n        return typeof res !== \"undefined\" ? res : key;\r\n    }\r\n    /**\r\n     * Gets the translated value of a key (or an array of keys)\r\n     * @returns the translated key, or an object of translated keys\r\n     */\r\n    get(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        // check if we are loading a new translation to use\r\n        if (this.pending) {\r\n            return this.loadingTranslations.pipe(concatMap((res) => {\r\n                res = this.getParsedResult(res, key, interpolateParams);\r\n                return isObservable(res) ? res : of(res);\r\n            }));\r\n        }\r\n        else {\r\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n            return isObservable(res) ? res : of(res);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the translation changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    getStreamOnTranslationChange(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\r\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n            if (typeof res.subscribe === 'function') {\r\n                return res;\r\n            }\r\n            else {\r\n                return of(res);\r\n            }\r\n        })));\r\n    }\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the language changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    stream(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\r\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n            return isObservable(res) ? res : of(res);\r\n        })));\r\n    }\r\n    /**\r\n     * Returns a translation instantly from the internal state of loaded translation.\r\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n     */\r\n    instant(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n        if (isObservable(res)) {\r\n            if (key instanceof Array) {\r\n                let obj = {};\r\n                key.forEach((value, index) => {\r\n                    obj[key[index]] = key[index];\r\n                });\r\n                return obj;\r\n            }\r\n            return key;\r\n        }\r\n        else {\r\n            return res;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the translated value of a key, after compiling it\r\n     */\r\n    set(key, value, lang = this.currentLang) {\r\n        this.translations[lang][key] = this.compiler.compile(value, lang);\r\n        this.updateLangs();\r\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Changes the current lang\r\n     */\r\n    changeLang(lang) {\r\n        this.currentLang = lang;\r\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\r\n        // if there is no default lang, use the one that we just set\r\n        if (this.defaultLang == null) {\r\n            this.changeDefaultLang(lang);\r\n        }\r\n    }\r\n    /**\r\n     * Changes the default lang\r\n     */\r\n    changeDefaultLang(lang) {\r\n        this.defaultLang = lang;\r\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Allows to reload the lang file from the file\r\n     */\r\n    reloadLang(lang) {\r\n        this.resetLang(lang);\r\n        return this.getTranslation(lang);\r\n    }\r\n    /**\r\n     * Deletes inner translation\r\n     */\r\n    resetLang(lang) {\r\n        this._translationRequests[lang] = undefined;\r\n        this.translations[lang] = undefined;\r\n    }\r\n    /**\r\n     * Returns the language code name from the browser, e.g. \"de\"\r\n     */\r\n    getBrowserLang() {\r\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n            return undefined;\r\n        }\r\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n        if (typeof browserLang === 'undefined') {\r\n            return undefined;\r\n        }\r\n        if (browserLang.indexOf('-') !== -1) {\r\n            browserLang = browserLang.split('-')[0];\r\n        }\r\n        if (browserLang.indexOf('_') !== -1) {\r\n            browserLang = browserLang.split('_')[0];\r\n        }\r\n        return browserLang;\r\n    }\r\n    /**\r\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n     */\r\n    getBrowserCultureLang() {\r\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n            return undefined;\r\n        }\r\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n        return browserCultureLang;\r\n    }\r\n}\r\nTranslateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: USE_STORE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () {\r\n        return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [USE_DEFAULT_LANG]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [USE_STORE]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [USE_EXTEND]\r\n                    }] }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [DEFAULT_LANGUAGE]\r\n                    }] }];\r\n    } });\n\nclass TranslateDirective {\r\n    constructor(translateService, element, _ref) {\r\n        this.translateService = translateService;\r\n        this.element = element;\r\n        this._ref = _ref;\r\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\r\n        if (!this.onTranslationChangeSub) {\r\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\r\n                if (event.lang === this.translateService.currentLang) {\r\n                    this.checkNodes(true, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChangeSub) {\r\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\r\n                this.checkNodes(true, event.translations);\r\n            });\r\n        }\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChangeSub) {\r\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\r\n                this.checkNodes(true);\r\n            });\r\n        }\r\n    }\r\n    set translate(key) {\r\n        if (key) {\r\n            this.key = key;\r\n            this.checkNodes();\r\n        }\r\n    }\r\n    set translateParams(params) {\r\n        if (!equals(this.currentParams, params)) {\r\n            this.currentParams = params;\r\n            this.checkNodes(true);\r\n        }\r\n    }\r\n    ngAfterViewChecked() {\r\n        this.checkNodes();\r\n    }\r\n    checkNodes(forceUpdate = false, translations) {\r\n        let nodes = this.element.nativeElement.childNodes;\r\n        // if the element is empty\r\n        if (!nodes.length) {\r\n            // we add the key as content\r\n            this.setContent(this.element.nativeElement, this.key);\r\n            nodes = this.element.nativeElement.childNodes;\r\n        }\r\n        for (let i = 0; i < nodes.length; ++i) {\r\n            let node = nodes[i];\r\n            if (node.nodeType === 3) { // node type 3 is a text node\r\n                let key;\r\n                if (forceUpdate) {\r\n                    node.lastKey = null;\r\n                }\r\n                if (isDefined(node.lookupKey)) {\r\n                    key = node.lookupKey;\r\n                }\r\n                else if (this.key) {\r\n                    key = this.key;\r\n                }\r\n                else {\r\n                    let content = this.getContent(node);\r\n                    let trimmedContent = content.trim();\r\n                    if (trimmedContent.length) {\r\n                        node.lookupKey = trimmedContent;\r\n                        // we want to use the content as a key, not the translation value\r\n                        if (content !== node.currentValue) {\r\n                            key = trimmedContent;\r\n                            // the content was changed from the user, we'll use it as a reference if needed\r\n                            node.originalContent = content || node.originalContent;\r\n                        }\r\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\r\n                            // the current content is the translation, not the key, use the last real content as key\r\n                            key = node.originalContent.trim();\r\n                        }\r\n                        else if (content !== node.currentValue) {\r\n                            // we want to use the content as a key, not the translation value\r\n                            key = trimmedContent;\r\n                            // the content was changed from the user, we'll use it as a reference if needed\r\n                            node.originalContent = content || node.originalContent;\r\n                        }\r\n                    }\r\n                }\r\n                this.updateValue(key, node, translations);\r\n            }\r\n        }\r\n    }\r\n    updateValue(key, node, translations) {\r\n        if (key) {\r\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\r\n                return;\r\n            }\r\n            this.lastParams = this.currentParams;\r\n            let onTranslation = (res) => {\r\n                if (res !== key) {\r\n                    node.lastKey = key;\r\n                }\r\n                if (!node.originalContent) {\r\n                    node.originalContent = this.getContent(node);\r\n                }\r\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\r\n                // we replace in the original content to preserve spaces that we might have trimmed\r\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\r\n                this._ref.markForCheck();\r\n            };\r\n            if (isDefined(translations)) {\r\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\r\n                if (isObservable(res)) {\r\n                    res.subscribe({ next: onTranslation });\r\n                }\r\n                else {\r\n                    onTranslation(res);\r\n                }\r\n            }\r\n            else {\r\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\r\n            }\r\n        }\r\n    }\r\n    getContent(node) {\r\n        return isDefined(node.textContent) ? node.textContent : node.data;\r\n    }\r\n    setContent(node, content) {\r\n        if (isDefined(node.textContent)) {\r\n            node.textContent = content;\r\n        }\r\n        else {\r\n            node.data = content;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.onLangChangeSub) {\r\n            this.onLangChangeSub.unsubscribe();\r\n        }\r\n        if (this.onDefaultLangChangeSub) {\r\n            this.onDefaultLangChangeSub.unsubscribe();\r\n        }\r\n        if (this.onTranslationChangeSub) {\r\n            this.onTranslationChangeSub.unsubscribe();\r\n        }\r\n    }\r\n}\r\nTranslateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nTranslateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: TranslateDirective, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[translate],[ngx-translate]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { translate: [{\r\n                type: Input\r\n            }], translateParams: [{\r\n                type: Input\r\n            }] } });\n\nclass TranslatePipe {\r\n    constructor(translate, _ref) {\r\n        this.translate = translate;\r\n        this._ref = _ref;\r\n        this.value = '';\r\n        this.lastKey = null;\r\n        this.lastParams = [];\r\n    }\r\n    updateValue(key, interpolateParams, translations) {\r\n        let onTranslation = (res) => {\r\n            this.value = res !== undefined ? res : key;\r\n            this.lastKey = key;\r\n            this._ref.markForCheck();\r\n        };\r\n        if (translations) {\r\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n            if (isObservable(res.subscribe)) {\r\n                res.subscribe(onTranslation);\r\n            }\r\n            else {\r\n                onTranslation(res);\r\n            }\r\n        }\r\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n    }\r\n    transform(query, ...args) {\r\n        if (!query || !query.length) {\r\n            return query;\r\n        }\r\n        // if we ask another time for the same key, return the last value\r\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n            return this.value;\r\n        }\r\n        let interpolateParams = undefined;\r\n        if (isDefined(args[0]) && args.length) {\r\n            if (typeof args[0] === 'string' && args[0].length) {\r\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n                let validArgs = args[0]\r\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n                try {\r\n                    interpolateParams = JSON.parse(validArgs);\r\n                }\r\n                catch (e) {\r\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n                }\r\n            }\r\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n                interpolateParams = args[0];\r\n            }\r\n        }\r\n        // store the query, in case it changes\r\n        this.lastKey = query;\r\n        // store the params, in case they change\r\n        this.lastParams = args;\r\n        // set the value\r\n        this.updateValue(query, interpolateParams);\r\n        // if there is a subscription to onLangChange, clean it\r\n        this._dispose();\r\n        // subscribe to onTranslationChange event, in case the translations change\r\n        if (!this.onTranslationChange) {\r\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\r\n                if (this.lastKey && event.lang === this.translate.currentLang) {\r\n                    this.lastKey = null;\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChange) {\r\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChange) {\r\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams);\r\n                }\r\n            });\r\n        }\r\n        return this.value;\r\n    }\r\n    /**\r\n     * Clean any existing subscription to change events\r\n     */\r\n    _dispose() {\r\n        if (typeof this.onTranslationChange !== 'undefined') {\r\n            this.onTranslationChange.unsubscribe();\r\n            this.onTranslationChange = undefined;\r\n        }\r\n        if (typeof this.onLangChange !== 'undefined') {\r\n            this.onLangChange.unsubscribe();\r\n            this.onLangChange = undefined;\r\n        }\r\n        if (typeof this.onDefaultLangChange !== 'undefined') {\r\n            this.onDefaultLangChange.unsubscribe();\r\n            this.onDefaultLangChange = undefined;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._dispose();\r\n    }\r\n}\r\nTranslatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\r\nTranslatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, name: \"translate\", pure: false });\r\nTranslatePipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, decorators: [{\r\n            type: Injectable\r\n        }, {\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'translate',\r\n                    pure: false // required to update the value when the promise is resolved\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ChangeDetectorRef }]; } });\n\nclass TranslateModule {\r\n    /**\r\n     * Use this method in your root module to provide the TranslateService\r\n     */\r\n    static forRoot(config = {}) {\r\n        return {\r\n            ngModule: TranslateModule,\r\n            providers: [\r\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\r\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\r\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\r\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\r\n                TranslateStore,\r\n                { provide: USE_STORE, useValue: config.isolate },\r\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\r\n                { provide: USE_EXTEND, useValue: config.extend },\r\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\r\n                TranslateService\r\n            ]\r\n        };\r\n    }\r\n    /**\r\n     * Use this method in your other (non root) modules to import the directive/pipe\r\n     */\r\n    static forChild(config = {}) {\r\n        return {\r\n            ngModule: TranslateModule,\r\n            providers: [\r\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\r\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\r\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\r\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\r\n                { provide: USE_STORE, useValue: config.isolate },\r\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\r\n                { provide: USE_EXTEND, useValue: config.extend },\r\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\r\n                TranslateService\r\n            ]\r\n        };\r\n    }\r\n}\r\nTranslateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nTranslateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, declarations: [TranslatePipe,\r\n        TranslateDirective], exports: [TranslatePipe,\r\n        TranslateDirective] });\r\nTranslateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        TranslatePipe,\r\n                        TranslateDirective\r\n                    ],\r\n                    exports: [\r\n                        TranslatePipe,\r\n                        TranslateDirective\r\n                    ]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}