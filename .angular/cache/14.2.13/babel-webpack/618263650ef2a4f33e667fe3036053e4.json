{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { tap, map } from 'rxjs/operators';\nlet StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {}\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreComponent = /*#__PURE__*/(() => {\n  class StoreComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  StoreComponent.ɵfac = function StoreComponent_Factory(t) {\n    return new (t || StoreComponent)();\n  };\n\n  StoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StoreComponent,\n    selectors: [[\"lib-store\"]],\n    decls: 2,\n    vars: 0,\n    template: function StoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" store works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return StoreComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreLibModule = /*#__PURE__*/(() => {\n  class StoreLibModule {}\n\n  StoreLibModule.ɵfac = function StoreLibModule_Factory(t) {\n    return new (t || StoreLibModule)();\n  };\n\n  StoreLibModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: StoreLibModule\n  });\n  StoreLibModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({});\n  return StoreLibModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(StoreLibModule, {\n    declarations: [StoreComponent],\n    exports: [StoreComponent]\n  });\n})();\n\nconst taskActions = {\n  addTask: createAction('[Todo] Add Task', props()),\n  removeTask: createAction('[Todo] Remove Task', props()),\n  loadTasks: createAction('[Todo] Load Tasks'),\n  loadTasksSuccess: createAction('[Todo] Load Tasks success'),\n  loadTasksFailure: createAction('[Todo] Load Tasks failure', props())\n};\nlet TodoEffects = /*#__PURE__*/(() => {\n  class TodoEffects {\n    constructor(actions$) {\n      this.actions$ = actions$;\n      this.loadTodos$ = createEffect(() => {\n        console.log('Setting up loadTodos$ effect');\n        return this.actions$.pipe(tap(action => console.log('Action in pipe:', action)), ofType(taskActions.loadTasks), tap(() => alert('loadTodos action caught')), map(() => taskActions.loadTasksSuccess()));\n      });\n      alert('TodoEffects constructor called!!!'); // נוסיף subscription לדיבאג\n\n      this.actions$.subscribe(action => {\n        console.log('Action received in effects:', action);\n      });\n    }\n\n  }\n\n  TodoEffects.ɵfac = function TodoEffects_Factory(t) {\n    return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions));\n  };\n\n  TodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoEffects,\n    factory: TodoEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoEffects;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst initialState = {\n  tasks: [],\n  loading: false,\n  error: null\n};\nconst todoReducer = createReducer(initialState, on(taskActions.loadTasks, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(taskActions.loadTasksSuccess, state => Object.assign(Object.assign({}, state), {\n  loading: false\n})), on(taskActions.loadTasksFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})), //   on(TodoActions.addTask, (state, { task }) => ({\n//     ...state,\n//     tasks: [...state.tasks, { \n//       id: Number(Math.random().toString(36).substring(2, 9)),\n//       text :task.data?\n//     }]\n//   })),\non(taskActions.removeTask, (state, {\n  id\n}) => Object.assign(Object.assign({}, state), {\n  tasks: state.tasks.filter(task => task.id !== id)\n})));\nconst selectTodoState = createFeatureSelector('todos');\nconst selectAllTodos = createSelector(selectTodoState, state => state.tasks);\nconst selectTodoLoading = createSelector(selectTodoState, state => state.loading);\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { StoreComponent, StoreLibModule, StoreService, TodoEffects, initialState, selectAllTodos, selectTodoLoading, selectTodoState, taskActions, todoReducer };","map":{"version":3,"mappings":"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","names":["StoreService","constructor","factory","providedIn","StoreComponent","ngOnInit","selectors","decls","vars","template","i0","StoreLibModule","declarations","exports","addTask","createAction","props","removeTask","loadTasks","loadTasksSuccess","loadTasksFailure","TodoEffects","actions$","createEffect","console","log","pipe","tap","action","ofType","taskActions","alert","map","subscribe","tasks","loading","error","todoReducer","createReducer","initialState","on","state","Object","id","filter","task","selectTodoState","createFeatureSelector","createSelector"],"sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.component.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.module.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo-store\\todo.actions.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.effects.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.state.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.reducer.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.selectors.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\public-api.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from './store/todo.effects';\nimport { StoreComponent } from './store.component';\n\n@NgModule({\n  declarations: [StoreComponent],\n  imports: [\n  ],\n  exports: [StoreComponent]\n})\nexport class StoreLibModule { }\n","import { createAction, props } from '@ngrx/store';\r\nimport { Task } from '../todo.state';\r\n\r\n\r\n\r\nexport const taskActions = {\r\n  addTask: createAction('[Todo] Add Task', props<{ task: Task }>()),\r\n  removeTask: createAction('[Todo] Remove Task', props<{ id: number }>()),\r\n  loadTasks: createAction('[Todo] Load Tasks'),\r\n  loadTasksSuccess: createAction('[Todo] Load Tasks success'),\r\n  loadTasksFailure: createAction('[Todo] Load Tasks failure', props<{ error: any }>())\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { taskActions} from './todo-store/todo.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    alert('TodoEffects constructor called!!!');\r\n    \r\n    // נוסיף subscription לדיבאג\r\n    this.actions$.subscribe(action => {\r\n      console.log('Action received in effects:', action);\r\n    });\r\n  }\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    console.log('Setting up loadTodos$ effect');\r\n    return this.actions$.pipe(\r\n      tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.loadTasks),\r\n      tap(() => alert('loadTodos action caught')),\r\n      map(() => taskActions.loadTasksSuccess())\r\n    );\r\n  });\r\n} ","export interface Task {\r\n  id: number;\r\n  text: string;\r\n  completed?: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  tasks: Task[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  tasks: [],\r\n  loading: false,\r\n  error: null\r\n}; ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState, initialState } from './todo.state';\r\nimport { taskActions} from './todo-store/todo.actions';\r\n\r\nexport const todoReducer = createReducer(\r\n  initialState,\r\n  on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n  })),\r\n  on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n//   on(TodoActions.addTask, (state, { task }) => ({\r\n//     ...state,\r\n//     tasks: [...state.tasks, { \r\n//       id: Number(Math.random().toString(36).substring(2, 9)),\r\n//       text :task.data?\r\n//     }]\r\n\r\n//   })),\r\n  on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n  }))\r\n); \r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\n\r\nexport const selectTodoState = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.tasks\r\n);\r\n\r\nexport const selectTodoLoading = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.loading\r\n); ","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * from './lib/store/todo-store/todo.actions';\nexport * from './lib/store/todo.effects';\nexport * from './lib/store/todo.reducer';\nexport * from './lib/store/todo.selectors';\nexport * from './lib/store/todo.state';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}