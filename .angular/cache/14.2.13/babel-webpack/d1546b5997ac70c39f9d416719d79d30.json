{"ast":null,"code":"import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.action());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\n\nconst MAT_SNACK_BAR_DATA = /*#__PURE__*/new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n    this.duration = 0;\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\n\nconst MAX_TIMEOUT = /*#__PURE__*/Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n\n      this.dismiss();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n\n\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n\n\n  onAction() {\n    return this._onAction;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nlet SimpleSnackBar = /*#__PURE__*/(() => {\n  class SimpleSnackBar {\n    constructor(snackBarRef, data) {\n      this.snackBarRef = snackBarRef;\n      this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n\n\n    action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n\n\n    get hasAction() {\n      return !!this.data.action;\n    }\n\n  }\n\n  SimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n    return new (t || SimpleSnackBar)(i0.ɵɵdirectiveInject(MatSnackBarRef), i0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n  };\n\n  SimpleSnackBar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SimpleSnackBar,\n    selectors: [[\"simple-snack-bar\"]],\n    hostAttrs: [1, \"mat-simple-snackbar\"],\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"mat-simple-snack-bar-content\"], [\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function SimpleSnackBar_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.data.message);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n      }\n    },\n    dependencies: [i2.NgIf, i3.MatButton],\n    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return SimpleSnackBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('void, hidden', /*#__PURE__*/style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void, * => hidden', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\n\nlet _MatSnackBarContainerBase = /*#__PURE__*/(() => {\n  class _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform,\n    /** The snack bar configuration. */\n    snackBarConfig) {\n      super();\n      this._ngZone = _ngZone;\n      this._elementRef = _elementRef;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._platform = _platform;\n      this.snackBarConfig = snackBarConfig;\n      /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n      this._announceDelay = 150;\n      /** Whether the component has been destroyed. */\n\n      this._destroyed = false;\n      /** Subject for notifying that the snack bar has announced to screen readers. */\n\n      this._onAnnounce = new Subject();\n      /** Subject for notifying that the snack bar has exited from view. */\n\n      this._onExit = new Subject();\n      /** Subject for notifying that the snack bar has finished entering the view. */\n\n      this._onEnter = new Subject();\n      /** The state of the snack bar animations. */\n\n      this._animationState = 'void';\n      /**\n       * Attaches a DOM portal to the snack bar container.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      this.attachDomPortal = portal => {\n        this._assertNotAttached();\n\n        const result = this._portalOutlet.attachDomPortal(portal);\n\n        this._afterPortalAttached();\n\n        return result;\n      }; // Use aria-live rather than a live role like 'alert' or 'status'\n      // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n      if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n        this._live = 'assertive';\n      } else if (snackBarConfig.politeness === 'off') {\n        this._live = 'off';\n      } else {\n        this._live = 'polite';\n      } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n      // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n      if (this._platform.FIREFOX) {\n        if (this._live === 'polite') {\n          this._role = 'status';\n        }\n\n        if (this._live === 'assertive') {\n          this._role = 'alert';\n        }\n      }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n\n\n    attachComponentPortal(portal) {\n      this._assertNotAttached();\n\n      const result = this._portalOutlet.attachComponentPortal(portal);\n\n      this._afterPortalAttached();\n\n      return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n\n\n    attachTemplatePortal(portal) {\n      this._assertNotAttached();\n\n      const result = this._portalOutlet.attachTemplatePortal(portal);\n\n      this._afterPortalAttached();\n\n      return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n\n\n    onAnimationEnd(event) {\n      const {\n        fromState,\n        toState\n      } = event;\n\n      if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n        this._completeExit();\n      }\n\n      if (toState === 'visible') {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n        const onEnter = this._onEnter;\n\n        this._ngZone.run(() => {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /** Begin animation of snack bar entrance into view. */\n\n\n    enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n\n        this._changeDetectorRef.detectChanges();\n\n        this._screenReaderAnnounce();\n      }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n\n\n    exit() {\n      // It's common for snack bars to be opened by random outside calls like HTTP requests or\n      // errors. Run inside the NgZone to ensure that it functions correctly.\n      this._ngZone.run(() => {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n\n        this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n\n\n        clearTimeout(this._announceTimeoutId);\n      });\n\n      return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n\n    ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n\n\n    _completeExit() {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._ngZone.run(() => {\n          this._onExit.next();\n\n          this._onExit.complete();\n        });\n      });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n\n\n    _afterPortalAttached() {\n      const element = this._elementRef.nativeElement;\n      const panelClasses = this.snackBarConfig.panelClass;\n\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(cssClass => element.classList.add(cssClass));\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n    }\n    /** Asserts that no content is already attached to the container. */\n\n\n    _assertNotAttached() {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n\n\n    _screenReaderAnnounce() {\n      if (!this._announceTimeoutId) {\n        this._ngZone.runOutsideAngular(() => {\n          this._announceTimeoutId = setTimeout(() => {\n            const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n            const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n            if (inertElement && liveElement) {\n              // If an element in the snack bar content is focused before being moved\n              // track it and restore focus after moving to the live region.\n              let focusedElement = null;\n\n              if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n                focusedElement = document.activeElement;\n              }\n\n              inertElement.removeAttribute('aria-hidden');\n              liveElement.appendChild(inertElement);\n              focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n\n              this._onAnnounce.next();\n\n              this._onAnnounce.complete();\n            }\n          }, this._announceDelay);\n        });\n      }\n    }\n\n  }\n\n  _MatSnackBarContainerBase.ɵfac = function _MatSnackBarContainerBase_Factory(t) {\n    return new (t || _MatSnackBarContainerBase)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MatSnackBarConfig));\n  };\n\n  _MatSnackBarContainerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatSnackBarContainerBase,\n    viewQuery: function _MatSnackBarContainerBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatSnackBarContainerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\n\nlet MatSnackBarContainer = /*#__PURE__*/(() => {\n  class MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n      super._afterPortalAttached();\n\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n      }\n\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n      }\n    }\n\n  }\n\n  MatSnackBarContainer.ɵfac = /* @__PURE__ */function () {\n    let ɵMatSnackBarContainer_BaseFactory;\n    return function MatSnackBarContainer_Factory(t) {\n      return (ɵMatSnackBarContainer_BaseFactory || (ɵMatSnackBarContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSnackBarContainer)))(t || MatSnackBarContainer);\n    };\n  }();\n\n  MatSnackBarContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSnackBarContainer,\n    selectors: [[\"snack-bar-container\"]],\n    hostAttrs: [1, \"mat-snack-bar-container\"],\n    hostVars: 1,\n    hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n          return ctx.onAnimationEnd($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n    template: function MatSnackBarContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"div\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n      }\n    },\n    dependencies: [i3$1.CdkPortalOutlet],\n    styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSnackBarAnimations.snackBarState]\n    }\n  });\n  return MatSnackBarContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSnackBarModule = /*#__PURE__*/(() => {\n  class MatSnackBarModule {}\n\n  MatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n    return new (t || MatSnackBarModule)();\n  };\n\n  MatSnackBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatSnackBarModule\n  });\n  MatSnackBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n  });\n  return MatSnackBarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Injection token that can be used to specify default snack bar. */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\nlet _MatSnackBarBase = /*#__PURE__*/(() => {\n  class _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n      this._overlay = _overlay;\n      this._live = _live;\n      this._injector = _injector;\n      this._breakpointObserver = _breakpointObserver;\n      this._parentSnackBar = _parentSnackBar;\n      this._defaultConfig = _defaultConfig;\n      /**\n       * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n       * If there is a parent snack-bar service, all operations should delegate to that parent\n       * via `_openedSnackBarRef`.\n       */\n\n      this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n\n\n    get _openedSnackBarRef() {\n      const parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n\n    set _openedSnackBarRef(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n\n    openFromComponent(component, config) {\n      return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n\n\n    openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n\n\n    open(message, action = '', config) {\n      const _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n\n\n      _config.data = {\n        message,\n        action\n      }; // Since the snack bar has `role=\"alert\"`, we don't\n      // want to announce the same message twice.\n\n      if (_config.announcementMessage === message) {\n        _config.announcementMessage = undefined;\n      }\n\n      return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n\n\n    dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n\n    ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n\n\n    _attachSnackBarContainer(overlayRef, config) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      const injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarConfig,\n          useValue: config\n        }]\n      });\n      const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n      const containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n\n\n    _attach(content, userConfig) {\n      const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n\n      const overlayRef = this._createOverlay(config);\n\n      const container = this._attachSnackBarContainer(overlayRef, config);\n\n      const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n      if (content instanceof TemplateRef) {\n        const portal = new TemplatePortal(content, null, {\n          $implicit: config.data,\n          snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        const injector = this._createInjector(config, snackBarRef);\n\n        const portal = new ComponentPortal(content, undefined, injector);\n        const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n        snackBarRef.instance = contentRef.instance;\n      } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n\n\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n        overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n      });\n\n      if (config.announcementMessage) {\n        // Wait until the snack bar contents have been announced then deliver this message.\n        container._onAnnounce.subscribe(() => {\n          this._live.announce(config.announcementMessage, config.politeness);\n        });\n      }\n\n      this._animateSnackBar(snackBarRef, config);\n\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n\n\n    _animateSnackBar(snackBarRef, config) {\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(() => {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (this._openedSnackBarRef == snackBarRef) {\n          this._openedSnackBarRef = null;\n        }\n\n        if (config.announcementMessage) {\n          this._live.clear();\n        }\n      });\n\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(() => {\n          snackBarRef.containerInstance.enter();\n        });\n\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n\n\n    _createOverlay(config) {\n      const overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n\n      let positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n      const isRtl = config.direction === 'rtl';\n      const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      } // Set horizontal position.\n\n\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n\n\n    _createInjector(config, snackBarRef) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatSnackBarRef,\n          useValue: snackBarRef\n        }, {\n          provide: MAT_SNACK_BAR_DATA,\n          useValue: config.data\n        }]\n      });\n    }\n\n  }\n\n  _MatSnackBarBase.ɵfac = function _MatSnackBarBase_Factory(t) {\n    return new (t || _MatSnackBarBase)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(_MatSnackBarBase, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  };\n\n  _MatSnackBarBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _MatSnackBarBase,\n    factory: _MatSnackBarBase.ɵfac\n  });\n  return _MatSnackBarBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nlet MatSnackBar = /*#__PURE__*/(() => {\n  class MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n      super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n      this.simpleSnackBarComponent = SimpleSnackBar;\n      this.snackBarContainerComponent = MatSnackBarContainer;\n      this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n\n  }\n\n  MatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n    return new (t || MatSnackBar)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  };\n\n  MatSnackBar.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatSnackBar,\n    factory: MatSnackBar.ɵfac,\n    providedIn: MatSnackBarModule\n  });\n  return MatSnackBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };","map":{"version":3,"names":["i1$1","OverlayModule","OverlayConfig","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i2","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","Directive","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","i3","MatButtonModule","Subject","take","takeUntil","trigger","state","style","transition","animate","i1","i3$2","Breakpoints","i2$1","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵfac","ɵcmp","NgIf","MatButton","matSnackBarAnimations","snackBarState","transform","opacity","_MatSnackBarContainerBase","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","ngDevMode","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","NgZone","ElementRef","ChangeDetectorRef","Platform","ɵdir","MatSnackBarContainer","MatSnackBarModule","ɵmod","ɵinj","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","template","open","message","_config","Object","assign","undefined","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","toggle","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sources":["C:/IttyHorowitz/mini project/to-do-list/node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Directive, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\n_MatSnackBarContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSnackBarContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.0\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            this._elementRef.nativeElement.classList.add('mat-snack-bar-top');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.2.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}