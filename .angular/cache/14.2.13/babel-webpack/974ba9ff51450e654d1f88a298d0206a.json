{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType, EffectsModule } from '@ngrx/effects';\nimport { tap, map } from 'rxjs/operators';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nlet StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {}\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreComponent = /*#__PURE__*/(() => {\n  class StoreComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  StoreComponent.ɵfac = function StoreComponent_Factory(t) {\n    return new (t || StoreComponent)();\n  };\n\n  StoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StoreComponent,\n    selectors: [[\"lib-store\"]],\n    decls: 2,\n    vars: 0,\n    template: function StoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" store works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return StoreComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst loadTodos = createAction('[Todo] Load Todos');\nconst loadTodosSuccess = createAction('[Todo] Load Todos Success', props());\nconst loadTodosFailure = createAction('[Todo] Load Todos Failure', props());\nvar todo_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  loadTodos: loadTodos,\n  loadTodosSuccess: loadTodosSuccess,\n  loadTodosFailure: loadTodosFailure\n});\nlet TodoEffects = /*#__PURE__*/(() => {\n  class TodoEffects {\n    constructor(actions$) {\n      this.actions$ = actions$;\n      this.loadTodos$ = createEffect(() => {\n        console.log('Effect created');\n        return this.actions$.pipe(ofType(loadTodos), tap(() => console.log('Action received')), map(() => loadTodosSuccess({\n          todos: []\n        })));\n      });\n      this.loadMissions = createEffect(() => this.actions$.pipe(ofType(loadTodos), tap(() => console.log('Loading todos...'))));\n      console.log('TodoEffects constructor called');\n    }\n\n  }\n\n  TodoEffects.ɵfac = function TodoEffects_Factory(t) {\n    return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions));\n  };\n\n  TodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoEffects,\n    factory: TodoEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoEffects;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreModule = /*#__PURE__*/(() => {\n  class StoreModule {}\n\n  StoreModule.ɵfac = function StoreModule_Factory(t) {\n    return new (t || StoreModule)();\n  };\n\n  StoreModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: StoreModule\n  });\n  StoreModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [EffectsModule.forRoot([TodoEffects])]\n  });\n  return StoreModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(StoreModule, {\n    declarations: [StoreComponent],\n    imports: [i1.EffectsRootModule],\n    exports: [StoreComponent]\n  });\n})();\n\nconst initialState = {\n  todos: [],\n  loading: false,\n  error: null\n};\nconst todoReducer = createReducer(initialState, on(loadTodos, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(loadTodosSuccess, (state, {\n  todos\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  todos\n})), on(loadTodosFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})));\nconst selectTodoState = createFeatureSelector('todos');\nconst selectAllTodos = createSelector(selectTodoState, state => state.todos);\nconst selectTodoLoading = createSelector(selectTodoState, state => state.loading);\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { StoreComponent, StoreModule, StoreService, todo_actions as TodoActions, TodoEffects, initialState, selectAllTodos, selectTodoLoading, selectTodoState, todoReducer };","map":{"version":3,"mappings":";;;;;;IAKaA,Y;QAAAA,aAAY;IAEvBC,eAAiB;;EAFM;;;qBAAZD;EAAY;;;WAAZA;IAAYE,SAAZF,YAAY;IAAAG,YAFX;;SAEDH,Y;;;;;;;ICOAI,c;QAAAA,eAAc;IAEzBH,eAAiB;;IAEjBI,QAAQ,IACP;;EALwB;;;qBAAdD;EAAc;;;UAAdA;IAAcE;IAAAC;IAAAC;IAAAC;MAAA;QAPvBC,EAAG,eAAH,CAAG,CAAH,EAAG,GAAH;QACEA,EACF,OADE,CACF,CADE,EACF,gBADE;QACFA,EAAI,aAAJ;;;;;SAKSN,c;;;;;;;ACPN,MAAMO,SAAS,GAAGC,YAAY,CAAC,mBAAD,CAA9B;AACA,MAAMC,gBAAgB,GAAGD,YAAY,CAC1C,2BAD0C,EAE1CE,KAAK,EAFqC,CAArC;AAIA,MAAMC,gBAAgB,GAAGH,YAAY,CAC1C,2BAD0C,EAE1CE,KAAK,EAFqC,CAArC;;;;;;;ICFQE,W;QAAAA,YAAW;IACxBf,YAAoBgB,QAApB,EAAqC;MAAjB,KAAQA,QAAR;MAKpB,kBAAaC,YAAY,CAAC,MAAK;QAC7BC,OAAO,CAACC,GAAR,CAAY,gBAAZ;QACA,OAAO,KAAKH,QAAL,CAAcI,IAAd,CACLC,MAAM,CAACC,SAAD,CADD,EAELC,GAAG,CAAC,MAAML,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAAP,CAFE,EAGLK,GAAG,CAAC,MAAMC,gBAA4B,CAAC;UAAEC,KAAK,EAAE;QAAT,CAAD,CAAnC,CAHE,CAAP;MAKD,CAPwB,CAAzB;MAUE,oBAAaT,YAAY,CAAC,MAAI,KAAKD,QAAL,CAAcI,IAAd,CAC9BC,MAAM,CAACC,SAAD,CADwB,EAE9BC,GAAG,CAAC,MAAML,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAP,CAF2B,CAAL,CAAzB;MAdAD,OAAO,CAACC,GAAR,CAAY,gCAAZ;IACD;;EAHuB;;;qBAAXJ,aAAWN;EAAA;;;WAAXM;IAAWd,SAAXc,WAAW;IAAAb,YAFV;;SAEDa,W;;;;;;;ICUFY,W;QAAAA,YAAW;;;qBAAXA;EAAW;;;UAAXA;;EANTA;IAAAC,uBAAa,CAACC,OAAd,CAAsB,CAACd,WAAD,CAAtB;EAAA;SAMSY,W;;;;;;;;2EAAAA,aAAW;IAAAG,eATpB3B,cASoB;IATNyB,+BASM;IATNG,UAMd5B,cANc;EASM;AAHN;;ACHL,kBAAY,GAAc;EACrCuB,KAAK,EAAE,EAD8B;EAErCM,OAAO,EAAE,KAF4B;EAGrCC,KAAK,EAAE;AAH8B,CAA1B;ACRA,iBAAW,GAAGC,aAAa,CACtCC,YADsC,EAEtCC,EAAE,CAACC,SAAD,EAAwBC,KAAK,IAC1BC,wCAAK;EACRP,OAAO,EAAE;AADD,CAAL,CADH,CAFoC,EAMtCI,EAAE,CAACI,gBAAD,EAA+B,CAACF,KAAD,EAAQ;EAAEZ;AAAF,CAAR,KAC5Ba,wCACH;EAAAP,OAAO,EAAE,KAAT;EACAN;AADA,CADG,CADH,CANoC,EAWtCU,EAAE,CAACK,gBAAD,EAA+B,CAACH,KAAD,EAAQ;EAAEL;AAAF,CAAR,KAC5BM,wCACH;EAAAP,OAAO,EAAE,KAAT;EACAC;AADA,CADG,CADH,CAXoC,CAA3B;MCDAS,eAAe,GAAGC,qBAAqB,CAAY,OAAZ;AAEvC,oBAAc,GAAGC,cAAc,CAC1CF,eAD0C,EAEzCJ,KAAD,IAAsBA,KAAK,CAACZ,KAFc,CAA/B;AAKA,uBAAiB,GAAGkB,cAAc,CAC7CF,eAD6C,EAE5CJ,KAAD,IAAsBA,KAAK,CAACN,OAFiB,CAAlC;ACVb;;AAEG;;ACFH;;AAEG","names":["StoreService","constructor","factory","providedIn","StoreComponent","ngOnInit","selectors","decls","vars","template","i0","loadTodos","createAction","loadTodosSuccess","props","loadTodosFailure","TodoEffects","actions$","createEffect","console","log","pipe","ofType","todoActions.loadTodos","tap","map","todoActions.loadTodosSuccess","todos","StoreModule","imports","forRoot","declarations","exports","loading","error","createReducer","initialState","on","TodoActions.loadTodos","state","Object","TodoActions.loadTodosSuccess","TodoActions.loadTodosFailure","selectTodoState","createFeatureSelector","createSelector"],"sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.component.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.actions.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.effects.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.module.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.state.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.reducer.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.selectors.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\public-api.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\r\nimport { Todo } from './todo.state';\r\n\r\n\r\n\r\nexport const loadTodos = createAction('[Todo] Load Todos');\r\nexport const loadTodosSuccess = createAction(\r\n  '[Todo] Load Todos Success',\r\n  props<{ todos: Todo[] }>()\r\n);\r\nexport const loadTodosFailure = createAction(\r\n  '[Todo] Load Todos Failure',\r\n  props<{ error: string }>()\r\n); ","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map , tap , exhaustMap , catchError } from 'rxjs/operators';\r\nimport * as todoActions from './todo.actions';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    console.log('TodoEffects constructor called');\r\n  }\r\n\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    console.log('Effect created');\r\n    return this.actions$.pipe(\r\n      ofType(todoActions.loadTodos),\r\n      tap(() => console.log('Action received')),\r\n      map(() => todoActions.loadTodosSuccess({ todos: [] }))\r\n    );\r\n  });\r\n\r\n\r\n    loadMissions=createEffect(()=>this.actions$.pipe(\r\n    ofType(todoActions.loadTodos),\r\n    tap(() => console.log('Loading todos...'))\r\n  ));\r\n} ","import { NgModule } from '@angular/core';\nimport { StoreComponent } from './store.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from './store/todo.effects';\n\n\n\n@NgModule({\n  declarations: [\n    StoreComponent\n  ],\n  imports: [\n    EffectsModule.forRoot([TodoEffects]),\n  ],\n  exports: [\n    StoreComponent\n  ]\n})\nexport class StoreModule { }\n","export interface Todo {\r\n  id: number;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  todos: Todo[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  todos: [],\r\n  loading: false,\r\n  error: null\r\n}; ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState, initialState } from './todo.state';\r\nimport * as TodoActions  from './todo.actions';\r\n\r\nexport const todoReducer = createReducer(\r\n  initialState,\r\n  on(TodoActions.loadTodos, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(TodoActions.loadTodosSuccess, (state, { todos }) => ({\r\n    ...state,\r\n    loading: false,\r\n    todos\r\n  })),\r\n  on(TodoActions.loadTodosFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  }))\r\n); ","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\n\r\nexport const selectTodoState = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.todos\r\n);\r\n\r\nexport const selectTodoLoading = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.loading\r\n); ","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * as TodoActions from './lib/store/todo.actions';\nexport * from './lib/store/todo.effects'\nexport * from './lib/store/todo.reducer'\nexport * from './lib/store/todo.selectors'\nexport * from './lib/store/todo.state'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}