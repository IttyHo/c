{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { createAction, props, createReducer, on, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i1 from '@ngrx/effects';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { map, tap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/common/http';\nimport { HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { combineLatest } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nlet StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {}\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreComponent = /*#__PURE__*/(() => {\n  class StoreComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  StoreComponent.ɵfac = function StoreComponent_Factory(t) {\n    return new (t || StoreComponent)();\n  };\n\n  StoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StoreComponent,\n    selectors: [[\"lib-store\"]],\n    decls: 2,\n    vars: 0,\n    template: function StoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" store works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return StoreComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreLibModule = /*#__PURE__*/(() => {\n  class StoreLibModule {}\n\n  StoreLibModule.ɵfac = function StoreLibModule_Factory(t) {\n    return new (t || StoreLibModule)();\n  };\n\n  StoreLibModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: StoreLibModule\n  });\n  StoreLibModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({});\n  return StoreLibModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(StoreLibModule, {\n    declarations: [StoreComponent],\n    exports: [StoreComponent]\n  });\n})();\n\nconst taskActions = {\n  addTask: createAction('[Todo] Add Task', props()),\n  removeTask: createAction('[Todo] Remove Task', props()),\n  loadTasks: createAction('[Todo] Load Tasks'),\n  loadTasksSuccess: createAction('[Todo] Load Tasks success'),\n  loadTasksFailure: createAction('[Todo] Load Tasks failure', props()),\n  updateTask: createAction('[Todo] Update Task', props())\n};\nlet TodoEffects = /*#__PURE__*/(() => {\n  class TodoEffects {\n    constructor(actions$) {\n      // alert('TodoEffects constructor called!!!');\n      this.actions$ = actions$;\n      this.loadTodos$ = createEffect(() => {\n        // console.log('Setting up loadTodos$ effect');\n        return this.actions$.pipe( // tap(action => console.log('Action in pipe:', action)),\n        ofType(taskActions.loadTasks), // tap(() => alert('loadTodos action caught')),\n        map(() => taskActions.loadTasksSuccess()));\n      });\n      this.addTask$ = createEffect(() => {\n        // console.log('Setting up addTask$ effect');\n        return this.actions$.pipe( // tap(action => console.log('Action in pipe:', action)),\n        ofType(taskActions.addTask), // tap(() => alert('addTask action caught')),\n        map(_ => taskActions.loadTasksSuccess()));\n      });\n      this.removeTask$ = createEffect(() => {\n        // console.log('Setting up addTask$ effect');\n        return this.actions$.pipe( // tap(action => console.log('Action in pipe:', action)),\n        ofType(taskActions.removeTask), // tap(() => alert('addTask action caught')),\n        map(_ => taskActions.loadTasksSuccess()));\n      });\n      this.updateTask$ = createEffect(() => {\n        return this.actions$.pipe(ofType(taskActions.updateTask), map(_ => taskActions.loadTasksSuccess()));\n      }); // נוסיף subscription לדיבאג\n\n      this.actions$.subscribe(action => {\n        console.log('Action received in effects:', action);\n      });\n    }\n\n  }\n\n  TodoEffects.ɵfac = function TodoEffects_Factory(t) {\n    return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions));\n  };\n\n  TodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoEffects,\n    factory: TodoEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoEffects;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst initialState = {\n  tasks: [] = []\n};\nconst todoReducer = createReducer(initialState, on(taskActions.loadTasks, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(taskActions.loadTasksSuccess, state => Object.assign(Object.assign({}, state), {\n  loading: false\n})), on(taskActions.loadTasksFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})), on(taskActions.addTask, (state, {\n  task\n}) => Object.assign(Object.assign({}, state), {\n  tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\n\n})), on(taskActions.removeTask, (state, {\n  id\n}) => Object.assign(Object.assign({}, state), {\n  tasks: state.tasks.filter(task => task.id !== id)\n})), on(taskActions.updateTask, (state, {\n  id,\n  newText\n}) => {\n  const taskExists = state.tasks.some(task => task.id === id);\n\n  if (!taskExists) {\n    alert(\"not exists\");\n    return state; // No changes if the task doesn't exist\n  }\n\n  return Object.assign(Object.assign({}, state), {\n    tasks: state.tasks.map(task => task.id === id ? Object.assign(Object.assign({}, task), {\n      text: newText\n    }) : task // Keep other tasks unchanged\n    )\n  });\n}));\nconst taskFeatureSelector = createFeatureSelector('todos');\nconst selectAllTodos$ = createSelector(taskFeatureSelector, ({\n  tasks\n}) => tasks); // export const selectTodoLoading = createSelector(\n//   selectTodoState,\n//   (state: TodoState) => state\n// );\n\nlet ConfigurationService = /*#__PURE__*/(() => {\n  class ConfigurationService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getTokenAndHeaders() {\n      this.headers = new HttpHeaders({\n        'Authorization': `Bearer ${this.ips.token}`\n      });\n    }\n\n    initConfiguration(path) {\n      return combineLatest(this.http.get(`${path}/ipConfig.json`)).pipe(tap(res => console.log), // map(response=>this.ips]),\n      tap(response => [this.ips] = response), tap(_ => this.getTokenAndHeaders())).toPromise();\n    }\n\n  }\n\n  ConfigurationService.ɵfac = function ConfigurationService_Factory(t) {\n    return new (t || ConfigurationService)(i0.ɵɵinject(i1$1.HttpClient));\n  };\n\n  ConfigurationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigurationService,\n    factory: ConfigurationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConfigurationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HttpServiceBase = /*#__PURE__*/(() => {\n  class HttpServiceBase {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n      this.index = 0;\n    }\n\n    get$(httpRequest) {\n      if (httpRequest.isText) {\n        return this._get$(httpRequest);\n      }\n\n      return this.http.get(httpRequest.fullUrl, {\n        headers: httpRequest.headers,\n        params: Object.assign({}, httpRequest.fullParams)\n      });\n    }\n\n    delete$(httpRequest) {\n      return this.http.delete(httpRequest.fullUrl, {\n        headers: httpRequest.headers,\n        params: Object.assign({}, httpRequest.fullParams)\n      });\n    }\n\n    post$(httpRequest) {\n      if (httpRequest.isText) {\n        return this._post$(httpRequest);\n      }\n\n      return this.http.post(httpRequest.fullUrl, httpRequest.body, {\n        headers: httpRequest.headers,\n        params: Object.assign({}, httpRequest.fullParams)\n      });\n    }\n\n    put$(httpRequest) {\n      return this.http.put(httpRequest.fullUrlWithQS, {\n        headers: httpRequest.headers\n      });\n    }\n\n    request$(httpRequest) {\n      return this.http.request('GET', httpRequest.fullUrl, {\n        params: Object.assign({}, httpRequest.fullParams),\n        observe: 'response',\n        responseType: 'blob'\n      });\n    }\n\n    requestPost$(httpRequest) {\n      return this.http.request('POST', httpRequest.fullUrl, {\n        body: Object.assign({}, httpRequest.body),\n        params: Object.assign({}, httpRequest.fullParams),\n        observe: 'response',\n        responseType: 'blob'\n      });\n    }\n\n    _get$(httpRequest) {\n      return this.http.get(httpRequest.fullUrl, {\n        params: Object.assign({}, httpRequest.fullParams),\n        responseType: 'text'\n      });\n    }\n\n    _post$(httpRequest) {\n      return this.http.post(httpRequest.fullUrl, httpRequest.body, {\n        params: Object.assign({}, httpRequest.fullParams),\n        responseType: 'text'\n      });\n    }\n\n  }\n\n  HttpServiceBase.ɵfac = function HttpServiceBase_Factory(t) {\n    return new (t || HttpServiceBase)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(ConfigurationService));\n  };\n\n  HttpServiceBase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpServiceBase,\n    factory: HttpServiceBase.ɵfac\n  });\n  return HttpServiceBase;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass HttpRequestModel {\n  constructor(copy) {\n    this.params = {};\n    this.body = {};\n    Object.assign(this, copy);\n    this.params = Object.entries(this.params).filter(([, val]) => val !== null).filter(([, val]) => val !== undefined).reduce((state, [key, val]) => Object.assign(Object.assign({}, state), {\n      [key]: val\n    }), {});\n\n    if (Array.isArray(this.body)) {\n      return;\n    }\n\n    this.body = Object.entries(this.body).filter(([, val]) => val !== null).filter(([, val]) => val !== undefined).reduce((state, [key, val]) => Object.assign(Object.assign({}, state), {\n      [key]: val\n    }), {});\n    this.body = Object.keys(this.body).length ? this.body : null;\n  }\n\n  get queryParams() {\n    const result = this._queryParams(this.params);\n\n    return /&/.test(result) ? `?${result}` : '';\n  }\n\n  _queryParams(params, prefix = '') {\n    const result = Object.entries(params).filter(([, value]) => typeof value !== 'object').map(([key, value]) => `${prefix}${key}=${decodeURIComponent(value)}`).join('&');\n    return Object.entries(params).filter(([, value]) => typeof value === 'object').map(([key, value]) => this._queryParams(value, `${key}.`)).concat(result).join('&');\n  }\n\n  get fullUrl() {\n    return this.action ? `${this.url}${this.action}` : this.url;\n  }\n\n  get fullParams() {\n    return this.params;\n  }\n\n  get fullUrlWithQS() {\n    return `${this.url}/${this.qsData}`;\n  }\n\n}\n\nlet AddressService = /*#__PURE__*/(() => {\n  class AddressService extends HttpServiceBase {\n    constructor(http, configService) {\n      super(http, configService);\n      this.http = http;\n      this.configService = configService;\n      this.headers = '';\n    }\n\n    get _serverUrl() {\n      return `${this.configService.ips.swaggerPath}/api/Address`;\n    }\n\n    addAddress(address) {\n      return this.post$(new HttpRequestModel({\n        url: this._serverUrl,\n        body: address,\n        headers: this.configService.headers\n      }));\n    } // addAddress(address:Address): Observable<boolean> {\n    //   return this.http.post<boolean>(this.configService.ips.swaggerPath + '/api/Address', address,{\n    //     headers: this.configService.headers,\n    //   });\n    // }\n\n\n    updateAddressToCheckout(addressId) {\n      // return this.http.put<boolean>(this._serverUrl+'/select', addressId,{\n      //   headers: this.configService.headers,\n      // });\n      return this.put$(new HttpRequestModel({\n        url: this._serverUrl + '/select/',\n        headers: this.configService.headers,\n        qsData: addressId\n      }));\n    }\n\n    getAddress() {\n      // return this.http.get<Address[]>(this._serverUrl, {\n      //   headers: this.configService.headers\n      // });\n      return this.get$(new HttpRequestModel({\n        url: this._serverUrl,\n        headers: this.configService.headers\n      }));\n    }\n\n  }\n\n  AddressService.ɵfac = function AddressService_Factory(t) {\n    return new (t || AddressService)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(ConfigurationService));\n  };\n\n  AddressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddressService,\n    factory: AddressService.ɵfac,\n    providedIn: 'root'\n  });\n  return AddressService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PaymentService = /*#__PURE__*/(() => {\n  class PaymentService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://du-mock-checkout-7d42d0a76fbf.herokuapp.com';\n    } //https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/#addresses\n\n\n    getPaymentOptions(token) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      }); // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n      return this.http.get(this.apiUrl + '/api/Payment/Options', {\n        headers\n      });\n    }\n\n    getPaymentCreditCardOptions(token) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      }); // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n      return this.http.get(this.apiUrl + '/api/Payment/creditcards', {\n        headers\n      });\n    }\n\n  }\n\n  PaymentService.ɵfac = function PaymentService_Factory(t) {\n    return new (t || PaymentService)(i0.ɵɵinject(i1$1.HttpClient));\n  };\n\n  PaymentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PaymentService,\n    factory: PaymentService.ɵfac,\n    providedIn: 'root'\n  });\n  return PaymentService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ServicesModule = /*#__PURE__*/(() => {\n  class ServicesModule {}\n\n  ServicesModule.ɵfac = function ServicesModule_Factory(t) {\n    return new (t || ServicesModule)();\n  };\n\n  ServicesModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: ServicesModule\n  });\n  ServicesModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [AddressService, PaymentService, ConfigurationService],\n    imports: [CommonModule, HttpClientModule]\n  });\n  return ServicesModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ServicesModule, {\n    imports: [CommonModule, HttpClientModule]\n  });\n})();\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AddressService, ConfigurationService, PaymentService, ServicesModule, StoreComponent, StoreLibModule, StoreService, TodoEffects, initialState, selectAllTodos$, taskActions, taskFeatureSelector, todoReducer };","map":{"version":3,"mappings":"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","names":["StoreService","constructor","factory","providedIn","StoreComponent","ngOnInit","selectors","decls","vars","template","i0","StoreLibModule","declarations","exports","addTask","createAction","props","removeTask","loadTasks","loadTasksSuccess","loadTasksFailure","updateTask","TodoEffects","actions$","createEffect","pipe","ofType","taskActions","map","_","subscribe","action","console","log","tasks","todoReducer","createReducer","initialState","on","state","Object","loading","error","task","id","filter","newText","taskExists","some","alert","text","taskFeatureSelector","createFeatureSelector","createSelector","ConfigurationService","http","getTokenAndHeaders","headers","HttpHeaders","ips","token","initConfiguration","path","combineLatest","get","tap","res","response","toPromise","HttpServiceBase","config","index","get$","httpRequest","isText","_get$","fullUrl","params","fullParams","delete$","delete","post$","_post$","post","body","put$","put","fullUrlWithQS","request$","request","observe","responseType","requestPost$","HttpRequestModel","copy","assign","entries","val","undefined","reduce","key","Array","isArray","keys","length","queryParams","result","_queryParams","test","prefix","value","join","concat","url","qsData","AddressService","configService","_serverUrl","swaggerPath","addAddress","address","updateAddressToCheckout","addressId","getAddress","PaymentService","apiUrl","getPaymentOptions","getPaymentCreditCardOptions","ServicesModule","providers","imports","CommonModule","HttpClientModule"],"sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.component.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.module.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.actions.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.effects.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.state.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.reducer.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.selectors.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\services\\configuration.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\services\\http-service.base.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\types\\http-request.model.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\services\\address.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\services\\payment.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\services\\services.module.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\public-api.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TodoEffects } from './store/todo/todo.effects';\nimport { StoreComponent } from './store.component';\n\n@NgModule({\n  declarations: [StoreComponent],\n  imports: [\n  ],\n  exports: [StoreComponent]\n})\nexport class StoreLibModule { }\n","import { createAction, props } from '@ngrx/store';\r\nimport { Task } from './todo.state';\r\n\r\n\r\n\r\nexport const taskActions = {\r\n  addTask: createAction('[Todo] Add Task', props<{ task: Task }>()),\r\n  removeTask: createAction('[Todo] Remove Task', props<{ id: number }>()),\r\n  loadTasks: createAction('[Todo] Load Tasks'),\r\n  loadTasksSuccess: createAction('[Todo] Load Tasks success'),\r\n  loadTasksFailure: createAction('[Todo] Load Tasks failure', props<{ error: any }>()),\r\n  updateTask:createAction( '[Todo] Update Task',props<{ id: number, newText : string }>())\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { exhaustMap, map, tap } from 'rxjs/operators';\r\nimport { taskActions} from './todo.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {\r\n    // alert('TodoEffects constructor called!!!');\r\n    \r\n    // נוסיף subscription לדיבאג\r\n    this.actions$.subscribe(action => {\r\n      console.log('Action received in effects:', action);\r\n    });\r\n  }\r\n\r\n  loadTodos$ = createEffect(() => {\r\n    // console.log('Setting up loadTodos$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.loadTasks),\r\n      // tap(() => alert('loadTodos action caught')),\r\n      map(() => taskActions.loadTasksSuccess())\r\n    );\r\n  });\r\n\r\n  addTask$ = createEffect(() => {\r\n    // console.log('Setting up addTask$ effect');\r\n    return this.actions$.pipe(\r\n      // tap(action => console.log('Action in pipe:', action)),\r\n      ofType(taskActions.addTask),\r\n      // tap(() => alert('addTask action caught')),\r\n        map(_ => taskActions.loadTasksSuccess())\r\n      )})  \r\n     \r\nremoveTask$ = createEffect(() => {\r\n  // console.log('Setting up addTask$ effect');\r\n  return this.actions$.pipe(\r\n    // tap(action => console.log('Action in pipe:', action)),\r\n    ofType(taskActions.removeTask),\r\n    // tap(() => alert('addTask action caught')),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\nupdateTask$ = createEffect(() => {\r\n  return this.actions$.pipe(\r\n    ofType(taskActions.updateTask),\r\n      map(_ => taskActions.loadTasksSuccess())\r\n    )})  \r\n} ","export interface Task {\r\n  id: number;\r\n  text: string;\r\n  completed?: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  tasks: Task[];\r\n\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  tasks:[]=[],\r\n\r\n}; ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { taskActions} from './todo.actions';\r\nimport { initialState } from './todo.state';\r\n\r\nexport const todoReducer = createReducer(\r\ninitialState, \r\n  on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n  })),\r\n  on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  on(taskActions.addTask, (state, { task }) => ({\r\n    ...state,\r\n    tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\r\n\r\n   })),\r\n  on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n  })),\r\n  on(taskActions.updateTask, (state, { id,newText }) => {\r\n    const taskExists = state.tasks.some(task => task.id === id);\r\n    if (!taskExists) {\r\n      alert(\"not exists\")\r\n      return state; // No changes if the task doesn't exist\r\n    }\r\n    return {\r\n      ...state,\r\n      tasks: state.tasks.map(task =>\r\n        task.id === id\r\n          ? { ...task, text: newText } // Update the task\r\n          : task // Keep other tasks unchanged\r\n      )\r\n    };\r\n  })\r\n);\r\n","import { createFeatureSelector, createSelector, MemoizedSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { Task } from './todo.state';\r\n\r\nexport const taskFeatureSelector: MemoizedSelector<object, TodoState>  = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos$ : MemoizedSelector<object, Task[]> =\r\ncreateSelector(\r\n   taskFeatureSelector,\r\n     ({tasks}) => tasks );\r\n\r\n\r\n\r\n\r\n// export const selectTodoLoading = createSelector(\r\n//   selectTodoState,\r\n//   (state: TodoState) => state\r\n// ); ","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { tap, switchMap, map } from 'rxjs/operators';\r\nimport {  IpConfig } from '../types/ip-config';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  ips: IpConfig;\r\n  headers: HttpHeaders;\r\n  constructor(\r\n    private http: HttpClient) {\r\n  }\r\n\r\ngetTokenAndHeaders(){\r\n  this.headers = new HttpHeaders({\r\n    'Authorization': `Bearer ${this.ips.token}`\r\n  });\r\n}\r\n\r\n  initConfiguration(path): Promise<any> {\r\n    return combineLatest(\r\n      this.http.get<IpConfig>(`${path}/ipConfig.json`),\r\n    ).pipe(\r\n      tap(res=>console.log),\r\n      // map(response=>this.ips]),\r\n      tap(response => [this.ips] = response),\r\n      tap(_=>    this.getTokenAndHeaders() )\r\n    ).toPromise();\r\n  }\r\n}\r\n","import { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestModel } from '../types/http-request.model';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Injectable()\r\nexport abstract class HttpServiceBase {\r\n\r\n\r\n  index = 0;\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: ConfigurationService,\r\n  ) { }\r\n\r\n  get$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._get$(httpRequest); }\r\n\r\n    return this.http.get<T>(httpRequest.fullUrl, \r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  delete$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.delete<T>(httpRequest.fullUrl,  \r\n       { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  post$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._post$(httpRequest); }\r\n    return this.http.post<T>(httpRequest.fullUrl, httpRequest.body,\r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  put$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.put<T>(httpRequest.fullUrlWithQS, \r\n      { headers: httpRequest.headers }\r\n    );\r\n  }\r\n\r\n  request$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'GET',\r\n      httpRequest.fullUrl,\r\n      {\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  requestPost$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'POST',\r\n      httpRequest.fullUrl,\r\n      {\r\n\r\n        body: { ...httpRequest.body },\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  private _get$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.get(httpRequest.fullUrl, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n  private _post$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport class HttpRequestModel {\r\n  url: string;\r\n  action?: string;\r\n  params: object = {};\r\n  body: any = {};\r\n  isText: boolean;\r\n  headers: HttpHeaders;\r\n  qsData?:string;\r\n\r\n  constructor(copy?: Partial<HttpRequestModel>) {\r\n    Object.assign(this, copy);\r\n\r\n    this.params = Object.entries(this.params)\r\n      .filter(([, val]) => val !== null)\r\n      .filter(([, val]) => val !== undefined)\r\n      .reduce((state, [key, val]) => ({ ...state, [key]: val }), {});\r\n\r\n    if (Array.isArray(this.body)) { return; }\r\n\r\n    this.body = Object.entries(this.body)\r\n      .filter(([, val]) => val !== null)\r\n      .filter(([, val]) => val !== undefined)\r\n      .reduce((state, [key, val]) => ({\r\n        ...state, [key]: val\r\n      }), {});\r\n\r\n    this.body = Object.keys(this.body).length ? this.body : null;\r\n  }\r\n\r\n  get queryParams() {\r\n\r\n    const result = this._queryParams(this.params);\r\n\r\n    return /&/.test(result) ? `?${result}` : '';\r\n  }\r\n\r\n  private _queryParams(params: object, prefix: string = ''): string {\r\n    const result = Object.entries(params)\r\n      .filter(([, value]) => typeof (value) !== 'object')\r\n      .map(([key, value]) => `${prefix}${key}=${decodeURIComponent(value)}`)\r\n      .join('&');\r\n\r\n    return Object.entries(params)\r\n      .filter(([, value]) => typeof (value) === 'object')\r\n      .map(([key, value]) => this._queryParams(value, `${key}.`))\r\n      .concat(result)\r\n      .join('&');\r\n  }\r\n\r\n  get fullUrl() { \r\n    return this.action? `${this.url}${this.action}`: this.url;\r\n   }\r\n\r\n  get fullParams() {\r\n    return this.params;\r\n  }\r\n\r\n  get fullUrlWithQS() {\r\n    return `${this.url}/${this.qsData}`\r\n  }i\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ConfigurationService } from './configuration.service';\nimport { Address } from '../types/address';\nimport { HttpServiceBase } from './http-service.base';\nimport { HttpRequestModel } from '../types/http-request.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddressService extends HttpServiceBase {\n\n  headers: String = '';\n\n  private get _serverUrl(): string {\n    return `${this.configService.ips.swaggerPath}/api/Address`;\n  }\n\n  constructor(public http: HttpClient,\n    public configService: ConfigurationService) {\n    super(http, configService);\n  }\n\n\n  addAddress(address: Address): Observable<boolean> {\n    return this.post$(new HttpRequestModel({\n      url: this._serverUrl,\n      body: address,\n      headers:this.configService.headers\n    }));\n  }\n\n  // addAddress(address:Address): Observable<boolean> {\n  //   return this.http.post<boolean>(this.configService.ips.swaggerPath + '/api/Address', address,{\n  //     headers: this.configService.headers,\n  //   });\n  // }\n\n\n  updateAddressToCheckout(addressId:string): Observable<boolean> {\n    // return this.http.put<boolean>(this._serverUrl+'/select', addressId,{\n    //   headers: this.configService.headers,\n    // });\n\n    return this.put$ (new HttpRequestModel({\n      url: this._serverUrl+'/select/',\n      headers:this.configService.headers,\n      qsData: addressId\n    }));\n  }\n\n\n  getAddress(): Observable<Address[]> {\n    // return this.http.get<Address[]>(this._serverUrl, {\n    //   headers: this.configService.headers\n    // });\n    return this.get$ (new HttpRequestModel({\n      url: this._serverUrl,\n      headers:this.configService.headers\n    }));\n  }\n\n\n\n  \n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n \n  constructor(private http:HttpClient) { }\n  \n  apiUrl='https://du-mock-checkout-7d42d0a76fbf.herokuapp.com';\n  //https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/#addresses\n  getPaymentOptions(token: string): Observable<any> {\n\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n    return this.http.get<any>(this.apiUrl+'/api/Payment/Options', { headers });\n  }        \n  \n  \n  \n  getPaymentCreditCardOptions(token: string): Observable<any> {\n\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // https://du-mock-checkout-7d42d0a76fbf.herokuapp.com/api/Payment/options\n\n    return this.http.get<any>(this.apiUrl+'/api/Payment/creditcards', { headers });\n  }   \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AddressService } from './address.service';\nimport { PaymentService } from './payment.service';\nimport { ConfigurationService } from './configuration.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers:[AddressService , PaymentService , ConfigurationService]\n})\nexport class ServicesModule { }\n","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * from './lib/store/todo/todo.actions';\nexport * from './lib/store/todo/todo.effects';\nexport * from './lib/store/todo/todo.reducer';\nexport * from './lib/store/todo/todo.selectors';\nexport * from './lib/store/todo/todo.state';\n\n//****************services*****************/\nexport * from './lib/services/address.service';\nexport * from './lib/services/services.module';\nexport * from './lib/services/payment.service';\nexport * from './lib/services/configuration.service';\n\n\n//************types*********************/\nexport * from './lib/types/address';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}