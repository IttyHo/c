{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@ngrx/store';\nimport { createAction, props, createReducer, on, StoreModule, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i1$1 from '@ngrx/effects';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\nlet StoreService = /*#__PURE__*/(() => {\n  class StoreService {\n    constructor() {}\n\n  }\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreService,\n    factory: StoreService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StoreComponent = /*#__PURE__*/(() => {\n  class StoreComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  StoreComponent.ɵfac = function StoreComponent_Factory(t) {\n    return new (t || StoreComponent)();\n  };\n\n  StoreComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StoreComponent,\n    selectors: [[\"lib-store\"]],\n    decls: 2,\n    vars: 0,\n    template: function StoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" store works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return StoreComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst initialState = {\n  todos: [],\n  loading: false,\n  error: null\n};\nconst loadTodos = createAction('[Todo] Load Todos');\nconst loadTodosSuccess = createAction('[Todo] Load Todos Success', props());\nconst loadTodosFailure = createAction('[Todo] Load Todos Failure', props());\nconst todoReducer = createReducer(initialState, on(loadTodos, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(loadTodosSuccess, (state, {\n  todos\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  todos\n})), on(loadTodosFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})));\nlet TodoStoreModule = /*#__PURE__*/(() => {\n  class TodoStoreModule {}\n\n  TodoStoreModule.ɵfac = function TodoStoreModule_Factory(t) {\n    return new (t || TodoStoreModule)();\n  };\n\n  TodoStoreModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: TodoStoreModule\n  });\n  TodoStoreModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [CommonModule, StoreModule.forFeature('todos', todoReducer)]\n  });\n  return TodoStoreModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TodoStoreModule, {\n    imports: [CommonModule, i1.StoreFeatureModule]\n  });\n})();\n\nlet TodoEffects = /*#__PURE__*/(() => {\n  class TodoEffects {\n    constructor(actions$) {\n      this.actions$ = actions$;\n      this.loadMissions = createEffect(() => this.actions$.pipe(ofType(loadTodos), tap(() => console.log('Loading todos...'))));\n    }\n\n  }\n\n  TodoEffects.ɵfac = function TodoEffects_Factory(t) {\n    return new (t || TodoEffects)(i0.ɵɵinject(i1$1.Actions));\n  };\n\n  TodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoEffects,\n    factory: TodoEffects.ɵfac\n  });\n  return TodoEffects;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst selectTodoState = createFeatureSelector('todos');\nconst selectAllTodos = createSelector(selectTodoState, state => state.todos);\nconst selectTodoLoading = createSelector(selectTodoState, state => state.loading);\n/*\r\n * Public API Surface of store\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { StoreComponent, StoreService, TodoEffects, TodoStoreModule, initialState, loadTodos, loadTodosFailure, loadTodosSuccess, selectAllTodos, selectTodoLoading, selectTodoState, todoReducer };","map":{"version":3,"mappings":";;;;;;;;IAKaA,Y;QAAAA,aAAY;IAEvBC,eAAiB;;EAFM;;;qBAAZD;EAAY;;;WAAZA;IAAYE,SAAZF,YAAY;IAAAG,YAFX;;SAEDH,Y;;;;;;;ICOAI,c;QAAAA,eAAc;IAEzBH,eAAiB;;IAEjBI,QAAQ,IACP;;EALwB;;;qBAAdD;EAAc;;;UAAdA;IAAcE;IAAAC;IAAAC;IAAAC;MAAA;QAPvBC,EAAG,eAAH,CAAG,CAAH,EAAG,GAAH;QACEA,EACF,OADE,CACF,CADE,EACF,gBADE;QACFA,EAAI,aAAJ;;;;;SAKSN,c;;;;;;;ACAA,kBAAY,GAAc;EACrCO,KAAK,EAAE,EAD8B;EAErCC,OAAO,EAAE,KAF4B;EAGrCC,KAAK,EAAE;AAH8B,CAA1B;MCTAC,SAAS,GAAGC,YAAY,CAAC,mBAAD;AACxB,sBAAgB,GAAGA,YAAY,CAC1C,2BAD0C,EAE1CC,KAAK,EAFqC,CAA/B;AAIA,sBAAgB,GAAGD,YAAY,CAC1C,2BAD0C,EAE1CC,KAAK,EAFqC,CAA/B;ACJA,iBAAW,GAAGC,aAAa,CACtCC,YADsC,EAEtCC,EAAE,CAACC,SAAD,EAAwBC,KAAK,IAC1BC,wCAAK;EACRV,OAAO,EAAE;AADD,CAAL,CADH,CAFoC,EAMtCO,EAAE,CAACI,gBAAD,EAA+B,CAACF,KAAD,EAAQ;EAAEV;AAAF,CAAR,KAC5BW,wCACH;EAAAV,OAAO,EAAE,KAAT;EACAD;AADA,CADG,CADH,CANoC,EAWtCQ,EAAE,CAACK,gBAAD,EAA+B,CAACH,KAAD,EAAQ;EAAER;AAAF,CAAR,KAC5BS,wCACH;EAAAV,OAAO,EAAE,KAAT;EACAC;AADA,CADG,CADH,CAXoC,CAA3B;ICSAY,e;QAAAA,gBAAe;;;qBAAfA;EAAe;;;UAAfA;;;cALTC,cACAC,WAAW,CAACC,UAAZ,CAAuB,OAAvB,EAAgCC,WAAhC;;SAISJ,e;;;;;;;AAAA;EAAA,0FAAe;IAAAK,UALxBJ,YAKwB,EALZK,qBAKY;EAAA,CAAf;AALG,CAKH;;ICPAC,W;QAAAA,YAAW;IACtB/B,YAAoBgC,QAApB,EAAqC;MAAjB,KAAQA,QAAR;MAClB,oBAAaC,YAAY,CAAC,MAAI,KAAKD,QAAL,CAAcE,IAAd,CAC9BC,MAAM,CAAChB,SAAD,CADwB,EAE9BiB,GAAG,CAAC,MAAMC,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAP,CAF2B,CAAL,CAAzB;IADuC;;EADnB;;;qBAAXP,aAAWtB;EAAA;;EAAXsB;IAAAQ;IAAWtC,SAAX8B,WAAW;EAAX;SAAAA,W;;;;;;;MCHAS,eAAe,GAAGC,qBAAqB,CAAY,OAAZ;AAEvC,oBAAc,GAAGC,cAAc,CAC1CF,eAD0C,EAEzCpB,KAAD,IAAsBA,KAAK,CAACV,KAFc,CAA/B;AAKA,uBAAiB,GAAGgC,cAAc,CAC7CF,eAD6C,EAE5CpB,KAAD,IAAsBA,KAAK,CAACT,OAFiB,CAAlC;ACVb;;AAEG;;ACFH;;AAEG","names":["StoreService","constructor","factory","providedIn","StoreComponent","ngOnInit","selectors","decls","vars","template","i0","todos","loading","error","loadTodos","createAction","props","createReducer","initialState","on","TodoActions.loadTodos","state","Object","TodoActions.loadTodosSuccess","TodoActions.loadTodosFailure","TodoStoreModule","CommonModule","StoreModule","forFeature","todoReducer","imports","i1","TodoEffects","actions$","createEffect","pipe","ofType","tap","console","log","token","selectTodoState","createFeatureSelector","createSelector"],"sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.service.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.component.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.state.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.actions.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.reducer.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store.module.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.effects.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo.selectors.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\public-api.ts","C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-store',\n  template: `\n    <p>\n      store works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class StoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export interface Todo {\r\n  id: number;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\nexport interface TodoState {\r\n  todos: Todo[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const initialState: TodoState = {\r\n  todos: [],\r\n  loading: false,\r\n  error: null\r\n}; ","import { createAction, props } from '@ngrx/store';\r\nimport { Todo } from './todo.state';\r\n\r\nexport const loadTodos = createAction('[Todo] Load Todos');\r\nexport const loadTodosSuccess = createAction(\r\n  '[Todo] Load Todos Success',\r\n  props<{ todos: Todo[] }>()\r\n);\r\nexport const loadTodosFailure = createAction(\r\n  '[Todo] Load Todos Failure',\r\n  props<{ error: string }>()\r\n); ","import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState, initialState } from './todo.state';\r\nimport * as TodoActions from './todo.actions';\r\n\r\nexport const todoReducer = createReducer(\r\n  initialState,\r\n  on(TodoActions.loadTodos, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(TodoActions.loadTodosSuccess, (state, { todos }) => ({\r\n    ...state,\r\n    loading: false,\r\n    todos\r\n  })),\r\n  on(TodoActions.loadTodosFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  }))\r\n); ","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { todoReducer } from './store/todo.reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('todos', todoReducer)\n  ],\n  exports: []\n})\nexport class TodoStoreModule { }\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map , tap} from 'rxjs/operators';\r\nimport * as TodoActions from './todo.actions';\r\n\r\n@Injectable()\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions) {}\r\n    loadMissions=createEffect(()=>this.actions$.pipe(\r\n    ofType(TodoActions.loadTodos),\r\n    tap(() => console.log('Loading todos...'))\r\n  ));\r\n} ","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\n\r\nexport const selectTodoState = createFeatureSelector<TodoState>('todos');\r\n\r\nexport const selectAllTodos = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.todos\r\n);\r\n\r\nexport const selectTodoLoading = createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.loading\r\n); ","/*\n * Public API Surface of store\n */\n\nexport * from './lib/store.service';\nexport * from './lib/store.component';\nexport * from './lib/store.module';\n\nexport * from './lib/store/todo.actions'\nexport * from './lib/store/todo.effects'\nexport * from './lib/store/todo.reducer'\nexport * from './lib/store/todo.selectors'\nexport * from './lib/store/todo.state'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}