{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { initialState } from './todo.state';\nimport { taskActions } from './todo.actions';\nexport const todoReducer = createReducer(initialState, on(taskActions.loadTasks, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(taskActions.loadTasksSuccess, state => Object.assign(Object.assign({}, state), {\n  loading: false\n})), on(taskActions.loadTasksFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})), //   on(TodoActions.addTask, (state, { task }) => ({\n//     ...state,\n//     tasks: [...state.tasks, { \n//       id: Number(Math.random().toString(36).substring(2, 9)),\n//       text :task.data?\n//     }]\n//   })),\non(taskActions.removeTask, (state, {\n  id\n}) => Object.assign(Object.assign({}, state), {\n  tasks: state.tasks.filter(task => task.id !== id)\n})));","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,EAAxB,QAAkC,aAAlC;AACA,SAAoBC,YAApB,QAAwC,cAAxC;AACA,SAASC,WAAT,QAA2B,gBAA3B;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,CACtCE,YADsC,EAEtCD,EAAE,CAACE,WAAW,CAACE,SAAb,EAAwBC,KAAK,IAAIC,gCAC9BD,KAD8B,GACzB;EACRE,OAAO,EAAE;AADD,CADyB,CAAjC,CAFoC,EAMtCP,EAAE,CAACE,WAAW,CAACM,gBAAb,EAAgCH,KAAD,IAAWC,gCACvCD,KADuC,GAClC;EACRE,OAAO,EAAE;AADD,CADkC,CAA1C,CANoC,EAUtCP,EAAE,CAACE,WAAW,CAACO,gBAAb,EAA+B,CAACJ,KAAD,EAAQ;EAAEK;AAAF,CAAR,KAAsBJ,gCAClDD,KADkD,GAC7C;EACRE,OAAO,EAAE,KADD;EAERG;AAFQ,CAD6C,CAArD,CAVoC,EAexC;AACA;AACA;AACA;AACA;AACA;AAEA;AACEV,EAAE,CAACE,WAAW,CAACS,UAAb,EAAyB,CAACN,KAAD,EAAQ;EAAEO;AAAF,CAAR,KAAmBN,gCACzCD,KADyC,GACpC;EACRQ,KAAK,EAAER,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYA,EAAvC;AADC,CADoC,CAA5C,CAvBoC,CAAjC","names":["createReducer","on","initialState","taskActions","todoReducer","loadTasks","state","Object","loading","loadTasksSuccess","loadTasksFailure","error","removeTask","id","tasks","filter","task"],"sourceRoot":"","sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState, initialState } from './todo.state';\r\nimport { taskActions} from './todo.actions';\r\n\r\nexport const todoReducer = createReducer(\r\n  initialState,\r\n  on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n  })),\r\n  on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n//   on(TodoActions.addTask, (state, { task }) => ({\r\n//     ...state,\r\n//     tasks: [...state.tasks, { \r\n//       id: Number(Math.random().toString(36).substring(2, 9)),\r\n//       text :task.data?\r\n//     }]\r\n\r\n//   })),\r\n  on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n  }))\r\n); \r\n"]},"metadata":{},"sourceType":"module"}