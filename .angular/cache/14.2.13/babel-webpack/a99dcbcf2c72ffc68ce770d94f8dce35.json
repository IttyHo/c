{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nlet CheckoutComponent = class CheckoutComponent {\n  constructor(addressService, paymentService, fb, snackBar, languageService) {\n    this.addressService = addressService;\n    this.paymentService = paymentService;\n    this.fb = fb;\n    this.snackBar = snackBar;\n    this.languageService = languageService;\n    this.isSelectedAddress = false;\n    this.addresses = [];\n    this.selectedAddress = this.addresses[0];\n    this.showAddressForm = false;\n    this.paymentMethods = [];\n    this.selectedPaymentMethod = this.paymentMethods[0];\n    this.cartItems = [{\n      name: 'Item 1',\n      quantity: 2,\n      price: 50\n    }, {\n      name: 'Item 2',\n      quantity: 1,\n      price: 30\n    }];\n  }\n\n  toggleAddressForm() {\n    this.showAddressForm = !this.showAddressForm;\n    this.initForm();\n  }\n\n  changeLanguage(language) {\n    this.languageService.setLanguage(language);\n  }\n\n  ngOnInit() {\n    this.addressService.getAddress().subscribe(address => {\n      this.addresses = address;\n      console.log({\n        address\n      });\n    });\n    this.getPictures();\n    this.paymentService.getPaymentOptions().subscribe(payment => {\n      this.paymentMethods = payment;\n      console.log({\n        payment\n      });\n    });\n    this.paymentService.getPaymentCreditCardOptions().subscribe(payment => {\n      this.creditCards = payment;\n      console.log({\n        payment\n      });\n    });\n    this.initForm();\n  }\n\n  getPictures() {\n    this.shufersalLogo = environment.shufersalLogo;\n  }\n\n  initForm() {\n    this.addressForm = this.fb.group({\n      id: [''],\n      addressLine1: ['', Validators.required],\n      addressLine2: [''],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      state: [''],\n      zipCode: ['', [Validators.required, Validators.pattern('^[0-9]{5,7}$')]],\n      saved: [true]\n    });\n  }\n\n  addAddress() {\n    this.addressService.addAddress(this.addressForm.value).subscribe(add => {\n      console.log(add);\n      this.addresses.push(Object.assign({}, this.addressForm.value));\n    });\n    console.log(this.addresses);\n    this.showAddressForm = false;\n  }\n\n  selectAddress(address) {\n    this.selectedAddress = address;\n    this.isSelectedAddress = true;\n  }\n\n  calculateTotal() {\n    return this.cartItems.reduce((total, item) => total + item.quantity * item.price, 0);\n  }\n\n  updateAddressToCheckout() {\n    this.addressService.updateAddressToCheckout(this.selectedAddress.id).pipe(map(_ => this.selectedAddress = null)).subscribe();\n    this.snackBar.open(`הכתובת שנבחרה למשלוח היא: ${this.selectedAddress.addressLine1} ${this.selectedAddress.city}`, 'סגור', {\n      duration: 5000,\n      panelClass: ['my-snack-bar']\n    });\n  }\n\n  completeCheckout() {\n    this.snackBar.open('Checkout completed!', 'סגור', {\n      duration: 3000,\n      panelClass: ['my-snack-bar']\n    });\n  }\n\n};\nCheckoutComponent = __decorate([Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.scss']\n})], CheckoutComponent);\nexport { CheckoutComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","map","environment","CheckoutComponent","constructor","addressService","paymentService","fb","snackBar","languageService","addresses","paymentMethods","name","quantity","price","toggleAddressForm","showAddressForm","initForm","changeLanguage","language","setLanguage","ngOnInit","getAddress","subscribe","address","console","log","getPictures","getPaymentOptions","payment","getPaymentCreditCardOptions","creditCards","shufersalLogo","addressForm","group","id","addressLine1","required","addressLine2","city","country","state","zipCode","pattern","saved","addAddress","value","add","push","Object","selectAddress","selectedAddress","isSelectedAddress","calculateTotal","cartItems","reduce","total","item","updateAddressToCheckout","pipe","_","open","duration","panelClass","completeCheckout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\src\\app\\pages\\checkout\\checkout.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Address, AddressService, PaymentService , LanguageService } from 'store';\n\n@Component({\n  selector: 'app-checkout',\n  templateUrl: './checkout.component.html',\n  styleUrls: ['./checkout.component.scss']\n})\nexport class CheckoutComponent implements OnInit {\n\n  creditCards: any;\n  isSelectedAddress: boolean = false;\n  addressForm: FormGroup;\n  shufersalLogo: string;\n  ;\n\n\n  constructor(private addressService: AddressService,\n    private paymentService: PaymentService,\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar,\n    private languageService: LanguageService\n  ) {\n\n  }\n\n  addresses: Address[] = [];\n  selectedAddress = this.addresses[0];\n  showAddressForm = false;\n  newAddress: Address;\n  ;\n  paymentMethods = [];\n  selectedPaymentMethod = this.paymentMethods[0];\n\n  cartItems = [\n    { name: 'Item 1', quantity: 2, price: 50 },\n    { name: 'Item 2', quantity: 1, price: 30 }\n  ];\n\n  toggleAddressForm() {\n    this.showAddressForm = !this.showAddressForm;\n    this.initForm();\n  }\n\n  changeLanguage(language: string) {\n    this.languageService.setLanguage(language);\n  }\n\n  ngOnInit() {\n    this.addressService.getAddress().subscribe(address => {\n      this.addresses = address;\n      console.log({ address });\n\n    })\n\n    this.getPictures();\n    this.paymentService.getPaymentOptions().subscribe(payment => {\n      this.paymentMethods = payment\n      console.log({ payment });\n\n    })\n    this.paymentService.getPaymentCreditCardOptions().subscribe(payment => {\n      this.creditCards = payment\n      console.log({ payment });\n\n    })\n\n    this.initForm();\n  }\n\n  getPictures(){\n    this.shufersalLogo=environment.shufersalLogo;\n  }\n\n\n  initForm() {\n    this.addressForm = this.fb.group({\n      id: [''],\n      addressLine1: ['', Validators.required],\n      addressLine2: [''],\n      city: ['', Validators.required],\n      country: ['', Validators.required],\n      state: [''],\n      zipCode: ['', [Validators.required, Validators.pattern('^[0-9]{5,7}$')]],\n      saved: [true]\n    });\n  }\n\n  addAddress() {\n    this.addressService.addAddress(this.addressForm.value).subscribe(add => {\n      console.log(add);\n      this.addresses.push({ ...this.addressForm.value })\n    }\n    )\n    console.log(this.addresses);\n    this.showAddressForm = false;\n  }\n\n  selectAddress(address: Address) {\n    this.selectedAddress = address;\n    this.isSelectedAddress = true;\n  }\n\n  calculateTotal() {\n    return this.cartItems.reduce((total, item) => total + item.quantity * item.price, 0);\n  }\n\n  updateAddressToCheckout() {\n\n    this.addressService.updateAddressToCheckout(this.selectedAddress.id).pipe(\n      map(_ => this.selectedAddress = null)\n    ).subscribe()\n    this.snackBar.open(\n      `הכתובת שנבחרה למשלוח היא: ${this.selectedAddress.addressLine1} ${this.selectedAddress.city}`,\n      'סגור',\n      {\n        duration: 5000,\n        panelClass: ['my-snack-bar']\n      }\n    )\n  }\n\n  completeCheckout() {\n\n    this.snackBar.open(\n      'Checkout completed!',\n      'סגור',\n      {\n        duration: 3000,\n        panelClass: ['my-snack-bar']\n      }\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}