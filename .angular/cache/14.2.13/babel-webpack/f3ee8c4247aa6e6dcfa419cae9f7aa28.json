{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { taskActions } from './todo.actions';\nimport { initialState } from './todo.state';\nexport const todoReducer = createReducer(initialState, on(taskActions.loadTasks, state => Object.assign(Object.assign({}, state), {\n  loading: true\n})), on(taskActions.loadTasksSuccess, state => Object.assign(Object.assign({}, state), {\n  loading: false\n})), on(taskActions.loadTasksFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  loading: false,\n  error\n})), on(taskActions.addTask, (state, {\n  task\n}) => Object.assign(Object.assign({}, state), {\n  tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\n\n})), on(taskActions.removeTask, (state, {\n  id\n}) => Object.assign(Object.assign({}, state), {\n  tasks: state.tasks.filter(task => task.id !== id)\n})), on(taskActions.updateTask, (state, {\n  id,\n  newText\n}) => {\n  const taskExists = state.tasks.some(task => task.id === id);\n\n  if (!taskExists) {\n    alert(\"not exists\");\n    return state; // No changes if the task doesn't exist\n  }\n\n  return Object.assign(Object.assign({}, state), {\n    tasks: state.tasks.map(task => task.id === id ? Object.assign(Object.assign({}, task), {\n      text: newText\n    }) : task // Keep other tasks unchanged\n    )\n  });\n}));","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,EAAxB,QAAkC,aAAlC;AAEA,SAASC,WAAT,QAA2B,gBAA3B;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,CACxCG,YADwC,EAEtCF,EAAE,CAACC,WAAW,CAACG,SAAb,EAAwBC,KAAK,IAAIC,gCAC9BD,KAD8B,GACzB;EACRE,OAAO,EAAE;AADD,CADyB,CAAjC,CAFoC,EAMtCP,EAAE,CAACC,WAAW,CAACO,gBAAb,EAAgCH,KAAD,IAAWC,gCACvCD,KADuC,GAClC;EACRE,OAAO,EAAE;AADD,CADkC,CAA1C,CANoC,EAUtCP,EAAE,CAACC,WAAW,CAACQ,gBAAb,EAA+B,CAACJ,KAAD,EAAQ;EAAEK;AAAF,CAAR,KAAsBJ,gCAClDD,KADkD,GAC7C;EACRE,OAAO,EAAE,KADD;EAERG;AAFQ,CAD6C,CAArD,CAVoC,EAetCV,EAAE,CAACC,WAAW,CAACU,OAAb,EAAsB,CAACN,KAAD,EAAQ;EAAEO;AAAF,CAAR,KAAqBN,gCACxCD,KADwC,GACnC;EACRQ,KAAK,EAAE,CAAC,GAAGR,KAAK,CAACQ,KAAV,EAAiBD,IAAjB,CADC,CACsB;;AADtB,CADmC,CAA3C,CAfoC,EAoBtCZ,EAAE,CAACC,WAAW,CAACa,UAAb,EAAyB,CAACT,KAAD,EAAQ;EAAEU;AAAF,CAAR,KAAmBT,gCACzCD,KADyC,GACpC;EACRQ,KAAK,EAAER,KAAK,CAACQ,KAAN,CAAYG,MAAZ,CAAmBJ,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYA,EAAvC;AADC,CADoC,CAA5C,CApBoC,EAwBtCf,EAAE,CAACC,WAAW,CAACgB,UAAb,EAAyB,CAACZ,KAAD,EAAQ;EAAEU,EAAF;EAAKG;AAAL,CAAR,KAA0B;EACnD,MAAMC,UAAU,GAAGd,KAAK,CAACQ,KAAN,CAAYO,IAAZ,CAAiBR,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYA,EAArC,CAAnB;;EACA,IAAI,CAACI,UAAL,EAAiB;IACfE,KAAK,CAAC,YAAD,CAAL;IACA,OAAOhB,KAAP,CAFe,CAED;EACf;;EACD,uCACKA,KADL,GACU;IACRQ,KAAK,EAAER,KAAK,CAACQ,KAAN,CAAYS,GAAZ,CAAgBV,IAAI,IACzBA,IAAI,CAACG,EAAL,KAAYA,EAAZ,GACGT,gCAAMM,IAAN,GAAU;MAAEW,IAAI,EAAEL;IAAR,CAAV,CADH,GAEIN,IAHC,CAGI;IAHJ;EADC,CADV;AAQD,CAdC,CAxBoC,CAAjC","names":["createReducer","on","taskActions","initialState","todoReducer","loadTasks","state","Object","loading","loadTasksSuccess","loadTasksFailure","error","addTask","task","tasks","removeTask","id","filter","updateTask","newText","taskExists","some","alert","map","text"],"sourceRoot":"","sources":["C:\\IttyHorowitz\\mini project\\to-do-list\\projects\\store\\src\\lib\\store\\todo\\todo.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\r\nimport { TodoState } from './todo.state';\r\nimport { taskActions} from './todo.actions';\r\nimport { initialState } from './todo.state';\r\n\r\nexport const todoReducer = createReducer(\r\ninitialState, \r\n  on(taskActions.loadTasks, state => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  on(taskActions.loadTasksSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n  })),\r\n  on(taskActions.loadTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  on(taskActions.addTask, (state, { task }) => ({\r\n    ...state,\r\n    tasks: [...state.tasks, task] // דחיפת הנתון החדש למערך\r\n\r\n   })),\r\n  on(taskActions.removeTask, (state, { id }) => ({\r\n    ...state,\r\n    tasks: state.tasks.filter(task => task.id !== id)\r\n  })),\r\n  on(taskActions.updateTask, (state, { id,newText }) => {\r\n    const taskExists = state.tasks.some(task => task.id === id);\r\n    if (!taskExists) {\r\n      alert(\"not exists\")\r\n      return state; // No changes if the task doesn't exist\r\n    }\r\n    return {\r\n      ...state,\r\n      tasks: state.tasks.map(task =>\r\n        task.id === id\r\n          ? { ...task, text: newText } // Update the task\r\n          : task // Keep other tasks unchanged\r\n      )\r\n    };\r\n  })\r\n);\r\n"]},"metadata":{},"sourceType":"module"}